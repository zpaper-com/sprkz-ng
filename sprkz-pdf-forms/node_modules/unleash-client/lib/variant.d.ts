import { Context } from './context';
import { FeatureInterface } from './feature';
export declare enum PayloadType {
    STRING = "string",
    JSON = "json",
    CSV = "csv",
    NUMBER = "number"
}
interface Override {
    contextName: string;
    values: string[];
}
export interface Payload {
    type: PayloadType;
    value: string;
}
export interface VariantDefinition {
    name: string;
    weight: number;
    stickiness?: string;
    payload?: Payload;
    overrides?: Override[];
}
export interface Variant {
    name: string;
    enabled: boolean;
    payload?: Payload;
    feature_enabled?: boolean;
}
export declare const defaultVariant: Variant;
/**
 * @deprecated Use {@link Variant} instead and feature_enabled field
 */
export interface VariantWithFeatureStatus extends Variant {
    /**
     * @deprecated Use {@link feature_enabled} instead
     */
    featureEnabled: boolean;
}
/**
 * @deprecated Use {@link defaultVariant} const instead
 */
export declare function getDefaultVariant(): Variant;
export declare function selectVariantDefinition(groupId: string, stickiness: string | undefined, variants: VariantDefinition[], context: Context): VariantDefinition | null;
export declare function selectVariant(feature: FeatureInterface, context: Context): VariantDefinition | null;
export {};
//# sourceMappingURL=variant.d.ts.map