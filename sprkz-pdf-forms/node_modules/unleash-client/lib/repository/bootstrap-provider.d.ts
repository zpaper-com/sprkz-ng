import { ClientFeaturesResponse, FeatureInterface } from '../feature';
import { CustomHeaders } from '../headers';
import { Segment } from '../strategy/strategy';
export interface BootstrapProvider {
    readBootstrap(): Promise<ClientFeaturesResponse | undefined>;
}
export interface BootstrapOptions {
    url?: string;
    urlHeaders?: CustomHeaders;
    filePath?: string;
    data?: FeatureInterface[];
    segments?: Segment[];
    bootstrapProvider?: BootstrapProvider;
}
export declare class DefaultBootstrapProvider implements BootstrapProvider {
    private url?;
    private urlHeaders?;
    private filePath?;
    private data?;
    private segments?;
    private appName;
    private instanceId;
    constructor(options: BootstrapOptions, appName: string, instanceId: string);
    private loadFromUrl;
    private loadFromFile;
    readBootstrap(): Promise<ClientFeaturesResponse | undefined>;
}
export declare function resolveBootstrapProvider(options: BootstrapOptions, appName: string, instanceId: string): BootstrapProvider;
//# sourceMappingURL=bootstrap-provider.d.ts.map