{"ast":null,"code":"import { debug } from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build.js';\n\n/**\n * Serializes FormData.\n *\n * This is a bit simplified, but gives us a decent estimate.\n * This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'.\n *\n */\nfunction serializeFormData(formData) {\n  // @ts-expect-error passing FormData to URLSearchParams actually works\n  return new URLSearchParams(formData).toString();\n}\n\n/** Get the string representation of a body. */\nfunction getBodyString(body, _debug = debug) {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n    if (body instanceof URLSearchParams) {\n      return [body.toString()];\n    }\n    if (body instanceof FormData) {\n      return [serializeFormData(body)];\n    }\n    if (!body) {\n      return [undefined];\n    }\n  } catch (error) {\n    DEBUG_BUILD && _debug.error(error, 'Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n  DEBUG_BUILD && _debug.log('Skipping network body because of body type', body);\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\n/**\n * Parses the fetch arguments to extract the request payload.\n *\n * We only support getting the body from the fetch options.\n */\nfunction getFetchRequestArgBody(fetchArgs = []) {\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n  return fetchArgs[1].body;\n}\nexport { getBodyString, getFetchRequestArgBody, serializeFormData };","map":{"version":3,"names":["serializeFormData","formData","URLSearchParams","toString","getBodyString","body","_debug","debug","FormData","undefined","error","DEBUG_BUILD","log","getFetchRequestArgBody","fetchArgs","length"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry-internal/browser-utils/src/networkUtils.ts"],"sourcesContent":["import { debug } from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { NetworkMetaWarning } from './types';\n\n/**\n * Serializes FormData.\n *\n * This is a bit simplified, but gives us a decent estimate.\n * This converts e.g. { name: 'Anne Smith', age: 13 } to 'name=Anne+Smith&age=13'.\n *\n */\nexport function serializeFormData(formData: FormData): string {\n  // @ts-expect-error passing FormData to URLSearchParams actually works\n  return new URLSearchParams(formData).toString();\n}\n\n/** Get the string representation of a body. */\nexport function getBodyString(body: unknown, _debug: typeof debug = debug): [string | undefined, NetworkMetaWarning?] {\n  try {\n    if (typeof body === 'string') {\n      return [body];\n    }\n\n    if (body instanceof URLSearchParams) {\n      return [body.toString()];\n    }\n\n    if (body instanceof FormData) {\n      return [serializeFormData(body)];\n    }\n\n    if (!body) {\n      return [undefined];\n    }\n  } catch (error) {\n    DEBUG_BUILD && _debug.error(error, 'Failed to serialize body', body);\n    return [undefined, 'BODY_PARSE_ERROR'];\n  }\n\n  DEBUG_BUILD && _debug.log('Skipping network body because of body type', body);\n\n  return [undefined, 'UNPARSEABLE_BODY_TYPE'];\n}\n\n/**\n * Parses the fetch arguments to extract the request payload.\n *\n * We only support getting the body from the fetch options.\n */\nexport function getFetchRequestArgBody(fetchArgs: unknown[] = []): RequestInit['body'] | undefined {\n  if (fetchArgs.length !== 2 || typeof fetchArgs[1] !== 'object') {\n    return undefined;\n  }\n\n  return (fetchArgs[1] as RequestInit).body;\n}\n"],"mappings":";;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,iBAAiBA,CAACC,QAAQ,EAAoB;EAC9D;EACE,OAAO,IAAIC,eAAe,CAACD,QAAQ,CAAC,CAACE,QAAQ,EAAE;AACjD;;AAEA;AACO,SAASC,aAAaA,CAACC,IAAI,EAAWC,MAAM,GAAiBC,KAAK,EAA6C;EACpH,IAAI;IACF,IAAI,OAAOF,IAAA,KAAS,QAAQ,EAAE;MAC5B,OAAO,CAACA,IAAI,CAAC;IACnB;IAEI,IAAIA,IAAA,YAAgBH,eAAe,EAAE;MACnC,OAAO,CAACG,IAAI,CAACF,QAAQ,EAAE,CAAC;IAC9B;IAEI,IAAIE,IAAA,YAAgBG,QAAQ,EAAE;MAC5B,OAAO,CAACR,iBAAiB,CAACK,IAAI,CAAC,CAAC;IACtC;IAEI,IAAI,CAACA,IAAI,EAAE;MACT,OAAO,CAACI,SAAS,CAAC;IACxB;EACA,CAAE,CAAE,OAAOC,KAAK,EAAE;IACdC,WAAA,IAAeL,MAAM,CAACI,KAAK,CAACA,KAAK,EAAE,0BAA0B,EAAEL,IAAI,CAAC;IACpE,OAAO,CAACI,SAAS,EAAE,kBAAkB,CAAC;EAC1C;EAEEE,WAAA,IAAeL,MAAM,CAACM,GAAG,CAAC,4CAA4C,EAAEP,IAAI,CAAC;EAE7E,OAAO,CAACI,SAAS,EAAE,uBAAuB,CAAC;AAC7C;;AAEA;AACA;AACA;AACA;AACA;AACO,SAASI,sBAAsBA,CAACC,SAAS,GAAc,EAAE,EAAmC;EACjG,IAAIA,SAAS,CAACC,MAAA,KAAW,KAAK,OAAOD,SAAS,CAAC,CAAC,MAAM,QAAQ,EAAE;IAC9D,OAAOL,SAAS;EACpB;EAEE,OAAQK,SAAS,CAAC,CAAC,EAAkBT,IAAI;AAC3C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}