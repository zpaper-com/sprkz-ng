{"ast":null,"code":"import { OPENAI_OPERATIONS } from '../gen-ai-attributes.js';\nimport { INSTRUMENTED_METHODS } from './constants.js';\n\n/**\n * Maps OpenAI method paths to Sentry operation names\n */\nfunction getOperationName(methodPath) {\n  if (methodPath.includes('chat.completions')) {\n    return OPENAI_OPERATIONS.CHAT;\n  }\n  if (methodPath.includes('responses')) {\n    // The responses API is also a chat operation\n    return OPENAI_OPERATIONS.CHAT;\n  }\n  return methodPath.split('.').pop() || 'unknown';\n}\n\n/**\n * Get the span operation for OpenAI methods\n * Following Sentry's convention: \"gen_ai.{operation_name}\"\n */\nfunction getSpanOperation(methodPath) {\n  return `gen_ai.${getOperationName(methodPath)}`;\n}\n\n/**\n * Check if a method path should be instrumented\n */\nfunction shouldInstrument(methodPath) {\n  return INSTRUMENTED_METHODS.includes(methodPath);\n}\n\n/**\n * Build method path from current traversal\n */\nfunction buildMethodPath(currentPath, prop) {\n  return currentPath ? `${currentPath}.${prop}` : prop;\n}\n\n/**\n * Check if response is a Chat Completion object\n */\nfunction isChatCompletionResponse(response) {\n  return response !== null && typeof response === 'object' && 'object' in response && response.object === 'chat.completion';\n}\n\n/**\n * Check if response is a Responses API object\n */\nfunction isResponsesApiResponse(response) {\n  return response !== null && typeof response === 'object' && 'object' in response && response.object === 'response';\n}\nexport { buildMethodPath, getOperationName, getSpanOperation, isChatCompletionResponse, isResponsesApiResponse, shouldInstrument };\n//# sourceMappingURL=utils.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}