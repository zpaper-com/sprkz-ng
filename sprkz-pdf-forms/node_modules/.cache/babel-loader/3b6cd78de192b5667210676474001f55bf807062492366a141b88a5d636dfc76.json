{"ast":null,"code":"var _UnleashService;\nimport { UnleashClient } from '@unleash/proxy-client-react';\n\n// Unleash configuration\n\n// Default configuration\nconst DEFAULT_CONFIG = {\n  url: process.env.REACT_APP_UNLEASH_PROXY_URL || '',\n  clientKey: process.env.REACT_APP_UNLEASH_CLIENT_KEY || '',\n  refreshInterval: 15,\n  // seconds\n  appName: 'sprkz-pdf-forms',\n  environment: process.env.NODE_ENV || 'development'\n};\n\n// Feature flag definitions with types\n\n// Default feature flag values (fallbacks when Unleash is unavailable)\nexport const DEFAULT_FEATURE_FLAGS = {\n  // Core features - enabled by default for MVP\n  ENHANCED_WIZARD_MODE: true,\n  PROGRESSIVE_FORM_FILLING: true,\n  SMART_FIELD_DETECTION: true,\n  // Signature features - all enabled\n  SIGNATURE_DRAWING_MODE: true,\n  SIGNATURE_TYPED_MODE: true,\n  SIGNATURE_UPLOAD_MODE: false,\n  // Not yet implemented\n  MULTI_SIGNATURE_SUPPORT: true,\n  // PDF processing - basic features enabled\n  ADVANCED_PDF_VALIDATION: true,\n  PDF_FIELD_AUTOCOMPLETE: false,\n  // Future feature\n  PDF_PREVIEW_MODE: true,\n  BULK_PDF_PROCESSING: false,\n  // Future feature\n\n  // UI/UX features\n  DARK_MODE_SUPPORT: false,\n  // Future feature\n  ACCESSIBILITY_ENHANCEMENTS: true,\n  MOBILE_OPTIMIZATIONS: true,\n  ANIMATION_EFFECTS: true,\n  // Performance features\n  PDF_LAZY_LOADING: true,\n  FORM_STATE_PERSISTENCE: true,\n  OFFLINE_MODE_SUPPORT: false,\n  // Future feature\n\n  // Validation and security\n  ENHANCED_FIELD_VALIDATION: true,\n  SECURITY_AUDIT_LOGGING: false,\n  // Production only\n  DATA_ENCRYPTION: false,\n  // Future feature\n\n  // Analytics and monitoring\n  USAGE_ANALYTICS: process.env.NODE_ENV === 'production',\n  ERROR_REPORTING: true,\n  // Sentry integration\n  PERFORMANCE_MONITORING: true\n};\n\n// Feature flag categories for organization\nexport const FEATURE_CATEGORIES = {\n  CORE: ['ENHANCED_WIZARD_MODE', 'PROGRESSIVE_FORM_FILLING', 'SMART_FIELD_DETECTION'],\n  SIGNATURE: ['SIGNATURE_DRAWING_MODE', 'SIGNATURE_TYPED_MODE', 'SIGNATURE_UPLOAD_MODE', 'MULTI_SIGNATURE_SUPPORT'],\n  PDF: ['ADVANCED_PDF_VALIDATION', 'PDF_FIELD_AUTOCOMPLETE', 'PDF_PREVIEW_MODE', 'BULK_PDF_PROCESSING'],\n  UI_UX: ['DARK_MODE_SUPPORT', 'ACCESSIBILITY_ENHANCEMENTS', 'MOBILE_OPTIMIZATIONS', 'ANIMATION_EFFECTS'],\n  PERFORMANCE: ['PDF_LAZY_LOADING', 'FORM_STATE_PERSISTENCE', 'OFFLINE_MODE_SUPPORT'],\n  SECURITY: ['ENHANCED_FIELD_VALIDATION', 'SECURITY_AUDIT_LOGGING', 'DATA_ENCRYPTION'],\n  MONITORING: ['USAGE_ANALYTICS', 'ERROR_REPORTING', 'PERFORMANCE_MONITORING']\n};\n\n// Unleash service class\nexport class UnleashService {\n  constructor(config) {\n    this.client = null;\n    this.config = void 0;\n    this.isInitialized = false;\n    this.listeners = new Set();\n    this.config = {\n      ...DEFAULT_CONFIG,\n      ...config\n    };\n  }\n  static getInstance(config) {\n    if (!UnleashService.instance) {\n      UnleashService.instance = new UnleashService(config);\n    }\n    return UnleashService.instance;\n  }\n\n  // Initialize the Unleash client\n  async initialize(context) {\n    if (this.isInitialized) {\n      return;\n    }\n\n    // Skip initialization if no URL or client key is provided\n    if (!this.config.url || !this.config.clientKey) {\n      console.log('Unleash not configured - using fallback flags');\n      this.isInitialized = true;\n      this.notifyListeners();\n      return;\n    }\n    try {\n      // Create Unleash client\n      this.client = new UnleashClient({\n        url: this.config.url,\n        clientKey: this.config.clientKey,\n        refreshInterval: this.config.refreshInterval,\n        appName: this.config.appName,\n        environment: this.config.environment,\n        context: {\n          userId: this.config.userId || this.generateUserId(),\n          sessionId: this.config.sessionId || this.generateSessionId(),\n          ...context\n        }\n      });\n\n      // Start the client\n      this.client.start();\n\n      // Wait for initial fetch\n      await this.client.on('ready', () => {\n        console.log('Unleash client initialized successfully');\n        this.isInitialized = true;\n        this.notifyListeners();\n      });\n\n      // Handle errors\n      this.client.on('error', error => {\n        console.error('Unleash client error:', error);\n        // Continue with default flags on error\n        this.isInitialized = true;\n      });\n\n      // Handle updates\n      this.client.on('update', () => {\n        console.log('Feature flags updated');\n        this.notifyListeners();\n      });\n    } catch (error) {\n      console.error('Failed to initialize Unleash:', error);\n      // Continue with default flags\n      this.isInitialized = true;\n    }\n  }\n\n  // Check if a feature flag is enabled\n  isEnabled(flagName, context) {\n    if (!this.client || !this.isInitialized) {\n      return DEFAULT_FEATURE_FLAGS[flagName];\n    }\n    try {\n      return this.client.isEnabled(flagName, context);\n    } catch (error) {\n      console.warn(`Failed to check feature flag ${flagName}:`, error);\n      return DEFAULT_FEATURE_FLAGS[flagName];\n    }\n  }\n\n  // Get variant for a feature flag\n  getVariant(flagName, context) {\n    if (!this.client || !this.isInitialized) {\n      return null;\n    }\n    try {\n      return this.client.getVariant(flagName, context);\n    } catch (error) {\n      console.warn(`Failed to get variant for ${flagName}:`, error);\n      return null;\n    }\n  }\n\n  // Get all feature flags as an object\n  getAllFlags(context) {\n    const flags = {};\n    for (const flagName of Object.keys(DEFAULT_FEATURE_FLAGS)) {\n      flags[flagName] = this.isEnabled(flagName, context);\n    }\n    return flags;\n  }\n\n  // Subscribe to flag changes\n  subscribe(listener) {\n    this.listeners.add(listener);\n\n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  // Update context (useful for user-specific flags)\n  updateContext(context) {\n    if (this.client) {\n      this.client.updateContext(context);\n    }\n  }\n\n  // Get feature flags by category\n  getFlagsByCategory(category, context) {\n    const categoryFlags = FEATURE_CATEGORIES[category];\n    const flags = {};\n    for (const flagName of categoryFlags) {\n      flags[flagName] = this.isEnabled(flagName, context);\n    }\n    return flags;\n  }\n\n  // Utility methods for debugging\n  getStatus() {\n    return {\n      initialized: this.isInitialized,\n      clientReady: !!this.client,\n      flagCount: Object.keys(DEFAULT_FEATURE_FLAGS).length\n    };\n  }\n\n  // Generate unique user ID for session\n  generateUserId() {\n    return `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Generate session ID\n  generateSessionId() {\n    return `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Notify all listeners of changes\n  notifyListeners() {\n    this.listeners.forEach(listener => {\n      try {\n        listener();\n      } catch (error) {\n        console.error('Error in feature flag listener:', error);\n      }\n    });\n  }\n\n  // Clean up resources\n  destroy() {\n    if (this.client) {\n      this.client.stop();\n      this.client = null;\n    }\n    this.listeners.clear();\n    this.isInitialized = false;\n  }\n}\n\n// Singleton instance\n_UnleashService = UnleashService;\nUnleashService.instance = void 0;\nexport const unleashService = UnleashService.getInstance();\n\n// Utility function to check individual flags (for convenience)\nexport const isFeatureEnabled = (flagName, context) => {\n  return unleashService.isEnabled(flagName, context);\n};\n\n// Utility function to get feature variant\nexport const getFeatureVariant = (flagName, context) => {\n  return unleashService.getVariant(flagName, context);\n};\nexport default UnleashService;","map":{"version":3,"names":["UnleashClient","DEFAULT_CONFIG","url","process","env","REACT_APP_UNLEASH_PROXY_URL","clientKey","REACT_APP_UNLEASH_CLIENT_KEY","refreshInterval","appName","environment","NODE_ENV","DEFAULT_FEATURE_FLAGS","ENHANCED_WIZARD_MODE","PROGRESSIVE_FORM_FILLING","SMART_FIELD_DETECTION","SIGNATURE_DRAWING_MODE","SIGNATURE_TYPED_MODE","SIGNATURE_UPLOAD_MODE","MULTI_SIGNATURE_SUPPORT","ADVANCED_PDF_VALIDATION","PDF_FIELD_AUTOCOMPLETE","PDF_PREVIEW_MODE","BULK_PDF_PROCESSING","DARK_MODE_SUPPORT","ACCESSIBILITY_ENHANCEMENTS","MOBILE_OPTIMIZATIONS","ANIMATION_EFFECTS","PDF_LAZY_LOADING","FORM_STATE_PERSISTENCE","OFFLINE_MODE_SUPPORT","ENHANCED_FIELD_VALIDATION","SECURITY_AUDIT_LOGGING","DATA_ENCRYPTION","USAGE_ANALYTICS","ERROR_REPORTING","PERFORMANCE_MONITORING","FEATURE_CATEGORIES","CORE","SIGNATURE","PDF","UI_UX","PERFORMANCE","SECURITY","MONITORING","UnleashService","constructor","config","client","isInitialized","listeners","Set","getInstance","instance","initialize","context","console","log","notifyListeners","userId","generateUserId","sessionId","generateSessionId","start","on","error","isEnabled","flagName","warn","getVariant","getAllFlags","flags","Object","keys","subscribe","listener","add","delete","updateContext","getFlagsByCategory","category","categoryFlags","getStatus","initialized","clientReady","flagCount","length","Date","now","Math","random","toString","substr","forEach","destroy","stop","clear","_UnleashService","unleashService","isFeatureEnabled","getFeatureVariant"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/src/services/unleashService.ts"],"sourcesContent":["import { UnleashClient } from '@unleash/proxy-client-react';\n\n// Unleash configuration\nexport interface UnleashConfig {\n  url: string;\n  clientKey: string;\n  refreshInterval?: number;\n  appName?: string;\n  environment?: string;\n  userId?: string;\n  sessionId?: string;\n}\n\n// Default configuration\nconst DEFAULT_CONFIG: UnleashConfig = {\n  url: process.env.REACT_APP_UNLEASH_PROXY_URL || '',\n  clientKey: process.env.REACT_APP_UNLEASH_CLIENT_KEY || '',\n  refreshInterval: 15, // seconds\n  appName: 'sprkz-pdf-forms',\n  environment: process.env.NODE_ENV || 'development'\n};\n\n// Feature flag definitions with types\nexport interface FeatureFlags {\n  // Core application features\n  ENHANCED_WIZARD_MODE: boolean;\n  PROGRESSIVE_FORM_FILLING: boolean;\n  SMART_FIELD_DETECTION: boolean;\n  \n  // Signature features\n  SIGNATURE_DRAWING_MODE: boolean;\n  SIGNATURE_TYPED_MODE: boolean;\n  SIGNATURE_UPLOAD_MODE: boolean;\n  MULTI_SIGNATURE_SUPPORT: boolean;\n  \n  // PDF processing features\n  ADVANCED_PDF_VALIDATION: boolean;\n  PDF_FIELD_AUTOCOMPLETE: boolean;\n  PDF_PREVIEW_MODE: boolean;\n  BULK_PDF_PROCESSING: boolean;\n  \n  // UI/UX features\n  DARK_MODE_SUPPORT: boolean;\n  ACCESSIBILITY_ENHANCEMENTS: boolean;\n  MOBILE_OPTIMIZATIONS: boolean;\n  ANIMATION_EFFECTS: boolean;\n  \n  // Performance features\n  PDF_LAZY_LOADING: boolean;\n  FORM_STATE_PERSISTENCE: boolean;\n  OFFLINE_MODE_SUPPORT: boolean;\n  \n  // Validation and security\n  ENHANCED_FIELD_VALIDATION: boolean;\n  SECURITY_AUDIT_LOGGING: boolean;\n  DATA_ENCRYPTION: boolean;\n  \n  // Analytics and monitoring\n  USAGE_ANALYTICS: boolean;\n  ERROR_REPORTING: boolean;\n  PERFORMANCE_MONITORING: boolean;\n}\n\n// Default feature flag values (fallbacks when Unleash is unavailable)\nexport const DEFAULT_FEATURE_FLAGS: FeatureFlags = {\n  // Core features - enabled by default for MVP\n  ENHANCED_WIZARD_MODE: true,\n  PROGRESSIVE_FORM_FILLING: true,\n  SMART_FIELD_DETECTION: true,\n  \n  // Signature features - all enabled\n  SIGNATURE_DRAWING_MODE: true,\n  SIGNATURE_TYPED_MODE: true,\n  SIGNATURE_UPLOAD_MODE: false, // Not yet implemented\n  MULTI_SIGNATURE_SUPPORT: true,\n  \n  // PDF processing - basic features enabled\n  ADVANCED_PDF_VALIDATION: true,\n  PDF_FIELD_AUTOCOMPLETE: false, // Future feature\n  PDF_PREVIEW_MODE: true,\n  BULK_PDF_PROCESSING: false, // Future feature\n  \n  // UI/UX features\n  DARK_MODE_SUPPORT: false, // Future feature\n  ACCESSIBILITY_ENHANCEMENTS: true,\n  MOBILE_OPTIMIZATIONS: true,\n  ANIMATION_EFFECTS: true,\n  \n  // Performance features\n  PDF_LAZY_LOADING: true,\n  FORM_STATE_PERSISTENCE: true,\n  OFFLINE_MODE_SUPPORT: false, // Future feature\n  \n  // Validation and security\n  ENHANCED_FIELD_VALIDATION: true,\n  SECURITY_AUDIT_LOGGING: false, // Production only\n  DATA_ENCRYPTION: false, // Future feature\n  \n  // Analytics and monitoring\n  USAGE_ANALYTICS: process.env.NODE_ENV === 'production',\n  ERROR_REPORTING: true, // Sentry integration\n  PERFORMANCE_MONITORING: true\n};\n\n// Feature flag categories for organization\nexport const FEATURE_CATEGORIES = {\n  CORE: ['ENHANCED_WIZARD_MODE', 'PROGRESSIVE_FORM_FILLING', 'SMART_FIELD_DETECTION'],\n  SIGNATURE: ['SIGNATURE_DRAWING_MODE', 'SIGNATURE_TYPED_MODE', 'SIGNATURE_UPLOAD_MODE', 'MULTI_SIGNATURE_SUPPORT'],\n  PDF: ['ADVANCED_PDF_VALIDATION', 'PDF_FIELD_AUTOCOMPLETE', 'PDF_PREVIEW_MODE', 'BULK_PDF_PROCESSING'],\n  UI_UX: ['DARK_MODE_SUPPORT', 'ACCESSIBILITY_ENHANCEMENTS', 'MOBILE_OPTIMIZATIONS', 'ANIMATION_EFFECTS'],\n  PERFORMANCE: ['PDF_LAZY_LOADING', 'FORM_STATE_PERSISTENCE', 'OFFLINE_MODE_SUPPORT'],\n  SECURITY: ['ENHANCED_FIELD_VALIDATION', 'SECURITY_AUDIT_LOGGING', 'DATA_ENCRYPTION'],\n  MONITORING: ['USAGE_ANALYTICS', 'ERROR_REPORTING', 'PERFORMANCE_MONITORING']\n};\n\n// Unleash service class\nexport class UnleashService {\n  private static instance: UnleashService;\n  private client: UnleashClient | null = null;\n  private config: UnleashConfig;\n  private isInitialized = false;\n  private listeners: Set<() => void> = new Set();\n\n  private constructor(config?: Partial<UnleashConfig>) {\n    this.config = { ...DEFAULT_CONFIG, ...config };\n  }\n\n  static getInstance(config?: Partial<UnleashConfig>): UnleashService {\n    if (!UnleashService.instance) {\n      UnleashService.instance = new UnleashService(config);\n    }\n    return UnleashService.instance;\n  }\n\n  // Initialize the Unleash client\n  async initialize(context?: Record<string, string>): Promise<void> {\n    if (this.isInitialized) {\n      return;\n    }\n\n    // Skip initialization if no URL or client key is provided\n    if (!this.config.url || !this.config.clientKey) {\n      console.log('Unleash not configured - using fallback flags');\n      this.isInitialized = true;\n      this.notifyListeners();\n      return;\n    }\n\n    try {\n      // Create Unleash client\n      this.client = new UnleashClient({\n        url: this.config.url,\n        clientKey: this.config.clientKey,\n        refreshInterval: this.config.refreshInterval,\n        appName: this.config.appName,\n        environment: this.config.environment,\n        context: {\n          userId: this.config.userId || this.generateUserId(),\n          sessionId: this.config.sessionId || this.generateSessionId(),\n          ...context\n        }\n      });\n\n      // Start the client\n      this.client.start();\n\n      // Wait for initial fetch\n      await this.client.on('ready', () => {\n        console.log('Unleash client initialized successfully');\n        this.isInitialized = true;\n        this.notifyListeners();\n      });\n\n      // Handle errors\n      this.client.on('error', (error) => {\n        console.error('Unleash client error:', error);\n        // Continue with default flags on error\n        this.isInitialized = true;\n      });\n\n      // Handle updates\n      this.client.on('update', () => {\n        console.log('Feature flags updated');\n        this.notifyListeners();\n      });\n\n    } catch (error) {\n      console.error('Failed to initialize Unleash:', error);\n      // Continue with default flags\n      this.isInitialized = true;\n    }\n  }\n\n  // Check if a feature flag is enabled\n  isEnabled(flagName: keyof FeatureFlags, context?: Record<string, string>): boolean {\n    if (!this.client || !this.isInitialized) {\n      return DEFAULT_FEATURE_FLAGS[flagName];\n    }\n\n    try {\n      return this.client.isEnabled(flagName, context);\n    } catch (error) {\n      console.warn(`Failed to check feature flag ${flagName}:`, error);\n      return DEFAULT_FEATURE_FLAGS[flagName];\n    }\n  }\n\n  // Get variant for a feature flag\n  getVariant(flagName: keyof FeatureFlags, context?: Record<string, string>): any {\n    if (!this.client || !this.isInitialized) {\n      return null;\n    }\n\n    try {\n      return this.client.getVariant(flagName, context);\n    } catch (error) {\n      console.warn(`Failed to get variant for ${flagName}:`, error);\n      return null;\n    }\n  }\n\n  // Get all feature flags as an object\n  getAllFlags(context?: Record<string, string>): FeatureFlags {\n    const flags = {} as FeatureFlags;\n    \n    for (const flagName of Object.keys(DEFAULT_FEATURE_FLAGS) as Array<keyof FeatureFlags>) {\n      flags[flagName] = this.isEnabled(flagName, context);\n    }\n\n    return flags;\n  }\n\n  // Subscribe to flag changes\n  subscribe(listener: () => void): () => void {\n    this.listeners.add(listener);\n    \n    // Return unsubscribe function\n    return () => {\n      this.listeners.delete(listener);\n    };\n  }\n\n  // Update context (useful for user-specific flags)\n  updateContext(context: Record<string, string>): void {\n    if (this.client) {\n      this.client.updateContext(context);\n    }\n  }\n\n  // Get feature flags by category\n  getFlagsByCategory(category: keyof typeof FEATURE_CATEGORIES, context?: Record<string, string>): Partial<FeatureFlags> {\n    const categoryFlags = FEATURE_CATEGORIES[category];\n    const flags = {} as Partial<FeatureFlags>;\n\n    for (const flagName of categoryFlags as Array<keyof FeatureFlags>) {\n      flags[flagName] = this.isEnabled(flagName, context);\n    }\n\n    return flags;\n  }\n\n  // Utility methods for debugging\n  getStatus(): { initialized: boolean; clientReady: boolean; flagCount: number } {\n    return {\n      initialized: this.isInitialized,\n      clientReady: !!this.client,\n      flagCount: Object.keys(DEFAULT_FEATURE_FLAGS).length\n    };\n  }\n\n  // Generate unique user ID for session\n  private generateUserId(): string {\n    return `user-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Generate session ID\n  private generateSessionId(): string {\n    return `session-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  // Notify all listeners of changes\n  private notifyListeners(): void {\n    this.listeners.forEach(listener => {\n      try {\n        listener();\n      } catch (error) {\n        console.error('Error in feature flag listener:', error);\n      }\n    });\n  }\n\n  // Clean up resources\n  destroy(): void {\n    if (this.client) {\n      this.client.stop();\n      this.client = null;\n    }\n    this.listeners.clear();\n    this.isInitialized = false;\n  }\n}\n\n// Singleton instance\nexport const unleashService = UnleashService.getInstance();\n\n// Utility function to check individual flags (for convenience)\nexport const isFeatureEnabled = (flagName: keyof FeatureFlags, context?: Record<string, string>): boolean => {\n  return unleashService.isEnabled(flagName, context);\n};\n\n// Utility function to get feature variant\nexport const getFeatureVariant = (flagName: keyof FeatureFlags, context?: Record<string, string>): any => {\n  return unleashService.getVariant(flagName, context);\n};\n\nexport default UnleashService;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}