{"ast":null,"code":"import { DEBUG_BUILD } from '../debug-build.js';\nimport { addGlobalErrorInstrumentationHandler } from '../instrument/globalError.js';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from '../instrument/globalUnhandledRejection.js';\nimport { debug } from '../utils/debug-logger.js';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils.js';\nimport { SPAN_STATUS_ERROR } from './spanstatus.js';\nlet errorsInstrumented = false;\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nfunction registerSpanErrorInstrumentation() {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  /**\n   * If an error or unhandled promise occurs, we mark the active root span as failed\n   */\n  function errorCallback() {\n    const activeSpan = getActiveSpan();\n    const rootSpan = activeSpan && getRootSpan(activeSpan);\n    if (rootSpan) {\n      const message = 'internal_error';\n      DEBUG_BUILD && debug.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n      rootSpan.setStatus({\n        code: SPAN_STATUS_ERROR,\n        message\n      });\n    }\n  }\n\n  // The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n  // node.js default exit behaviour\n  errorCallback.tag = 'sentry_tracingErrorCallback';\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\nexport { registerSpanErrorInstrumentation };","map":{"version":3,"names":["errorsInstrumented","registerSpanErrorInstrumentation","errorCallback","activeSpan","getActiveSpan","rootSpan","getRootSpan","message","DEBUG_BUILD","debug","log","setStatus","code","SPAN_STATUS_ERROR","tag","addGlobalErrorInstrumentationHandler","addGlobalUnhandledRejectionInstrumentationHandler"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/tracing/errors.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { addGlobalErrorInstrumentationHandler } from '../instrument/globalError';\nimport { addGlobalUnhandledRejectionInstrumentationHandler } from '../instrument/globalUnhandledRejection';\nimport { debug } from '../utils/debug-logger';\nimport { getActiveSpan, getRootSpan } from '../utils/spanUtils';\nimport { SPAN_STATUS_ERROR } from './spanstatus';\n\nlet errorsInstrumented = false;\n\n/**  Only exposed for testing */\nexport function _resetErrorsInstrumented(): void {\n  errorsInstrumented = false;\n}\n\n/**\n * Ensure that global errors automatically set the active span status.\n */\nexport function registerSpanErrorInstrumentation(): void {\n  if (errorsInstrumented) {\n    return;\n  }\n\n  /**\n   * If an error or unhandled promise occurs, we mark the active root span as failed\n   */\n  function errorCallback(): void {\n    const activeSpan = getActiveSpan();\n    const rootSpan = activeSpan && getRootSpan(activeSpan);\n    if (rootSpan) {\n      const message = 'internal_error';\n      DEBUG_BUILD && debug.log(`[Tracing] Root span: ${message} -> Global error occurred`);\n      rootSpan.setStatus({ code: SPAN_STATUS_ERROR, message });\n    }\n  }\n\n  // The function name will be lost when bundling but we need to be able to identify this listener later to maintain the\n  // node.js default exit behaviour\n  errorCallback.tag = 'sentry_tracingErrorCallback';\n\n  errorsInstrumented = true;\n  addGlobalErrorInstrumentationHandler(errorCallback);\n  addGlobalUnhandledRejectionInstrumentationHandler(errorCallback);\n}\n"],"mappings":";;;;;;AAOA,IAAIA,kBAAA,GAAqB,KAAK;;AAO9B;AACA;AACA;AACO,SAASC,gCAAgCA,CAAA,EAAS;EACvD,IAAID,kBAAkB,EAAE;IACtB;EACJ;;EAEA;AACA;AACA;EACE,SAASE,aAAaA,CAAA,EAAS;IAC7B,MAAMC,UAAA,GAAaC,aAAa,EAAE;IAClC,MAAMC,QAAA,GAAWF,UAAA,IAAcG,WAAW,CAACH,UAAU,CAAC;IACtD,IAAIE,QAAQ,EAAE;MACZ,MAAME,OAAA,GAAU,gBAAgB;MAChCC,WAAA,IAAeC,KAAK,CAACC,GAAG,CAAC,wBAAwBH,OAAO,2BAA2B,CAAC;MACpFF,QAAQ,CAACM,SAAS,CAAC;QAAEC,IAAI,EAAEC,iBAAiB;QAAEN;MAAA,CAAS,CAAC;IAC9D;EACA;;EAEA;EACA;EACEL,aAAa,CAACY,GAAA,GAAM,6BAA6B;EAEjDd,kBAAA,GAAqB,IAAI;EACzBe,oCAAoC,CAACb,aAAa,CAAC;EACnDc,iDAAiD,CAACd,aAAa,CAAC;AAClE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}