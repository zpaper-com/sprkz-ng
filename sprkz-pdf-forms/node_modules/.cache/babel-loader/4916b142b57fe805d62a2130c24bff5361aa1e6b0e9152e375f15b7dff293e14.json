{"ast":null,"code":"import { GLOBAL_OBJ } from './worldwide.js';\n\n/**\n * Function that delays closing of a Vercel lambda until the provided promise is resolved.\n *\n * Vendored from https://www.npmjs.com/package/@vercel/functions\n */\nfunction vercelWaitUntil(task) {\n  const vercelRequestContextGlobal =\n  // @ts-expect-error This is not typed\n  GLOBAL_OBJ[Symbol.for('@vercel/request-context')];\n  const ctx = vercelRequestContextGlobal?.get?.();\n  if (ctx?.waitUntil) {\n    ctx.waitUntil(task);\n  }\n}\nexport { vercelWaitUntil };","map":{"version":3,"names":["vercelWaitUntil","task","vercelRequestContextGlobal","GLOBAL_OBJ","Symbol","for","ctx","get","waitUntil"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/vercelWaitUntil.ts"],"sourcesContent":["import { GLOBAL_OBJ } from './worldwide';\n\ninterface VercelRequestContextGlobal {\n  get?():\n    | {\n        waitUntil?: (task: Promise<unknown>) => void;\n      }\n    | undefined;\n}\n\n/**\n * Function that delays closing of a Vercel lambda until the provided promise is resolved.\n *\n * Vendored from https://www.npmjs.com/package/@vercel/functions\n */\nexport function vercelWaitUntil(task: Promise<unknown>): void {\n  const vercelRequestContextGlobal: VercelRequestContextGlobal | undefined =\n    // @ts-expect-error This is not typed\n    GLOBAL_OBJ[Symbol.for('@vercel/request-context')];\n\n  const ctx = vercelRequestContextGlobal?.get?.();\n\n  if (ctx?.waitUntil) {\n    ctx.waitUntil(task);\n  }\n}\n"],"mappings":";;AAUA;AACA;AACA;AACA;AACA;AACO,SAASA,eAAeA,CAACC,IAAI,EAA0B;EAC5D,MAAMC,0BAA0B;EAClC;EACIC,UAAU,CAACC,MAAM,CAACC,GAAG,CAAC,yBAAyB,CAAC,CAAC;EAEnD,MAAMC,GAAA,GAAMJ,0BAA0B,EAAEK,GAAG,IAAI;EAE/C,IAAID,GAAG,EAAEE,SAAS,EAAE;IAClBF,GAAG,CAACE,SAAS,CAACP,IAAI,CAAC;EACvB;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}