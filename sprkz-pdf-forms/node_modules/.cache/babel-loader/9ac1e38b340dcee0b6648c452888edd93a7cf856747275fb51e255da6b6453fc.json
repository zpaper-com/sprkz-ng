{"ast":null,"code":"import * as Sentry from '@sentry/react';\n\n// Sentry configuration for error tracking and performance monitoring\nexport const initSentry = () => {\n  // Only initialize in production or when explicitly enabled\n  const isDevelopment = process.env.NODE_ENV === 'development';\n  const sentryDsn = process.env.REACT_APP_SENTRY_DSN;\n  const enableInDev = process.env.REACT_APP_SENTRY_ENABLE_DEV === 'true';\n  if (!sentryDsn || isDevelopment && !enableInDev) {\n    console.log('Sentry not initialized:', {\n      hasDsn: !!sentryDsn,\n      isDevelopment,\n      enableInDev\n    });\n    return;\n  }\n  Sentry.init({\n    dsn: sentryDsn,\n    environment: process.env.REACT_APP_SENTRY_ENVIRONMENT || process.env.NODE_ENV,\n    release: process.env.REACT_APP_VERSION || 'development',\n    // Performance Monitoring\n    integrations: [Sentry.browserTracingIntegration({\n      // Capture interactions and navigation\n      tracePropagationTargets: [window.location.hostname, /^https:\\/\\/api\\.sprkz\\.com/, /^https:\\/\\/unleash\\./]\n    })],\n    // Performance sampling\n    tracesSampleRate: isDevelopment ? 1.0 : 0.1,\n    // Error sampling\n    sampleRate: 1.0,\n    // Session sampling\n    replaysSessionSampleRate: isDevelopment ? 1.0 : 0.1,\n    replaysOnErrorSampleRate: 1.0,\n    // Additional configuration\n    beforeSend(event, hint) {\n      // Filter out development errors we don't want to track\n      if (isDevelopment) {\n        const error = hint.originalException;\n\n        // Filter out React warnings in development\n        if (error && error instanceof Error) {\n          if (error.message.includes('Warning:')) {\n            return null;\n          }\n        }\n      }\n\n      // Filter out network errors for external resources\n      if (event.exception) {\n        var _event$exception$valu, _exception$value, _exception$value2;\n        const exception = (_event$exception$valu = event.exception.values) === null || _event$exception$valu === void 0 ? void 0 : _event$exception$valu[0];\n        if (exception !== null && exception !== void 0 && (_exception$value = exception.value) !== null && _exception$value !== void 0 && _exception$value.includes('NetworkError') || exception !== null && exception !== void 0 && (_exception$value2 = exception.value) !== null && _exception$value2 !== void 0 && _exception$value2.includes('Failed to fetch')) {\n          return null;\n        }\n      }\n      return event;\n    },\n    // User context\n    beforeBreadcrumb(breadcrumb) {\n      var _breadcrumb$data, _breadcrumb$data$url;\n      // Filter out noisy breadcrumbs\n      if (breadcrumb.category === 'console' && breadcrumb.level === 'debug') {\n        return null;\n      }\n      if (breadcrumb.category === 'xhr' && (_breadcrumb$data = breadcrumb.data) !== null && _breadcrumb$data !== void 0 && (_breadcrumb$data$url = _breadcrumb$data.url) !== null && _breadcrumb$data$url !== void 0 && _breadcrumb$data$url.includes('/health')) {\n        return null;\n      }\n      return breadcrumb;\n    },\n    // Tags for better organization\n    initialScope: {\n      tags: {\n        component: 'sprkz-pdf-forms',\n        version: process.env.REACT_APP_VERSION || 'development'\n      }\n    }\n  });\n  console.log('Sentry initialized successfully', {\n    environment: process.env.REACT_APP_SENTRY_ENVIRONMENT,\n    release: process.env.REACT_APP_VERSION,\n    tracesSampleRate: isDevelopment ? 1.0 : 0.1\n  });\n  return true;\n};\n\n// React Error Boundary integration\nexport const ErrorBoundary = Sentry.withErrorBoundary;\n\n// Performance transaction helpers using new Sentry API\nexport const performance = {\n  // Start a performance transaction\n  startTransaction: (name, op = 'navigation') => {\n    return Sentry.startSpan({\n      name,\n      op,\n      attributes: {\n        component: 'sprkz-pdf-forms'\n      }\n    }, span => span);\n  },\n  // Measure function performance\n  measureFunction: async (name, fn, tags) => {\n    return await Sentry.startSpan({\n      name,\n      op: 'function',\n      attributes: {\n        component: 'sprkz-pdf-forms',\n        ...tags\n      }\n    }, async () => {\n      try {\n        const result = await fn();\n        return result;\n      } catch (error) {\n        Sentry.captureException(error);\n        throw error;\n      }\n    });\n  },\n  // Add spans to existing transaction\n  addSpan: (description, op = 'http') => {\n    const activeSpan = Sentry.getActiveSpan();\n    if (activeSpan) {\n      return Sentry.startInactiveSpan({\n        name: description,\n        op\n      });\n    }\n    return null;\n  }\n};\n\n// PDF-specific error tracking\nexport const pdfErrors = {\n  // Track PDF loading errors\n  trackLoadError: (url, error) => {\n    Sentry.captureException(error, {\n      tags: {\n        errorType: 'pdf_load_error',\n        pdfUrl: url\n      },\n      extra: {\n        url,\n        errorMessage: error.message\n      }\n    });\n  },\n  // Track form field extraction errors\n  trackFieldExtractionError: (pdfUrl, error) => {\n    Sentry.captureException(error, {\n      tags: {\n        errorType: 'field_extraction_error'\n      },\n      extra: {\n        pdfUrl,\n        errorMessage: error.message\n      }\n    });\n  },\n  // Track signature creation errors\n  trackSignatureError: (signatureType, error) => {\n    Sentry.captureException(error, {\n      tags: {\n        errorType: 'signature_error',\n        signatureType\n      },\n      extra: {\n        signatureType,\n        errorMessage: error.message\n      }\n    });\n  },\n  // Track form submission errors\n  trackSubmissionError: (formData, error) => {\n    Sentry.captureException(error, {\n      tags: {\n        errorType: 'form_submission_error'\n      },\n      extra: {\n        fieldCount: Object.keys(formData).length,\n        errorMessage: error.message,\n        // Don't send actual form data for privacy\n        hasSignature: Object.values(formData).some(v => typeof v === 'object' && (v === null || v === void 0 ? void 0 : v.type) === 'signature')\n      }\n    });\n  }\n};\n\n// Feature flag error tracking\nexport const featureFlagErrors = {\n  // Track feature flag initialization errors\n  trackInitError: error => {\n    Sentry.captureException(error, {\n      tags: {\n        errorType: 'feature_flag_init_error'\n      }\n    });\n  },\n  // Track flag evaluation errors\n  trackEvaluationError: (flagName, error) => {\n    Sentry.captureException(error, {\n      tags: {\n        errorType: 'feature_flag_evaluation_error',\n        flagName\n      }\n    });\n  }\n};\n\n// User interaction tracking\nexport const userInteractions = {\n  // Track wizard navigation\n  trackWizardNavigation: (action, fieldIndex) => {\n    Sentry.addBreadcrumb({\n      message: `Wizard ${action}`,\n      category: 'user-interaction',\n      data: {\n        action,\n        fieldIndex\n      }\n    });\n  },\n  // Track signature creation\n  trackSignatureCreation: type => {\n    Sentry.addBreadcrumb({\n      message: 'Signature created',\n      category: 'user-interaction',\n      data: {\n        signatureType: type\n      }\n    });\n  },\n  // Track form completion\n  trackFormCompletion: (fieldCount, completionTime) => {\n    Sentry.captureMessage('Form completed', {\n      level: 'info',\n      tags: {\n        eventType: 'form_completion'\n      },\n      extra: {\n        fieldCount,\n        completionTimeMs: completionTime\n      }\n    });\n  }\n};\n\n// Validation error tracking\nexport const validationErrors = {\n  // Track validation failures\n  trackValidationError: (fieldName, errors) => {\n    Sentry.addBreadcrumb({\n      message: 'Field validation failed',\n      category: 'validation',\n      data: {\n        fieldName,\n        errors\n      }\n    });\n  },\n  // Track form-wide validation issues\n  trackFormValidationError: fieldErrors => {\n    const errorCount = Object.keys(fieldErrors).length;\n    const totalErrors = Object.values(fieldErrors).flat().length;\n    Sentry.captureMessage('Form validation failed', {\n      level: 'warning',\n      tags: {\n        eventType: 'form_validation_error'\n      },\n      extra: {\n        fieldsWithErrors: errorCount,\n        totalErrors,\n        fieldNames: Object.keys(fieldErrors)\n      }\n    });\n  }\n};\nexport default Sentry;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}