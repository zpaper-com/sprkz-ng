{"ast":null,"code":"import{useState,useEffect,useCallback,useContext}from'react';import{unleashService}from'../services/unleashService';import{FeatureFlagsContext}from'../contexts/FeatureFlagsContext';// Hook for accessing feature flags\nexport const useFeatureFlags=()=>{const context=useContext(FeatureFlagsContext);if(!context){throw new Error('useFeatureFlags must be used within a FeatureFlagsProvider');}return context;};// Hook for checking a single feature flag\nexport const useFeatureFlag=(flagName,context)=>{const[isEnabled,setIsEnabled]=useState(()=>unleashService.isEnabled(flagName,context));const[variant,setVariant]=useState(()=>unleashService.getVariant(flagName,context));useEffect(()=>{// Update when flags change\nconst updateFlag=()=>{setIsEnabled(unleashService.isEnabled(flagName,context));setVariant(unleashService.getVariant(flagName,context));};// Subscribe to changes\nconst unsubscribe=unleashService.subscribe(updateFlag);// Initial update\nupdateFlag();return unsubscribe;},[flagName,context]);return{isEnabled,variant};};// Hook for checking multiple feature flags\nexport const useFeatureFlags_Multiple=(flagNames,context)=>{const[flags,setFlags]=useState(()=>{const initialFlags={};flagNames.forEach(flagName=>{initialFlags[flagName]=unleashService.isEnabled(flagName,context);});return initialFlags;});useEffect(()=>{const updateFlags=()=>{const updatedFlags={};flagNames.forEach(flagName=>{updatedFlags[flagName]=unleashService.isEnabled(flagName,context);});setFlags(updatedFlags);};// Subscribe to changes\nconst unsubscribe=unleashService.subscribe(updateFlags);// Initial update\nupdateFlags();return unsubscribe;},[flagNames,context]);return flags;};// Hook for conditional feature rendering\nexport const useConditionalFeature=(flagName,context)=>{const{isEnabled}=useFeatureFlag(flagName,context);const ConditionalComponent=useCallback(_ref=>{let{children,fallback=null}=_ref;if(isEnabled){return React.createElement(React.Fragment,null,children);}return React.createElement(React.Fragment,null,fallback);},[isEnabled]);return{isEnabled,ConditionalComponent};};// Hook for feature flag variants with type safety\nexport const useFeatureVariant=(flagName,defaultValue,context)=>{const[variant,setVariant]=useState(()=>{var _flagVariant$payload$,_flagVariant$payload;const flagVariant=unleashService.getVariant(flagName,context);return(_flagVariant$payload$=flagVariant===null||flagVariant===void 0?void 0:(_flagVariant$payload=flagVariant.payload)===null||_flagVariant$payload===void 0?void 0:_flagVariant$payload.value)!==null&&_flagVariant$payload$!==void 0?_flagVariant$payload$:defaultValue;});useEffect(()=>{const updateVariant=()=>{var _flagVariant$payload$2,_flagVariant$payload2;const flagVariant=unleashService.getVariant(flagName,context);setVariant((_flagVariant$payload$2=flagVariant===null||flagVariant===void 0?void 0:(_flagVariant$payload2=flagVariant.payload)===null||_flagVariant$payload2===void 0?void 0:_flagVariant$payload2.value)!==null&&_flagVariant$payload$2!==void 0?_flagVariant$payload$2:defaultValue);};const unsubscribe=unleashService.subscribe(updateVariant);updateVariant();return unsubscribe;},[flagName,defaultValue,context]);return variant;};// Hook for feature flag experimentation\nexport const useExperiment=(experimentName,variants,context)=>{const[activeVariant,setActiveVariant]=useState(()=>{const variant=unleashService.getVariant(experimentName,context);return variants[variant===null||variant===void 0?void 0:variant.name]||variants.default||null;});useEffect(()=>{const updateExperiment=()=>{const variant=unleashService.getVariant(experimentName,context);setActiveVariant(variants[variant===null||variant===void 0?void 0:variant.name]||variants.default||null);};const unsubscribe=unleashService.subscribe(updateExperiment);updateExperiment();return unsubscribe;},[experimentName,variants,context]);return activeVariant;};// Hook for gradual rollouts\nexport const useGradualRollout=(flagName,userId,context)=>{const rolloutContext=userId?{...context,userId}:context;const{isEnabled}=useFeatureFlag(flagName,rolloutContext);return isEnabled;};// Hook for A/B testing\nexport const useABTest=(experimentFlag,variants,context)=>{const[activeVariant,setActiveVariant]=useState('A');const[variantData,setVariantData]=useState(variants.A);useEffect(()=>{const updateTest=()=>{const variant=unleashService.getVariant(experimentFlag,context);const variantName=variant===null||variant===void 0?void 0:variant.name;if(variantName&&variants[variantName]){setActiveVariant(variantName);setVariantData(variants[variantName]);}else{// Default to A if variant not found\nsetActiveVariant('A');setVariantData(variants.A);}};const unsubscribe=unleashService.subscribe(updateTest);updateTest();return unsubscribe;},[experimentFlag,variants,context]);return{variant:activeVariant,data:variantData};};// Hook for debugging feature flags\nexport const useFeatureFlagsDebug=()=>{const[debugInfo,setDebugInfo]=useState(()=>unleashService.getStatus());const[allFlags,setAllFlags]=useState(()=>unleashService.getAllFlags());useEffect(()=>{const updateDebugInfo=()=>{setDebugInfo(unleashService.getStatus());setAllFlags(unleashService.getAllFlags());};const unsubscribe=unleashService.subscribe(updateDebugInfo);updateDebugInfo();return unsubscribe;},[]);const refreshFlags=useCallback(()=>{setDebugInfo(unleashService.getStatus());setAllFlags(unleashService.getAllFlags());},[]);return{status:debugInfo,flags:allFlags,refresh:refreshFlags};};// Utility hook for performance-sensitive feature checks\nexport const useOptimizedFeatureFlag=(flagName,context)=>{// Use a ref to avoid unnecessary re-renders\nconst[isEnabled,setIsEnabled]=useState(()=>unleashService.isEnabled(flagName,context));useEffect(()=>{let timeoutId;const updateFlag=()=>{// Debounce updates to avoid excessive re-renders\nclearTimeout(timeoutId);timeoutId=setTimeout(()=>{const newValue=unleashService.isEnabled(flagName,context);setIsEnabled(current=>current!==newValue?newValue:current);},100);};const unsubscribe=unleashService.subscribe(updateFlag);updateFlag();return()=>{clearTimeout(timeoutId);unsubscribe();};},[flagName,context]);return isEnabled;};export default useFeatureFlags;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}