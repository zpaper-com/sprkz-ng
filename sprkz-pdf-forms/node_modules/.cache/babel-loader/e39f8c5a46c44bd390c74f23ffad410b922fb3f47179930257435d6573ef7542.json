{"ast":null,"code":"import { defineIntegration, debug, serializeEnvelope } from '@sentry/core';\nimport { getNativeImplementation } from '@sentry-internal/browser-utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nconst INTEGRATION_NAME = 'SpotlightBrowser';\nconst _spotlightIntegration = (options = {}) => {\n  const sidecarUrl = options.sidecarUrl || 'http://localhost:8969/stream';\n  return {\n    name: INTEGRATION_NAME,\n    setup: () => {\n      DEBUG_BUILD && debug.log('Using Sidecar URL', sidecarUrl);\n    },\n    // We don't want to send interaction transactions/root spans created from\n    // clicks within Spotlight to Sentry. Neither do we want them to be sent to\n    // spotlight.\n    processEvent: event => isSpotlightInteraction(event) ? null : event,\n    afterAllSetup: client => {\n      setupSidecarForwarding(client, sidecarUrl);\n    }\n  };\n};\nfunction setupSidecarForwarding(client, sidecarUrl) {\n  const makeFetch = getNativeImplementation('fetch');\n  let failCount = 0;\n  client.on('beforeEnvelope', envelope => {\n    if (failCount > 3) {\n      debug.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests:', failCount);\n      return;\n    }\n    makeFetch(sidecarUrl, {\n      method: 'POST',\n      body: serializeEnvelope(envelope),\n      headers: {\n        'Content-Type': 'application/x-sentry-envelope'\n      },\n      mode: 'cors'\n    }).then(res => {\n      if (res.status >= 200 && res.status < 400) {\n        // Reset failed requests counter on success\n        failCount = 0;\n      }\n    }, err => {\n      failCount++;\n      debug.error(\"Sentry SDK can't connect to Sidecar is it running? See: https://spotlightjs.com/sidecar/npx/\", err);\n    });\n  });\n}\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n */\nconst spotlightBrowserIntegration = defineIntegration(_spotlightIntegration);\n\n/**\n * Flags if the event is a transaction created from an interaction with the spotlight UI.\n */\nfunction isSpotlightInteraction(event) {\n  return Boolean(event.type === 'transaction' && event.spans && event.contexts?.trace && event.contexts.trace.op === 'ui.action.click' && event.spans.some(({\n    description\n  }) => description?.includes('#sentry-spotlight')));\n}\nexport { INTEGRATION_NAME, isSpotlightInteraction, spotlightBrowserIntegration };\n//# sourceMappingURL=spotlight.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}