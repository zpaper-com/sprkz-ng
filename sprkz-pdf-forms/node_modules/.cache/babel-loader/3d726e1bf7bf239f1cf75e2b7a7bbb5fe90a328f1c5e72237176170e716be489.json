{"ast":null,"code":"import { defineIntegration } from '../integration.js';\nimport { addMetadataToStackFrames, stripMetadataFromStackFrames } from '../metadata.js';\nimport { forEachEnvelopeItem } from '../utils/envelope.js';\nimport { getFramesFromEvent } from '../utils/stacktrace.js';\n\n/**\n * This integration allows you to filter out, or tag error events that do not come from user code marked with a bundle key via the Sentry bundler plugins.\n */\nconst thirdPartyErrorFilterIntegration = defineIntegration(options => {\n  return {\n    name: 'ThirdPartyErrorsFilter',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      // TODO(lforst): Move this cleanup logic into a more central place in the SDK.\n      client.on('beforeEnvelope', envelope => {\n        forEachEnvelopeItem(envelope, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? item[1] : undefined;\n            if (event) {\n              stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n        const stackParser = client.getOptions().stackParser;\n        addMetadataToStackFrames(stackParser, event);\n      });\n    },\n    processEvent(event) {\n      const frameKeys = getBundleKeysForAllFramesWithFilenames(event);\n      if (frameKeys) {\n        const arrayMethod = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'apply-tag-if-contains-third-party-frames' ? 'some' : 'every';\n        const behaviourApplies = frameKeys[arrayMethod](keys => !keys.some(key => options.filterKeys.includes(key)));\n        if (behaviourApplies) {\n          const shouldDrop = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'drop-error-if-exclusively-contains-third-party-frames';\n          if (shouldDrop) {\n            return null;\n          } else {\n            event.tags = {\n              ...event.tags,\n              third_party_code: true\n            };\n          }\n        }\n      }\n      return event;\n    }\n  };\n});\nfunction getBundleKeysForAllFramesWithFilenames(event) {\n  const frames = getFramesFromEvent(event);\n  if (!frames) {\n    return undefined;\n  }\n  return frames\n  // Exclude frames without a filename since these are likely native code or built-ins\n  .filter(frame => !!frame.filename).map(frame => {\n    if (frame.module_metadata) {\n      return Object.keys(frame.module_metadata).filter(key => key.startsWith(BUNDLER_PLUGIN_APP_KEY_PREFIX)).map(key => key.slice(BUNDLER_PLUGIN_APP_KEY_PREFIX.length));\n    }\n    return [];\n  });\n}\nconst BUNDLER_PLUGIN_APP_KEY_PREFIX = '_sentryBundlerPluginAppKey:';\nexport { thirdPartyErrorFilterIntegration };\n//# sourceMappingURL=third-party-errors-filter.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}