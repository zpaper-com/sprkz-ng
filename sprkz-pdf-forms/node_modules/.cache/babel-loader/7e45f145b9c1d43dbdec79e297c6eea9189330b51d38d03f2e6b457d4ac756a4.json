{"ast":null,"code":"import { keyframes } from '@mui/system';\n// Animation keyframes\nexport const microAnimations = {\n  // Hover effects\n  hoverLift: keyframes`\n    0% { transform: translateY(0); }\n    100% { transform: translateY(-2px); }\n  `,\n  hoverScale: keyframes`\n    0% { transform: scale(1); }\n    100% { transform: scale(1.02); }\n  `,\n  hoverGlow: keyframes`\n    0% { box-shadow: 0 0 0 0 rgba(33, 150, 243, 0); }\n    100% { box-shadow: 0 0 0 4px rgba(33, 150, 243, 0.2); }\n  `,\n  // Button interactions\n  buttonPress: keyframes`\n    0% { transform: scale(1); }\n    50% { transform: scale(0.98); }\n    100% { transform: scale(1); }\n  `,\n  ripple: keyframes`\n    0% {\n      transform: scale(0);\n      opacity: 1;\n    }\n    100% {\n      transform: scale(4);\n      opacity: 0;\n    }\n  `,\n  // Loading states\n  pulse: keyframes`\n    0% { opacity: 1; }\n    50% { opacity: 0.5; }\n    100% { opacity: 1; }\n  `,\n  shimmer: keyframes`\n    0% { transform: translateX(-100%); }\n    100% { transform: translateX(100%); }\n  `,\n  // Success/error states\n  bounceIn: keyframes`\n    0% {\n      transform: scale(0.3);\n      opacity: 0;\n    }\n    50% {\n      transform: scale(1.05);\n    }\n    70% {\n      transform: scale(0.9);\n    }\n    100% {\n      transform: scale(1);\n      opacity: 1;\n    }\n  `,\n  shake: keyframes`\n    0%, 100% { transform: translateX(0); }\n    10%, 30%, 50%, 70%, 90% { transform: translateX(-2px); }\n    20%, 40%, 60%, 80% { transform: translateX(2px); }\n  `,\n  // Page transitions\n  slideInFromBottom: keyframes`\n    0% {\n      transform: translateY(20px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateY(0);\n      opacity: 1;\n    }\n  `,\n  slideInFromLeft: keyframes`\n    0% {\n      transform: translateX(-20px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  `,\n  slideInFromRight: keyframes`\n    0% {\n      transform: translateX(20px);\n      opacity: 0;\n    }\n    100% {\n      transform: translateX(0);\n      opacity: 1;\n    }\n  `,\n  fadeIn: keyframes`\n    0% { opacity: 0; }\n    100% { opacity: 1; }\n  `,\n  fadeInUp: keyframes`\n    0% {\n      opacity: 0;\n      transform: translateY(10px);\n    }\n    100% {\n      opacity: 1;\n      transform: translateY(0);\n    }\n  `,\n  // Progress animations\n  progressFill: keyframes`\n    0% { width: 0%; }\n    100% { width: var(--progress-width); }\n  `,\n  rotateIn: keyframes`\n    0% {\n      transform: rotate(-200deg);\n      opacity: 0;\n    }\n    100% {\n      transform: rotate(0deg);\n      opacity: 1;\n    }\n  `\n};\n\n// Pre-defined micro-interaction styles\nexport const microInteractionStyles = {\n  // Hover lift effect for cards and buttons\n  hoverLift: {\n    transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\n    cursor: 'pointer',\n    '&:hover': {\n      transform: 'translateY(-2px)',\n      boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)'\n    },\n    '&:active': {\n      transform: 'translateY(0)',\n      transition: 'all 0.1s'\n    }\n  },\n  // Scale hover effect\n  hoverScale: {\n    transition: 'transform 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\n    cursor: 'pointer',\n    '&:hover': {\n      transform: 'scale(1.02)'\n    },\n    '&:active': {\n      transform: 'scale(0.98)',\n      transition: 'transform 0.1s'\n    }\n  },\n  // Glow hover effect\n  hoverGlow: {\n    transition: 'box-shadow 0.3s ease',\n    '&:hover': {\n      boxShadow: '0 0 0 2px rgba(33, 150, 243, 0.2)'\n    }\n  },\n  // Tap feedback\n  tapFeedback: {\n    transition: 'all 0.1s ease',\n    '&:active': {\n      transform: 'scale(0.98)',\n      opacity: 0.8\n    }\n  },\n  // Smooth focus\n  focusRing: {\n    '&:focus-visible': {\n      outline: '2px solid',\n      outlineColor: 'primary.main',\n      outlineOffset: '2px',\n      borderRadius: '4px'\n    }\n  },\n  // Stagger animation (for lists)\n  staggerFadeIn: (index, baseDelay = 100) => ({\n    animation: `${microAnimations.fadeInUp} 0.5s ease-out ${index * baseDelay}ms both`\n  }),\n  // Loading shimmer\n  shimmerLoading: {\n    position: 'relative',\n    overflow: 'hidden',\n    '&::after': {\n      content: '\"\"',\n      position: 'absolute',\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      background: 'linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent)',\n      animation: `${microAnimations.shimmer} 1.5s infinite`\n    }\n  },\n  // Success state\n  successBounce: {\n    animation: `${microAnimations.bounceIn} 0.6s ease-out`\n  },\n  // Error shake\n  errorShake: {\n    animation: `${microAnimations.shake} 0.5s ease-in-out`\n  },\n  // Slide in from bottom (for modals, sheets)\n  slideInFromBottom: {\n    animation: `${microAnimations.slideInFromBottom} 0.3s ease-out`\n  },\n  // Slide in from left (for sidebars)\n  slideInFromLeft: {\n    animation: `${microAnimations.slideInFromLeft} 0.3s ease-out`\n  },\n  // Slide in from right\n  slideInFromRight: {\n    animation: `${microAnimations.slideInFromRight} 0.3s ease-out`\n  },\n  // Fade in\n  fadeIn: {\n    animation: `${microAnimations.fadeIn} 0.3s ease-out`\n  },\n  // Pulse loading\n  pulseLoading: {\n    animation: `${microAnimations.pulse} 2s ease-in-out infinite`\n  }\n};\n\n// Utility functions for dynamic animations\nexport const createMicroInteraction = {\n  // Create a custom hover lift with specific height\n  hoverLift: (height = 2, shadow = '0 4px 12px rgba(0, 0, 0, 0.15)') => ({\n    transition: 'all 0.2s cubic-bezier(0.4, 0, 0.2, 1)',\n    cursor: 'pointer',\n    '&:hover': {\n      transform: `translateY(-${height}px)`,\n      boxShadow: shadow\n    },\n    '&:active': {\n      transform: 'translateY(0)',\n      transition: 'all 0.1s'\n    }\n  }),\n  // Create a custom scale animation\n  scale: (scaleAmount = 1.02, duration = 200) => ({\n    transition: `transform ${duration}ms cubic-bezier(0.4, 0, 0.2, 1)`,\n    '&:hover': {\n      transform: `scale(${scaleAmount})`\n    },\n    '&:active': {\n      transform: 'scale(0.98)'\n    }\n  }),\n  // Create a custom glow effect with specific color\n  glow: (color = 'rgba(33, 150, 243, 0.2)', intensity = 2) => ({\n    transition: 'box-shadow 0.3s ease',\n    '&:hover': {\n      boxShadow: `0 0 0 ${intensity}px ${color}`\n    }\n  }),\n  // Create staggered animation for lists\n  stagger: (totalItems, baseDelay = 50, animation = 'fadeInUp') => {\n    const staggerStyles = {};\n    for (let i = 0; i < totalItems; i++) {\n      staggerStyles[`&:nth-of-type(${i + 1})`] = {\n        animation: `${microAnimations[animation]} 0.5s ease-out ${i * baseDelay}ms both`\n      };\n    }\n    return staggerStyles;\n  },\n  // Create a loading state with custom pulse timing\n  loading: (duration = 2000) => ({\n    animation: `${microAnimations.pulse} ${duration}ms ease-in-out infinite`\n  }),\n  // Create a progress fill animation\n  progressFill: (width, duration = 1000) => ({\n    '--progress-width': typeof width === 'number' ? `${width}%` : width,\n    animation: `${microAnimations.progressFill} ${duration}ms ease-out forwards`\n  })\n};\n\n// Touch-friendly interaction styles for mobile\nexport const touchInteractions = {\n  // Minimum touch target size (44x44px)\n  touchTarget: {\n    minWidth: '44px',\n    minHeight: '44px',\n    display: 'flex',\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  // Enhanced tap feedback for mobile\n  mobileTap: {\n    WebkitTapHighlightColor: 'transparent',\n    transition: 'all 0.1s ease',\n    '&:active': {\n      transform: 'scale(0.95)',\n      opacity: 0.7\n    }\n  },\n  // Swipe-friendly elements\n  swipeTarget: {\n    touchAction: 'pan-x pan-y',\n    userSelect: 'none'\n  }\n};\n\n// Presets for common UI elements\nexport const presets = {\n  card: {\n    ...microInteractionStyles.hoverLift,\n    borderRadius: '12px',\n    overflow: 'hidden'\n  },\n  button: {\n    ...microInteractionStyles.tapFeedback,\n    ...microInteractionStyles.focusRing,\n    borderRadius: '8px',\n    fontWeight: 600\n  },\n  iconButton: {\n    ...microInteractionStyles.hoverScale,\n    ...touchInteractions.touchTarget,\n    ...touchInteractions.mobileTap,\n    borderRadius: '50%'\n  },\n  listItem: {\n    ...microInteractionStyles.hoverGlow,\n    borderRadius: '8px',\n    transition: 'all 0.2s ease'\n  },\n  input: {\n    ...microInteractionStyles.focusRing,\n    transition: 'all 0.2s ease',\n    '&:hover': {\n      borderColor: 'primary.main'\n    }\n  }\n};\nexport default {\n  animations: microAnimations,\n  styles: microInteractionStyles,\n  create: createMicroInteraction,\n  touch: touchInteractions,\n  presets\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}