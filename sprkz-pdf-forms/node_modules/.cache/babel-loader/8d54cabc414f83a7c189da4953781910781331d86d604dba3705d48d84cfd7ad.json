{"ast":null,"code":"import { getClient } from '../currentScopes.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { addConsoleInstrumentationHandler } from '../instrument/console.js';\nimport { defineIntegration } from '../integration.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '../semanticAttributes.js';\nimport { CONSOLE_LEVELS, debug } from '../utils/debug-logger.js';\nimport { isPrimitive } from '../utils/is.js';\nimport { normalize } from '../utils/normalize.js';\nimport { GLOBAL_OBJ } from '../utils/worldwide.js';\nimport { _INTERNAL_captureLog } from './exports.js';\nconst INTEGRATION_NAME = 'ConsoleLogs';\nconst DEFAULT_ATTRIBUTES = {\n  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.console.logging'\n};\nconst _consoleLoggingIntegration = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const levels = options.levels || CONSOLE_LEVELS;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const {\n        _experiments,\n        normalizeDepth = 3,\n        normalizeMaxBreadth = 1000\n      } = client.getOptions();\n      if (!_experiments?.enableLogs) {\n        DEBUG_BUILD && debug.warn('`_experiments.enableLogs` is not enabled, ConsoleLogs integration disabled');\n        return;\n      }\n      addConsoleInstrumentationHandler(_ref => {\n        let {\n          args,\n          level\n        } = _ref;\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n        if (level === 'assert') {\n          if (!args[0]) {\n            const followingArgs = args.slice(1);\n            const assertionMessage = followingArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(followingArgs, normalizeDepth, normalizeMaxBreadth)}` : 'Assertion failed';\n            _INTERNAL_captureLog({\n              level: 'error',\n              message: assertionMessage,\n              attributes: DEFAULT_ATTRIBUTES\n            });\n          }\n          return;\n        }\n        const isLevelLog = level === 'log';\n        _INTERNAL_captureLog({\n          level: isLevelLog ? 'info' : level,\n          message: formatConsoleArgs(args, normalizeDepth, normalizeMaxBreadth),\n          severityNumber: isLevelLog ? 10 : undefined,\n          attributes: DEFAULT_ATTRIBUTES\n        });\n      });\n    }\n  };\n};\n\n/**\n * Captures calls to the `console` API as logs in Sentry. Requires `_experiments.enableLogs` to be enabled.\n *\n * @experimental This feature is experimental and may be changed or removed in future versions.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```ts\n * import * as Sentry from '@sentry/browser';\n *\n * Sentry.init({\n *   integrations: [Sentry.consoleLoggingIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nconst consoleLoggingIntegration = defineIntegration(_consoleLoggingIntegration);\nfunction formatConsoleArgs(values, normalizeDepth, normalizeMaxBreadth) {\n  return 'util' in GLOBAL_OBJ && typeof GLOBAL_OBJ.util.format === 'function' ? GLOBAL_OBJ.util.format(...values) : safeJoinConsoleArgs(values, normalizeDepth, normalizeMaxBreadth);\n}\nfunction safeJoinConsoleArgs(values, normalizeDepth, normalizeMaxBreadth) {\n  return values.map(value => isPrimitive(value) ? String(value) : JSON.stringify(normalize(value, normalizeDepth, normalizeMaxBreadth))).join(' ');\n}\nexport { consoleLoggingIntegration };\n//# sourceMappingURL=console-integration.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}