{"ast":null,"code":"import { getGlobalSingleton } from '../carrier.js';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\n\n/**\n * A Sentry Logger instance.\n *\n * @deprecated Use {@link debug} instead with the {@link SentryDebugLogger} type.\n */\n\nconst CONSOLE_LEVELS = ['debug', 'info', 'warn', 'error', 'log', 'assert', 'trace'];\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** This may be mutated by the console instrumentation. */\nconst originalConsoleMethods = {};\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nfunction consoleSandbox(callback) {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n  const console = GLOBAL_OBJ.console;\n  const wrappedFuncs = {};\n  const wrappedLevels = Object.keys(originalConsoleMethods);\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level];\n    console[level] = originalConsoleMethod;\n  });\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level];\n    });\n  }\n}\nfunction enable() {\n  _getLoggerSettings().enabled = true;\n}\nfunction disable() {\n  _getLoggerSettings().enabled = false;\n}\nfunction isEnabled() {\n  return _getLoggerSettings().enabled;\n}\nfunction log(...args) {\n  _maybeLog('log', ...args);\n}\nfunction info(...args) {\n  _maybeLog('info', ...args);\n}\nfunction warn(...args) {\n  _maybeLog('warn', ...args);\n}\nfunction error(...args) {\n  _maybeLog('error', ...args);\n}\nfunction _debug(...args) {\n  _maybeLog('debug', ...args);\n}\nfunction assert(...args) {\n  _maybeLog('assert', ...args);\n}\nfunction trace(...args) {\n  _maybeLog('trace', ...args);\n}\nfunction _maybeLog(level, ...args) {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n  if (isEnabled()) {\n    consoleSandbox(() => {\n      GLOBAL_OBJ.console[level](`${PREFIX}[${level}]:`, ...args);\n    });\n  }\n}\nfunction _getLoggerSettings() {\n  if (!DEBUG_BUILD) {\n    return {\n      enabled: false\n    };\n  }\n  return getGlobalSingleton('loggerSettings', () => ({\n    enabled: false\n  }));\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n *\n * @deprecated Use {@link debug} instead.\n */\nconst logger = {\n  /** Enable logging. */\n  enable,\n  /** Disable logging. */\n  disable,\n  /** Check if logging is enabled. */\n  isEnabled,\n  /** Log a message. */\n  log,\n  /** Log level info */\n  info,\n  /** Log a warning. */\n  warn,\n  /** Log an error. */\n  error,\n  /** Log a debug message. */\n  debug: _debug,\n  /** Log an assertion. */\n  assert,\n  /** Log a trace. */\n  trace\n  // eslint-disable-next-line deprecation/deprecation\n};\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n */\nconst debug = {\n  /** Enable logging. */\n  enable,\n  /** Disable logging. */\n  disable,\n  /** Check if logging is enabled. */\n  isEnabled,\n  /** Log a message. */\n  log,\n  /** Log a warning. */\n  warn,\n  /** Log an error. */\n  error\n};\nexport { CONSOLE_LEVELS, consoleSandbox, debug, logger, originalConsoleMethods };\n//# sourceMappingURL=debug-logger.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}