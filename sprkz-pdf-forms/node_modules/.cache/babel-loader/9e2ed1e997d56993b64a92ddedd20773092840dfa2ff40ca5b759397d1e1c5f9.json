{"ast":null,"code":"import { WINDOW } from '../../../types.js';\nimport { generateUniqueID } from './generateUniqueID.js';\nimport { getActivationStart } from './getActivationStart.js';\nimport { getNavigationEntry } from './getNavigationEntry.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst initMetric = (name, value = -1) => {\n  const navEntry = getNavigationEntry();\n  let navigationType = 'navigate';\n  if (navEntry) {\n    if (WINDOW.document?.prerendering || getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else if (WINDOW.document?.wasDiscarded) {\n      navigationType = 'restore';\n    } else if (navEntry.type) {\n      navigationType = navEntry.type.replace(/_/g, '-');\n    }\n  }\n\n  // Use `entries` type specific for the metric.\n  const entries = [];\n  return {\n    name,\n    value,\n    rating: 'good',\n    // If needed, will be updated when reported. `const` to keep the type from widening to `string`.\n    delta: 0,\n    entries,\n    id: generateUniqueID(),\n    navigationType\n  };\n};\nexport { initMetric };","map":{"version":3,"names":["initMetric","name","value","navEntry","getNavigationEntry","navigationType","WINDOW","document","prerendering","getActivationStart","wasDiscarded","type","replace","entries","rating","delta","id","generateUniqueID"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/initMetric.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../../types';\nimport type { MetricType } from '../types';\nimport { generateUniqueID } from './generateUniqueID';\nimport { getActivationStart } from './getActivationStart';\nimport { getNavigationEntry } from './getNavigationEntry';\n\nexport const initMetric = <MetricName extends MetricType['name']>(name: MetricName, value: number = -1) => {\n  const navEntry = getNavigationEntry();\n  let navigationType: MetricType['navigationType'] = 'navigate';\n\n  if (navEntry) {\n    if (WINDOW.document?.prerendering || getActivationStart() > 0) {\n      navigationType = 'prerender';\n    } else if (WINDOW.document?.wasDiscarded) {\n      navigationType = 'restore';\n    } else if (navEntry.type) {\n      navigationType = navEntry.type.replace(/_/g, '-') as MetricType['navigationType'];\n    }\n  }\n\n  // Use `entries` type specific for the metric.\n  const entries: Extract<MetricType, { name: MetricName }>['entries'] = [];\n\n  return {\n    name,\n    value,\n    rating: 'good' as const, // If needed, will be updated when reported. `const` to keep the type from widening to `string`.\n    delta: 0,\n    entries,\n    id: generateUniqueID(),\n    navigationType,\n  };\n};\n"],"mappings":";;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAQO,MAAMA,UAAA,GAAaA,CAAwCC,IAAI,EAAcC,KAAK,GAAW,EAAE,KAAK;EACzG,MAAMC,QAAA,GAAWC,kBAAkB,EAAE;EACrC,IAAIC,cAAc,GAAiC,UAAU;EAE7D,IAAIF,QAAQ,EAAE;IACZ,IAAIG,MAAM,CAACC,QAAQ,EAAEC,YAAA,IAAgBC,kBAAkB,EAAC,GAAI,CAAC,EAAE;MAC7DJ,cAAA,GAAiB,WAAW;IAClC,CAAI,MAAO,IAAIC,MAAM,CAACC,QAAQ,EAAEG,YAAY,EAAE;MACxCL,cAAA,GAAiB,SAAS;IAChC,OAAW,IAAIF,QAAQ,CAACQ,IAAI,EAAE;MACxBN,cAAA,GAAiBF,QAAQ,CAACQ,IAAI,CAACC,OAAO,CAAC,IAAI,EAAE,GAAG;IACtD;EACA;;EAEA;EACE,MAAMC,OAAO,GAAyD,EAAE;EAExE,OAAO;IACLZ,IAAI;IACJC,KAAK;IACLY,MAAM,EAAE;IAAA;IACRC,KAAK,EAAE,CAAC;IACRF,OAAO;IACPG,EAAE,EAAEC,gBAAgB,EAAE;IACtBZ;EACJ,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}