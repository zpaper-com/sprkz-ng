{"ast":null,"code":"import { defineIntegration, addConsoleInstrumentationHandler, addFetchInstrumentationHandler, getClient, safeJoin, severityLevelFromString, addBreadcrumb, debug, htmlTreeAsString, getComponentName, getBreadcrumbLogLevelFromHttpStatusCode, parseUrl, getEventDescription } from '@sentry/core';\nimport { addClickKeypressInstrumentationHandler, addXhrInstrumentationHandler, addHistoryInstrumentationHandler, SENTRY_XHR_DATA_KEY } from '@sentry-internal/browser-utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../helpers.js';\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\nconst INTEGRATION_NAME = 'Breadcrumbs';\nconst _breadcrumbsIntegration = (options = {}) => {\n  const _options = {\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n    ...options\n  };\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      // TODO(v10): Remove this functionality and use `consoleIntegration` from @sentry/core instead.\n      if (_options.console) {\n        addConsoleInstrumentationHandler(_getConsoleBreadcrumbHandler(client));\n      }\n      if (_options.dom) {\n        addClickKeypressInstrumentationHandler(_getDomBreadcrumbHandler(client, _options.dom));\n      }\n      if (_options.xhr) {\n        addXhrInstrumentationHandler(_getXhrBreadcrumbHandler(client));\n      }\n      if (_options.fetch) {\n        addFetchInstrumentationHandler(_getFetchBreadcrumbHandler(client));\n      }\n      if (_options.history) {\n        addHistoryInstrumentationHandler(_getHistoryBreadcrumbHandler(client));\n      }\n      if (_options.sentry) {\n        client.on('beforeSendEvent', _getSentryBreadcrumbHandler(client));\n      }\n    }\n  };\n};\nconst breadcrumbsIntegration = defineIntegration(_breadcrumbsIntegration);\n\n/**\n * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n */\nfunction _getSentryBreadcrumbHandler(client) {\n  return function addSentryBreadcrumb(event) {\n    if (getClient() !== client) {\n      return;\n    }\n    addBreadcrumb({\n      category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n      event_id: event.event_id,\n      level: event.level,\n      message: getEventDescription(event)\n    }, {\n      event\n    });\n  };\n}\n\n/**\n * A HOC that creates a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _getDomBreadcrumbHandler(client, dom) {\n  return function _innerDomBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    let target;\n    let componentName;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n    let maxStringLength = typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      DEBUG_BUILD && debug.warn(`\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`);\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event;\n      const element = _isEvent(event) ? event.target : event;\n      target = htmlTreeAsString(element, {\n        keyAttrs,\n        maxStringLength\n      });\n      componentName = getComponentName(element);\n    } catch {\n      target = '<unknown>';\n    }\n    if (target.length === 0) {\n      return;\n    }\n    const breadcrumb = {\n      category: `ui.${handlerData.name}`,\n      message: target\n    };\n    if (componentName) {\n      breadcrumb.data = {\n        'ui.component_name': componentName\n      };\n    }\n    addBreadcrumb(breadcrumb, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _getConsoleBreadcrumbHandler(client) {\n  return function _consoleBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console'\n      },\n      level: severityLevelFromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' ')\n    };\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n    addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _getXhrBreadcrumbHandler(client) {\n  return function _xhrBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    const {\n      startTimestamp,\n      endTimestamp\n    } = handlerData;\n    const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];\n\n    // We only capture complete, non-sentry requests\n    if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n      return;\n    }\n    const {\n      method,\n      url,\n      status_code,\n      body\n    } = sentryXhrData;\n    const data = {\n      method,\n      url,\n      status_code\n    };\n    const hint = {\n      xhr: handlerData.xhr,\n      input: body,\n      startTimestamp,\n      endTimestamp\n    };\n    const breadcrumb = {\n      category: 'xhr',\n      data,\n      type: 'http',\n      level: getBreadcrumbLogLevelFromHttpStatusCode(status_code)\n    };\n    client.emit('beforeOutgoingRequestBreadcrumb', breadcrumb, hint);\n    addBreadcrumb(breadcrumb, hint);\n  };\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _getFetchBreadcrumbHandler(client) {\n  return function _fetchBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    const {\n      startTimestamp,\n      endTimestamp\n    } = handlerData;\n\n    // We only capture complete fetch requests\n    if (!endTimestamp) {\n      return;\n    }\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n    ({\n      method: handlerData.fetchData.method,\n      url: handlerData.fetchData.url\n    });\n    if (handlerData.error) {\n      const data = handlerData.fetchData;\n      const hint = {\n        data: handlerData.error,\n        input: handlerData.args,\n        startTimestamp,\n        endTimestamp\n      };\n      const breadcrumb = {\n        category: 'fetch',\n        data,\n        level: 'error',\n        type: 'http'\n      };\n      client.emit('beforeOutgoingRequestBreadcrumb', breadcrumb, hint);\n      addBreadcrumb(breadcrumb, hint);\n    } else {\n      const response = handlerData.response;\n      const data = {\n        ...handlerData.fetchData,\n        status_code: response?.status\n      };\n      handlerData.fetchData.request_body_size;\n      handlerData.fetchData.response_body_size;\n      response?.status;\n      const hint = {\n        input: handlerData.args,\n        response,\n        startTimestamp,\n        endTimestamp\n      };\n      const breadcrumb = {\n        category: 'fetch',\n        data,\n        type: 'http',\n        level: getBreadcrumbLogLevelFromHttpStatusCode(data.status_code)\n      };\n      client.emit('beforeOutgoingRequestBreadcrumb', breadcrumb, hint);\n      addBreadcrumb(breadcrumb, hint);\n    }\n  };\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _getHistoryBreadcrumbHandler(client) {\n  return function _historyBreadcrumb(handlerData) {\n    if (getClient() !== client) {\n      return;\n    }\n    let from = handlerData.from;\n    let to = handlerData.to;\n    const parsedLoc = parseUrl(WINDOW.location.href);\n    let parsedFrom = from ? parseUrl(from) : undefined;\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom?.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n    addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to\n      }\n    });\n  };\n}\nfunction _isEvent(event) {\n  return !!event && !!event.target;\n}\nexport { breadcrumbsIntegration };","map":{"version":3,"names":["MAX_ALLOWED_STRING_LENGTH","INTEGRATION_NAME","_breadcrumbsIntegration","options","_options","console","dom","fetch","history","sentry","xhr","name","setup","client","addConsoleInstrumentationHandler","_getConsoleBreadcrumbHandler","addClickKeypressInstrumentationHandler","_getDomBreadcrumbHandler","addXhrInstrumentationHandler","_getXhrBreadcrumbHandler","addFetchInstrumentationHandler","_getFetchBreadcrumbHandler","addHistoryInstrumentationHandler","_getHistoryBreadcrumbHandler","on","_getSentryBreadcrumbHandler","breadcrumbsIntegration","defineIntegration","addSentryBreadcrumb","event","getClient","addBreadcrumb","category","type","event_id","level","message","getEventDescription","_innerDomBreadcrumb","handlerData","target","componentName","keyAttrs","serializeAttribute","undefined","maxStringLength","DEBUG_BUILD","debug","warn","element","_isEvent","htmlTreeAsString","getComponentName","length","breadcrumb","data","global","_consoleBreadcrumb","arguments","args","logger","severityLevelFromString","safeJoin","slice","input","_xhrBreadcrumb","startTimestamp","endTimestamp","sentryXhrData","SENTRY_XHR_DATA_KEY","method","url","status_code","body","hint","getBreadcrumbLogLevelFromHttpStatusCode","emit","_fetchBreadcrumb","fetchData","match","error","response","status","request_body_size","response_body_size","_historyBreadcrumb","from","to","parsedLoc","parseUrl","WINDOW","location","href","parsedFrom","parsedTo","path","protocol","host","relative"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/integrations/breadcrumbs.ts"],"sourcesContent":["/* eslint-disable max-lines */\n\nimport type {\n  Breadcrumb,\n  Client,\n  Event as SentryEvent,\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  HandlerDataConsole,\n  HandlerDataDom,\n  HandlerDataFetch,\n  HandlerDataHistory,\n  HandlerDataXhr,\n  IntegrationFn,\n  XhrBreadcrumbData,\n  XhrBreadcrumbHint,\n} from '@sentry/core';\nimport {\n  addBreadcrumb,\n  addConsoleInstrumentationHandler,\n  addFetchInstrumentationHandler,\n  debug,\n  defineIntegration,\n  getBreadcrumbLogLevelFromHttpStatusCode,\n  getClient,\n  getComponentName,\n  getEventDescription,\n  htmlTreeAsString,\n  parseUrl,\n  safeJoin,\n  severityLevelFromString,\n} from '@sentry/core';\nimport type { FetchHint, XhrHint } from '@sentry-internal/browser-utils';\nimport {\n  addClickKeypressInstrumentationHandler,\n  addHistoryInstrumentationHandler,\n  addXhrInstrumentationHandler,\n  SENTRY_XHR_DATA_KEY,\n} from '@sentry-internal/browser-utils';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\n\ninterface BreadcrumbsOptions {\n  console: boolean;\n  dom:\n    | boolean\n    | {\n        serializeAttribute?: string | string[];\n        maxStringLength?: number;\n      };\n  fetch: boolean;\n  history: boolean;\n  sentry: boolean;\n  xhr: boolean;\n}\n\n/** maxStringLength gets capped to prevent 100 breadcrumbs exceeding 1MB event payload size */\nconst MAX_ALLOWED_STRING_LENGTH = 1024;\n\nconst INTEGRATION_NAME = 'Breadcrumbs';\n\nconst _breadcrumbsIntegration = ((options: Partial<BreadcrumbsOptions> = {}) => {\n  const _options = {\n    console: true,\n    dom: true,\n    fetch: true,\n    history: true,\n    sentry: true,\n    xhr: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      // TODO(v10): Remove this functionality and use `consoleIntegration` from @sentry/core instead.\n      if (_options.console) {\n        addConsoleInstrumentationHandler(_getConsoleBreadcrumbHandler(client));\n      }\n      if (_options.dom) {\n        addClickKeypressInstrumentationHandler(_getDomBreadcrumbHandler(client, _options.dom));\n      }\n      if (_options.xhr) {\n        addXhrInstrumentationHandler(_getXhrBreadcrumbHandler(client));\n      }\n      if (_options.fetch) {\n        addFetchInstrumentationHandler(_getFetchBreadcrumbHandler(client));\n      }\n      if (_options.history) {\n        addHistoryInstrumentationHandler(_getHistoryBreadcrumbHandler(client));\n      }\n      if (_options.sentry) {\n        client.on('beforeSendEvent', _getSentryBreadcrumbHandler(client));\n      }\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const breadcrumbsIntegration = defineIntegration(_breadcrumbsIntegration);\n\n/**\n * Adds a breadcrumb for Sentry events or transactions if this option is enabled.\n */\nfunction _getSentryBreadcrumbHandler(client: Client): (event: SentryEvent) => void {\n  return function addSentryBreadcrumb(event: SentryEvent): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    addBreadcrumb(\n      {\n        category: `sentry.${event.type === 'transaction' ? 'transaction' : 'event'}`,\n        event_id: event.event_id,\n        level: event.level,\n        message: getEventDescription(event),\n      },\n      {\n        event,\n      },\n    );\n  };\n}\n\n/**\n * A HOC that creates a function that creates breadcrumbs from DOM API calls.\n * This is a HOC so that we get access to dom options in the closure.\n */\nfunction _getDomBreadcrumbHandler(\n  client: Client,\n  dom: BreadcrumbsOptions['dom'],\n): (handlerData: HandlerDataDom) => void {\n  return function _innerDomBreadcrumb(handlerData: HandlerDataDom): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let target;\n    let componentName;\n    let keyAttrs = typeof dom === 'object' ? dom.serializeAttribute : undefined;\n\n    let maxStringLength =\n      typeof dom === 'object' && typeof dom.maxStringLength === 'number' ? dom.maxStringLength : undefined;\n    if (maxStringLength && maxStringLength > MAX_ALLOWED_STRING_LENGTH) {\n      DEBUG_BUILD &&\n        debug.warn(\n          `\\`dom.maxStringLength\\` cannot exceed ${MAX_ALLOWED_STRING_LENGTH}, but a value of ${maxStringLength} was configured. Sentry will use ${MAX_ALLOWED_STRING_LENGTH} instead.`,\n        );\n      maxStringLength = MAX_ALLOWED_STRING_LENGTH;\n    }\n\n    if (typeof keyAttrs === 'string') {\n      keyAttrs = [keyAttrs];\n    }\n\n    // Accessing event.target can throw (see getsentry/raven-js#838, #768)\n    try {\n      const event = handlerData.event as Event | Node;\n      const element = _isEvent(event) ? event.target : event;\n\n      target = htmlTreeAsString(element, { keyAttrs, maxStringLength });\n      componentName = getComponentName(element);\n    } catch {\n      target = '<unknown>';\n    }\n\n    if (target.length === 0) {\n      return;\n    }\n\n    const breadcrumb: Breadcrumb = {\n      category: `ui.${handlerData.name}`,\n      message: target,\n    };\n\n    if (componentName) {\n      breadcrumb.data = { 'ui.component_name': componentName };\n    }\n\n    addBreadcrumb(breadcrumb, {\n      event: handlerData.event,\n      name: handlerData.name,\n      global: handlerData.global,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from console API calls\n */\nfunction _getConsoleBreadcrumbHandler(client: Client): (handlerData: HandlerDataConsole) => void {\n  return function _consoleBreadcrumb(handlerData: HandlerDataConsole): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const breadcrumb = {\n      category: 'console',\n      data: {\n        arguments: handlerData.args,\n        logger: 'console',\n      },\n      level: severityLevelFromString(handlerData.level),\n      message: safeJoin(handlerData.args, ' '),\n    };\n\n    if (handlerData.level === 'assert') {\n      if (handlerData.args[0] === false) {\n        breadcrumb.message = `Assertion failed: ${safeJoin(handlerData.args.slice(1), ' ') || 'console.assert'}`;\n        breadcrumb.data.arguments = handlerData.args.slice(1);\n      } else {\n        // Don't capture a breadcrumb for passed assertions\n        return;\n      }\n    }\n\n    addBreadcrumb(breadcrumb, {\n      input: handlerData.args,\n      level: handlerData.level,\n    });\n  };\n}\n\n/**\n * Creates breadcrumbs from XHR API calls\n */\nfunction _getXhrBreadcrumbHandler(client: Client): (handlerData: HandlerDataXhr) => void {\n  return function _xhrBreadcrumb(handlerData: HandlerDataXhr): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    const sentryXhrData = handlerData.xhr[SENTRY_XHR_DATA_KEY];\n\n    // We only capture complete, non-sentry requests\n    if (!startTimestamp || !endTimestamp || !sentryXhrData) {\n      return;\n    }\n\n    const { method, url, status_code, body } = sentryXhrData;\n\n    const data: XhrBreadcrumbData = {\n      method,\n      url,\n      status_code,\n    };\n\n    const hint: XhrBreadcrumbHint = {\n      xhr: handlerData.xhr,\n      input: body,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    const breadcrumb = {\n      category: 'xhr',\n      data,\n      type: 'http',\n      level: getBreadcrumbLogLevelFromHttpStatusCode(status_code),\n    };\n\n    client.emit('beforeOutgoingRequestBreadcrumb', breadcrumb, hint as XhrHint);\n\n    addBreadcrumb(breadcrumb, hint);\n  };\n}\n\n/**\n * Creates breadcrumbs from fetch API calls\n */\nfunction _getFetchBreadcrumbHandler(client: Client): (handlerData: HandlerDataFetch) => void {\n  return function _fetchBreadcrumb(handlerData: HandlerDataFetch): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    const { startTimestamp, endTimestamp } = handlerData;\n\n    // We only capture complete fetch requests\n    if (!endTimestamp) {\n      return;\n    }\n\n    if (handlerData.fetchData.url.match(/sentry_key/) && handlerData.fetchData.method === 'POST') {\n      // We will not create breadcrumbs for fetch requests that contain `sentry_key` (internal sentry requests)\n      return;\n    }\n\n    const breadcrumbData: FetchBreadcrumbData = {\n      method: handlerData.fetchData.method,\n      url: handlerData.fetchData.url,\n    };\n\n    if (handlerData.error) {\n      const data: FetchBreadcrumbData = handlerData.fetchData;\n      const hint: FetchBreadcrumbHint = {\n        data: handlerData.error,\n        input: handlerData.args,\n        startTimestamp,\n        endTimestamp,\n      };\n\n      const breadcrumb = {\n        category: 'fetch',\n        data,\n        level: 'error',\n        type: 'http',\n      } satisfies Breadcrumb;\n\n      client.emit('beforeOutgoingRequestBreadcrumb', breadcrumb, hint as FetchHint);\n\n      addBreadcrumb(breadcrumb, hint);\n    } else {\n      const response = handlerData.response as Response | undefined;\n      const data: FetchBreadcrumbData = {\n        ...handlerData.fetchData,\n        status_code: response?.status,\n      };\n\n      breadcrumbData.request_body_size = handlerData.fetchData.request_body_size;\n      breadcrumbData.response_body_size = handlerData.fetchData.response_body_size;\n      breadcrumbData.status_code = response?.status;\n\n      const hint: FetchBreadcrumbHint = {\n        input: handlerData.args,\n        response,\n        startTimestamp,\n        endTimestamp,\n      };\n\n      const breadcrumb = {\n        category: 'fetch',\n        data,\n        type: 'http',\n        level: getBreadcrumbLogLevelFromHttpStatusCode(data.status_code),\n      };\n\n      client.emit('beforeOutgoingRequestBreadcrumb', breadcrumb, hint as FetchHint);\n\n      addBreadcrumb(breadcrumb, hint);\n    }\n  };\n}\n\n/**\n * Creates breadcrumbs from history API calls\n */\nfunction _getHistoryBreadcrumbHandler(client: Client): (handlerData: HandlerDataHistory) => void {\n  return function _historyBreadcrumb(handlerData: HandlerDataHistory): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    let from: string | undefined = handlerData.from;\n    let to: string | undefined = handlerData.to;\n    const parsedLoc = parseUrl(WINDOW.location.href);\n    let parsedFrom = from ? parseUrl(from) : undefined;\n    const parsedTo = parseUrl(to);\n\n    // Initial pushState doesn't provide `from` information\n    if (!parsedFrom?.path) {\n      parsedFrom = parsedLoc;\n    }\n\n    // Use only the path component of the URL if the URL matches the current\n    // document (almost all the time when using pushState)\n    if (parsedLoc.protocol === parsedTo.protocol && parsedLoc.host === parsedTo.host) {\n      to = parsedTo.relative;\n    }\n    if (parsedLoc.protocol === parsedFrom.protocol && parsedLoc.host === parsedFrom.host) {\n      from = parsedFrom.relative;\n    }\n\n    addBreadcrumb({\n      category: 'navigation',\n      data: {\n        from,\n        to,\n      },\n    });\n  };\n}\n\nfunction _isEvent(event: unknown): event is Event {\n  return !!event && !!(event as Record<string, unknown>).target;\n}\n"],"mappings":";;;;;AAwDA;AACA,MAAMA,yBAAA,GAA4B,IAAI;AAEtC,MAAMC,gBAAA,GAAmB,aAAa;AAEtC,MAAMC,uBAAA,GAA2BA,CAACC,OAAO,GAAgC,EAAE,KAAK;EAC9E,MAAMC,QAAA,GAAW;IACfC,OAAO,EAAE,IAAI;IACbC,GAAG,EAAE,IAAI;IACTC,KAAK,EAAE,IAAI;IACXC,OAAO,EAAE,IAAI;IACbC,MAAM,EAAE,IAAI;IACZC,GAAG,EAAE,IAAI;IACT,GAAGP;EACP,CAAG;EAED,OAAO;IACLQ,IAAI,EAAEV,gBAAgB;IACtBW,KAAKA,CAACC,MAAM,EAAE;MAClB;MACM,IAAIT,QAAQ,CAACC,OAAO,EAAE;QACpBS,gCAAgC,CAACC,4BAA4B,CAACF,MAAM,CAAC,CAAC;MAC9E;MACM,IAAIT,QAAQ,CAACE,GAAG,EAAE;QAChBU,sCAAsC,CAACC,wBAAwB,CAACJ,MAAM,EAAET,QAAQ,CAACE,GAAG,CAAC,CAAC;MAC9F;MACM,IAAIF,QAAQ,CAACM,GAAG,EAAE;QAChBQ,4BAA4B,CAACC,wBAAwB,CAACN,MAAM,CAAC,CAAC;MACtE;MACM,IAAIT,QAAQ,CAACG,KAAK,EAAE;QAClBa,8BAA8B,CAACC,0BAA0B,CAACR,MAAM,CAAC,CAAC;MAC1E;MACM,IAAIT,QAAQ,CAACI,OAAO,EAAE;QACpBc,gCAAgC,CAACC,4BAA4B,CAACV,MAAM,CAAC,CAAC;MAC9E;MACM,IAAIT,QAAQ,CAACK,MAAM,EAAE;QACnBI,MAAM,CAACW,EAAE,CAAC,iBAAiB,EAAEC,2BAA2B,CAACZ,MAAM,CAAC,CAAC;MACzE;IACA;EACA,CAAG;AACH,CAAC;MAEYa,sBAAA,GAAyBC,iBAAiB,CAACzB,uBAAuB;;AAE/E;AACA;AACA;AACA,SAASuB,2BAA2BA,CAACZ,MAAM,EAAwC;EACjF,OAAO,SAASe,mBAAmBA,CAACC,KAAK,EAAqB;IAC5D,IAAIC,SAAS,EAAC,KAAMjB,MAAM,EAAE;MAC1B;IACN;IAEIkB,aAAa,CACX;MACEC,QAAQ,EAAE,UAAUH,KAAK,CAACI,IAAA,KAAS,gBAAgB,gBAAgB,OAAO,EAAC;MACAC,QAAA,EAAAL,KAAA,CAAAK,QAAA;MACAC,KAAA,EAAAN,KAAA,CAAAM,KAAA;MACAC,OAAA,EAAAC,mBAAA,CAAAR,KAAA;IACA,GACA;MACAA;IACA,CACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAAZ,yBACAJ,MAAA,EACAP,GAAA,EACA;EACA,gBAAAgC,oBAAAC,WAAA;IACA,IAAAT,SAAA,OAAAjB,MAAA;MACA;IACA;IAEA,IAAA2B,MAAA;IACA,IAAAC,aAAA;IACA,IAAAC,QAAA,UAAApC,GAAA,gBAAAA,GAAA,CAAAqC,kBAAA,GAAAC,SAAA;IAEA,IAAAC,eAAA,GACA,OAAAvC,GAAA,wBAAAA,GAAA,CAAAuC,eAAA,gBAAAvC,GAAA,CAAAuC,eAAA,GAAAD,SAAA;IACA,IAAAC,eAAA,IAAAA,eAAA,GAAA7C,yBAAA;MACA8C,WAAA,IACAC,KAAA,CAAAC,IAAA,CACA,yCAAAhD,yBAAA,oBAAA6C,eAAA,oCAAA7C,yBAAA,WACA;MACA6C,eAAA,GAAA7C,yBAAA;IACA;IAEA,WAAA0C,QAAA;MACAA,QAAA,IAAAA,QAAA;IACA;;IAEA;IACA;MACA,MAAAb,KAAA,GAAAU,WAAA,CAAAV,KAAA;MACA,MAAAoB,OAAA,GAAAC,QAAA,CAAArB,KAAA,IAAAA,KAAA,CAAAW,MAAA,GAAAX,KAAA;MAEAW,MAAA,GAAAW,gBAAA,CAAAF,OAAA;QAAAP,QAAA;QAAAG;MAAA;MACAJ,aAAA,GAAAW,gBAAA,CAAAH,OAAA;IACA;MACAT,MAAA;IACA;IAEA,IAAAA,MAAA,CAAAa,MAAA;MACA;IACA;IAEA,MAAAC,UAAA;MACAtB,QAAA,QAAAO,WAAA,CAAA5B,IAAA;MACAyB,OAAA,EAAAI;IACA;IAEA,IAAAC,aAAA;MACAa,UAAA,CAAAC,IAAA;QAAA,qBAAAd;MAAA;IACA;IAEAV,aAAA,CAAAuB,UAAA;MACAzB,KAAA,EAAAU,WAAA,CAAAV,KAAA;MACAlB,IAAA,EAAA4B,WAAA,CAAA5B,IAAA;MACA6C,MAAA,EAAAjB,WAAA,CAAAiB;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA,SAAAzC,6BAAAF,MAAA;EACA,gBAAA4C,mBAAAlB,WAAA;IACA,IAAAT,SAAA,OAAAjB,MAAA;MACA;IACA;IAEA,MAAAyC,UAAA;MACAtB,QAAA;MACAuB,IAAA;QACAG,SAAA,EAAAnB,WAAA,CAAAoB,IAAA;QACAC,MAAA;MACA;MACAzB,KAAA,EAAA0B,uBAAA,CAAAtB,WAAA,CAAAJ,KAAA;MACAC,OAAA,EAAA0B,QAAA,CAAAvB,WAAA,CAAAoB,IAAA;IACA;IAEA,IAAApB,WAAA,CAAAJ,KAAA;MACA,IAAAI,WAAA,CAAAoB,IAAA;QACAL,UAAA,CAAAlB,OAAA,wBAAA0B,QAAA,CAAAvB,WAAA,CAAAoB,IAAA,CAAAI,KAAA;QACAT,UAAA,CAAAC,IAAA,CAAAG,SAAA,GAAAnB,WAAA,CAAAoB,IAAA,CAAAI,KAAA;MACA;QACA;QACA;MACA;IACA;IAEAhC,aAAA,CAAAuB,UAAA;MACAU,KAAA,EAAAzB,WAAA,CAAAoB,IAAA;MACAxB,KAAA,EAAAI,WAAA,CAAAJ;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA,SAAAhB,yBAAAN,MAAA;EACA,gBAAAoD,eAAA1B,WAAA;IACA,IAAAT,SAAA,OAAAjB,MAAA;MACA;IACA;IAEA;MAAAqD,cAAA;MAAAC;IAAA,IAAA5B,WAAA;IAEA,MAAA6B,aAAA,GAAA7B,WAAA,CAAA7B,GAAA,CAAA2D,mBAAA;;IAEA;IACA,KAAAH,cAAA,KAAAC,YAAA,KAAAC,aAAA;MACA;IACA;IAEA;MAAAE,MAAA;MAAAC,GAAA;MAAAC,WAAA;MAAAC;IAAA,IAAAL,aAAA;IAEA,MAAAb,IAAA;MACAe,MAAA;MACAC,GAAA;MACAC;IACA;IAEA,MAAAE,IAAA;MACAhE,GAAA,EAAA6B,WAAA,CAAA7B,GAAA;MACAsD,KAAA,EAAAS,IAAA;MACAP,cAAA;MACAC;IACA;IAEA,MAAAb,UAAA;MACAtB,QAAA;MACAuB,IAAA;MACAtB,IAAA;MACAE,KAAA,EAAAwC,uCAAA,CAAAH,WAAA;IACA;IAEA3D,MAAA,CAAA+D,IAAA,oCAAAtB,UAAA,EAAAoB,IAAA;IAEA3C,aAAA,CAAAuB,UAAA,EAAAoB,IAAA;EACA;AACA;;AAEA;AACA;AACA;AACA,SAAArD,2BAAAR,MAAA;EACA,gBAAAgE,iBAAAtC,WAAA;IACA,IAAAT,SAAA,OAAAjB,MAAA;MACA;IACA;IAEA;MAAAqD,cAAA;MAAAC;IAAA,IAAA5B,WAAA;;IAEA;IACA,KAAA4B,YAAA;MACA;IACA;IAEA,IAAA5B,WAAA,CAAAuC,SAAA,CAAAP,GAAA,CAAAQ,KAAA,kBAAAxC,WAAA,CAAAuC,SAAA,CAAAR,MAAA;MACA;MACA;IACA;IAEA;MACAA,MAAA,EAAA/B,WAAA,CAAAuC,SAAA,CAAAR,MAAA;MACAC,GAAA,EAAAhC,WAAA,CAAAuC,SAAA,CAAAP;IACA;IAEA,IAAAhC,WAAA,CAAAyC,KAAA;MACA,MAAAzB,IAAA,GAAAhB,WAAA,CAAAuC,SAAA;MACA,MAAAJ,IAAA;QACAnB,IAAA,EAAAhB,WAAA,CAAAyC,KAAA;QACAhB,KAAA,EAAAzB,WAAA,CAAAoB,IAAA;QACAO,cAAA;QACAC;MACA;MAEA,MAAAb,UAAA;QACAtB,QAAA;QACAuB,IAAA;QACApB,KAAA;QACAF,IAAA;MACA;MAEApB,MAAA,CAAA+D,IAAA,oCAAAtB,UAAA,EAAAoB,IAAA;MAEA3C,aAAA,CAAAuB,UAAA,EAAAoB,IAAA;IACA;MACA,MAAAO,QAAA,GAAA1C,WAAA,CAAA0C,QAAA;MACA,MAAA1B,IAAA;QACA,GAAAhB,WAAA,CAAAuC,SAAA;QACAN,WAAA,EAAAS,QAAA,EAAAC;MACA;MAEA3C,WAAA,CAAAuC,SAAA,CAAAK,iBAAA;MACA5C,WAAA,CAAAuC,SAAA,CAAAM,kBAAA;MACAH,QAAA,EAAAC,MAAA;MAEA,MAAAR,IAAA;QACAV,KAAA,EAAAzB,WAAA,CAAAoB,IAAA;QACAsB,QAAA;QACAf,cAAA;QACAC;MACA;MAEA,MAAAb,UAAA;QACAtB,QAAA;QACAuB,IAAA;QACAtB,IAAA;QACAE,KAAA,EAAAwC,uCAAA,CAAApB,IAAA,CAAAiB,WAAA;MACA;MAEA3D,MAAA,CAAA+D,IAAA,oCAAAtB,UAAA,EAAAoB,IAAA;MAEA3C,aAAA,CAAAuB,UAAA,EAAAoB,IAAA;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA,SAAAnD,6BAAAV,MAAA;EACA,gBAAAwE,mBAAA9C,WAAA;IACA,IAAAT,SAAA,OAAAjB,MAAA;MACA;IACA;IAEA,IAAAyE,IAAA,GAAA/C,WAAA,CAAA+C,IAAA;IACA,IAAAC,EAAA,GAAAhD,WAAA,CAAAgD,EAAA;IACA,MAAAC,SAAA,GAAAC,QAAA,CAAAC,MAAA,CAAAC,QAAA,CAAAC,IAAA;IACA,IAAAC,UAAA,GAAAP,IAAA,GAAAG,QAAA,CAAAH,IAAA,IAAA1C,SAAA;IACA,MAAAkD,QAAA,GAAAL,QAAA,CAAAF,EAAA;;IAEA;IACA,KAAAM,UAAA,EAAAE,IAAA;MACAF,UAAA,GAAAL,SAAA;IACA;;IAEA;IACA;IACA,IAAAA,SAAA,CAAAQ,QAAA,KAAAF,QAAA,CAAAE,QAAA,IAAAR,SAAA,CAAAS,IAAA,KAAAH,QAAA,CAAAG,IAAA;MACAV,EAAA,GAAAO,QAAA,CAAAI,QAAA;IACA;IACA,IAAAV,SAAA,CAAAQ,QAAA,KAAAH,UAAA,CAAAG,QAAA,IAAAR,SAAA,CAAAS,IAAA,KAAAJ,UAAA,CAAAI,IAAA;MACAX,IAAA,GAAAO,UAAA,CAAAK,QAAA;IACA;IAEAnE,aAAA;MACAC,QAAA;MACAuB,IAAA;QACA+B,IAAA;QACAC;MACA;IACA;EACA;AACA;AAEA,SAAArC,SAAArB,KAAA;EACA,SAAAA,KAAA,MAAAA,KAAA,CAAAW,MAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}