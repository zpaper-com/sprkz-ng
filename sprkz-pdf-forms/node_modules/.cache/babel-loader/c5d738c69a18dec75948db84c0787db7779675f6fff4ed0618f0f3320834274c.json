{"ast":null,"code":"import { debug, getCurrentScope, getClient, lastEventId, getReportDialogEndpoint } from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { WINDOW } from './helpers.js';\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the current scope.\n */\nfunction showReportDialog(options = {}) {\n  const optionalDocument = WINDOW.document;\n  const injectionPoint = optionalDocument?.head || optionalDocument?.body;\n\n  // doesn't work without a document (React Native)\n  if (!injectionPoint) {\n    DEBUG_BUILD && debug.error('[showReportDialog] Global document not defined');\n    return;\n  }\n  const scope = getCurrentScope();\n  const client = getClient();\n  const dsn = client?.getDsn();\n  if (!dsn) {\n    DEBUG_BUILD && debug.error('[showReportDialog] DSN not configured');\n    return;\n  }\n  const mergedOptions = {\n    ...options,\n    user: {\n      ...scope.getUser(),\n      ...options.user\n    },\n    eventId: options.eventId || lastEventId()\n  };\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.crossOrigin = 'anonymous';\n  script.src = getReportDialogEndpoint(dsn, mergedOptions);\n  const {\n    onLoad,\n    onClose\n  } = mergedOptions;\n  if (onLoad) {\n    script.onload = onLoad;\n  }\n  if (onClose) {\n    const reportDialogClosedMessageHandler = event => {\n      if (event.data === '__sentry_reportdialog_closed__') {\n        try {\n          onClose();\n        } finally {\n          WINDOW.removeEventListener('message', reportDialogClosedMessageHandler);\n        }\n      }\n    };\n    WINDOW.addEventListener('message', reportDialogClosedMessageHandler);\n  }\n  injectionPoint.appendChild(script);\n}\nexport { showReportDialog };","map":{"version":3,"names":["showReportDialog","options","optionalDocument","WINDOW","document","injectionPoint","head","body","DEBUG_BUILD","debug","error","scope","getCurrentScope","client","getClient","dsn","getDsn","mergedOptions","user","getUser","eventId","lastEventId","script","createElement","async","crossOrigin","src","getReportDialogEndpoint","onLoad","onClose","onload","reportDialogClosedMessageHandler","event","data","removeEventListener","addEventListener","appendChild"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/report-dialog.ts"],"sourcesContent":["import type { ReportDialogOptions } from '@sentry/core';\nimport { debug, getClient, getCurrentScope, getReportDialogEndpoint, lastEventId } from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build';\nimport { WINDOW } from './helpers';\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the current scope.\n */\nexport function showReportDialog(options: ReportDialogOptions = {}): void {\n  const optionalDocument = WINDOW.document as Document | undefined;\n  const injectionPoint = optionalDocument?.head || optionalDocument?.body;\n\n  // doesn't work without a document (React Native)\n  if (!injectionPoint) {\n    DEBUG_BUILD && debug.error('[showReportDialog] Global document not defined');\n    return;\n  }\n\n  const scope = getCurrentScope();\n  const client = getClient();\n  const dsn = client?.getDsn();\n\n  if (!dsn) {\n    DEBUG_BUILD && debug.error('[showReportDialog] DSN not configured');\n    return;\n  }\n\n  const mergedOptions = {\n    ...options,\n    user: {\n      ...scope.getUser(),\n      ...options.user,\n    },\n    eventId: options.eventId || lastEventId(),\n  };\n\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.crossOrigin = 'anonymous';\n  script.src = getReportDialogEndpoint(dsn, mergedOptions);\n\n  const { onLoad, onClose } = mergedOptions;\n\n  if (onLoad) {\n    script.onload = onLoad;\n  }\n\n  if (onClose) {\n    const reportDialogClosedMessageHandler = (event: MessageEvent): void => {\n      if (event.data === '__sentry_reportdialog_closed__') {\n        try {\n          onClose();\n        } finally {\n          WINDOW.removeEventListener('message', reportDialogClosedMessageHandler);\n        }\n      }\n    };\n    WINDOW.addEventListener('message', reportDialogClosedMessageHandler);\n  }\n\n  injectionPoint.appendChild(script);\n}\n"],"mappings":";;;;AAKA;AACA;AACA;AACA;AACA;AACO,SAASA,gBAAgBA,CAACC,OAAO,GAAwB,EAAE,EAAQ;EACxE,MAAMC,gBAAA,GAAmBC,MAAM,CAACC,QAAA;EAChC,MAAMC,cAAA,GAAiBH,gBAAgB,EAAEI,IAAA,IAAQJ,gBAAgB,EAAEK,IAAI;;EAEzE;EACE,IAAI,CAACF,cAAc,EAAE;IACnBG,WAAA,IAAeC,KAAK,CAACC,KAAK,CAAC,gDAAgD,CAAC;IAC5E;EACJ;EAEE,MAAMC,KAAA,GAAQC,eAAe,EAAE;EAC/B,MAAMC,MAAA,GAASC,SAAS,EAAE;EAC1B,MAAMC,GAAA,GAAMF,MAAM,EAAEG,MAAM,EAAE;EAE5B,IAAI,CAACD,GAAG,EAAE;IACRP,WAAA,IAAeC,KAAK,CAACC,KAAK,CAAC,uCAAuC,CAAC;IACnE;EACJ;EAEE,MAAMO,aAAA,GAAgB;IACpB,GAAGhB,OAAO;IACViB,IAAI,EAAE;MACJ,GAAGP,KAAK,CAACQ,OAAO,EAAE;MAClB,GAAGlB,OAAO,CAACiB;IACjB,CAAK;IACDE,OAAO,EAAEnB,OAAO,CAACmB,OAAA,IAAWC,WAAW;EAC3C,CAAG;EAED,MAAMC,MAAA,GAASnB,MAAM,CAACC,QAAQ,CAACmB,aAAa,CAAC,QAAQ,CAAC;EACtDD,MAAM,CAACE,KAAA,GAAQ,IAAI;EACnBF,MAAM,CAACG,WAAA,GAAc,WAAW;EAChCH,MAAM,CAACI,GAAA,GAAMC,uBAAuB,CAACZ,GAAG,EAAEE,aAAa,CAAC;EAExD,MAAM;IAAEW,MAAM;IAAEC;EAAA,CAAQ,GAAIZ,aAAa;EAEzC,IAAIW,MAAM,EAAE;IACVN,MAAM,CAACQ,MAAA,GAASF,MAAM;EAC1B;EAEE,IAAIC,OAAO,EAAE;IACX,MAAME,gCAAA,GAAoCC,KAAK,IAAyB;MACtE,IAAIA,KAAK,CAACC,IAAA,KAAS,gCAAgC,EAAE;QACnD,IAAI;UACFJ,OAAO,EAAE;QACnB,UAAkB;UACR1B,MAAM,CAAC+B,mBAAmB,CAAC,SAAS,EAAEH,gCAAgC,CAAC;QACjF;MACA;IACA,CAAK;IACD5B,MAAM,CAACgC,gBAAgB,CAAC,SAAS,EAAEJ,gCAAgC,CAAC;EACxE;EAEE1B,cAAc,CAAC+B,WAAW,CAACd,MAAM,CAAC;AACpC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}