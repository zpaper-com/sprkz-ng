{"ast":null,"code":"import*as Sentry from'@sentry/react';// Sentry configuration for error tracking and performance monitoring\nexport const initSentry=()=>{// Only initialize in production or when explicitly enabled\nconst isDevelopment=process.env.NODE_ENV==='development';const sentryDsn=process.env.REACT_APP_SENTRY_DSN;const enableInDev=process.env.REACT_APP_SENTRY_ENABLE_DEV==='true';if(!sentryDsn||isDevelopment&&!enableInDev){console.log('Sentry not initialized:',{hasDsn:!!sentryDsn,isDevelopment,enableInDev});return;}Sentry.init({dsn:sentryDsn,environment:process.env.REACT_APP_SENTRY_ENVIRONMENT||process.env.NODE_ENV,release:process.env.REACT_APP_VERSION||'development',// Performance Monitoring\nintegrations:[Sentry.browserTracingIntegration({// Capture interactions and navigation\ntracePropagationTargets:[window.location.hostname,/^https:\\/\\/api\\.sprkz\\.com/,/^https:\\/\\/unleash\\./]})],// Performance sampling\ntracesSampleRate:isDevelopment?1.0:0.1,// Error sampling\nsampleRate:1.0,// Session sampling\nreplaysSessionSampleRate:isDevelopment?1.0:0.1,replaysOnErrorSampleRate:1.0,// Additional configuration\nbeforeSend(event,hint){// Filter out development errors we don't want to track\nif(isDevelopment){const error=hint.originalException;// Filter out React warnings in development\nif(error&&error instanceof Error){if(error.message.includes('Warning:')){return null;}}}// Filter out network errors for external resources\nif(event.exception){var _event$exception$valu,_exception$value,_exception$value2;const exception=(_event$exception$valu=event.exception.values)===null||_event$exception$valu===void 0?void 0:_event$exception$valu[0];if(exception!==null&&exception!==void 0&&(_exception$value=exception.value)!==null&&_exception$value!==void 0&&_exception$value.includes('NetworkError')||exception!==null&&exception!==void 0&&(_exception$value2=exception.value)!==null&&_exception$value2!==void 0&&_exception$value2.includes('Failed to fetch')){return null;}}return event;},// User context\nbeforeBreadcrumb(breadcrumb){var _breadcrumb$data,_breadcrumb$data$url;// Filter out noisy breadcrumbs\nif(breadcrumb.category==='console'&&breadcrumb.level==='debug'){return null;}if(breadcrumb.category==='xhr'&&(_breadcrumb$data=breadcrumb.data)!==null&&_breadcrumb$data!==void 0&&(_breadcrumb$data$url=_breadcrumb$data.url)!==null&&_breadcrumb$data$url!==void 0&&_breadcrumb$data$url.includes('/health')){return null;}return breadcrumb;},// Tags for better organization\ninitialScope:{tags:{component:'sprkz-pdf-forms',version:process.env.REACT_APP_VERSION||'development'}}});console.log('Sentry initialized successfully',{environment:process.env.REACT_APP_SENTRY_ENVIRONMENT,release:process.env.REACT_APP_VERSION,tracesSampleRate:isDevelopment?1.0:0.1});return true;};// React Error Boundary integration\nexport const ErrorBoundary=Sentry.withErrorBoundary;// Performance transaction helpers using new Sentry API\nexport const performance={// Start a performance transaction\nstartTransaction:function(name){let op=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'navigation';return Sentry.startSpan({name,op,attributes:{component:'sprkz-pdf-forms'}},span=>span);},// Measure function performance\nmeasureFunction:async(name,fn,tags)=>{return await Sentry.startSpan({name,op:'function',attributes:{component:'sprkz-pdf-forms',...tags}},async()=>{try{const result=await fn();return result;}catch(error){Sentry.captureException(error);throw error;}});},// Add spans to existing transaction\naddSpan:function(description){let op=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'http';const activeSpan=Sentry.getActiveSpan();if(activeSpan){return Sentry.startInactiveSpan({name:description,op});}return null;}};// PDF-specific error tracking\nexport const pdfErrors={// Track PDF loading errors\ntrackLoadError:(url,error)=>{Sentry.captureException(error,{tags:{errorType:'pdf_load_error',pdfUrl:url},extra:{url,errorMessage:error.message}});},// Track form field extraction errors\ntrackFieldExtractionError:(pdfUrl,error)=>{Sentry.captureException(error,{tags:{errorType:'field_extraction_error'},extra:{pdfUrl,errorMessage:error.message}});},// Track signature creation errors\ntrackSignatureError:(signatureType,error)=>{Sentry.captureException(error,{tags:{errorType:'signature_error',signatureType},extra:{signatureType,errorMessage:error.message}});},// Track form submission errors\ntrackSubmissionError:(formData,error)=>{Sentry.captureException(error,{tags:{errorType:'form_submission_error'},extra:{fieldCount:Object.keys(formData).length,errorMessage:error.message,// Don't send actual form data for privacy\nhasSignature:Object.values(formData).some(v=>typeof v==='object'&&(v===null||v===void 0?void 0:v.type)==='signature')}});}};// Feature flag error tracking\nexport const featureFlagErrors={// Track feature flag initialization errors\ntrackInitError:error=>{Sentry.captureException(error,{tags:{errorType:'feature_flag_init_error'}});},// Track flag evaluation errors\ntrackEvaluationError:(flagName,error)=>{Sentry.captureException(error,{tags:{errorType:'feature_flag_evaluation_error',flagName}});}};// User interaction tracking\nexport const userInteractions={// Track wizard navigation\ntrackWizardNavigation:(action,fieldIndex)=>{Sentry.addBreadcrumb({message:`Wizard ${action}`,category:'user-interaction',data:{action,fieldIndex}});},// Track signature creation\ntrackSignatureCreation:type=>{Sentry.addBreadcrumb({message:'Signature created',category:'user-interaction',data:{signatureType:type}});},// Track form completion\ntrackFormCompletion:(fieldCount,completionTime)=>{Sentry.captureMessage('Form completed',{level:'info',tags:{eventType:'form_completion'},extra:{fieldCount,completionTimeMs:completionTime}});}};// Validation error tracking\nexport const validationErrors={// Track validation failures\ntrackValidationError:(fieldName,errors)=>{Sentry.addBreadcrumb({message:'Field validation failed',category:'validation',data:{fieldName,errors}});},// Track form-wide validation issues\ntrackFormValidationError:fieldErrors=>{const errorCount=Object.keys(fieldErrors).length;const totalErrors=Object.values(fieldErrors).flat().length;Sentry.captureMessage('Form validation failed',{level:'warning',tags:{eventType:'form_validation_error'},extra:{fieldsWithErrors:errorCount,totalErrors,fieldNames:Object.keys(fieldErrors)}});}};export default Sentry;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}