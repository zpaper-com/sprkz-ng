{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { CacheProvider } from '@emotion/react';\nimport createCache from '@emotion/cache';\nimport { StyleSheet } from '@emotion/sheet';\n\n// To fix [Jest performance](https://github.com/mui/material-ui/issues/45638).\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nconst cacheMap = new Map();\n\n// Need to add a private variable to test the generated CSS from Emotion, this is the simplest way to do it.\n// We can't test the CSS from `style` tag easily because the `speedy: true` (produce empty text content) is enabled by Emotion.\n// Even if we disable it, JSDOM needs extra configuration to be able to parse `@layer` CSS.\nexport const TEST_INTERNALS_DO_NOT_USE = {\n  /**\n   * to intercept the generated CSS before inserting to the style tag, so that we can check the generated CSS.\n   *\n   * let rule;\n   * TEST_INTERNALS_DO_NOT_USE.insert = (...args) => {\n   *    rule = args[0];\n   * };\n   *\n   * expect(rule).to.equal(...);\n   */\n  insert: undefined\n};\n\n// We might be able to remove this when this issue is fixed:\n// https://github.com/emotion-js/emotion/issues/2790\nconst createEmotionCache = (options, CustomSheet) => {\n  const cache = createCache(options);\n\n  // Do the same as https://github.com/emotion-js/emotion/blob/main/packages/cache/src/index.js#L238-L245\n  cache.sheet = new CustomSheet({\n    key: cache.key,\n    nonce: cache.sheet.nonce,\n    container: cache.sheet.container,\n    speedy: cache.sheet.isSpeedy,\n    prepend: cache.sheet.prepend,\n    insertionPoint: cache.sheet.insertionPoint\n  });\n  return cache;\n};\nlet insertionPoint;\nif (typeof document === 'object') {\n  // Use `insertionPoint` over `prepend`(deprecated) because it can be controlled for GlobalStyles injection order\n  // For more information, see https://github.com/mui/material-ui/issues/44597\n  insertionPoint = document.querySelector('[name=\"emotion-insertion-point\"]');\n  if (!insertionPoint) {\n    insertionPoint = document.createElement('meta');\n    insertionPoint.setAttribute('name', 'emotion-insertion-point');\n    insertionPoint.setAttribute('content', '');\n    const head = document.querySelector('head');\n    if (head) {\n      head.prepend(insertionPoint);\n    }\n  }\n}\nfunction getCache(injectFirst, enableCssLayer) {\n  if (injectFirst || enableCssLayer) {\n    /**\n     * This is for client-side apps only.\n     * A custom sheet is required to make the GlobalStyles API injected above the insertion point.\n     * This is because the [sheet](https://github.com/emotion-js/emotion/blob/main/packages/react/src/global.js#L94-L99) does not consume the options.\n     */\n    class MyStyleSheet extends StyleSheet {\n      insert(rule, options) {\n        if (TEST_INTERNALS_DO_NOT_USE.insert) {\n          return TEST_INTERNALS_DO_NOT_USE.insert(rule, options);\n        }\n        if (this.key && this.key.endsWith('global')) {\n          this.before = insertionPoint;\n        }\n        return super.insert(rule, options);\n      }\n    }\n    const emotionCache = createEmotionCache({\n      key: 'css',\n      insertionPoint: injectFirst ? insertionPoint : undefined\n    }, MyStyleSheet);\n    if (enableCssLayer) {\n      const prevInsert = emotionCache.insert;\n      emotionCache.insert = (...args) => {\n        if (!args[1].styles.match(/^@layer\\s+[^{]*$/)) {\n          // avoid nested @layer\n          args[1].styles = `@layer mui {${args[1].styles}}`;\n        }\n        return prevInsert(...args);\n      };\n    }\n    return emotionCache;\n  }\n  return undefined;\n}\nexport default function StyledEngineProvider(props) {\n  const {\n    injectFirst,\n    enableCssLayer,\n    children\n  } = props;\n  const cache = React.useMemo(() => {\n    const cacheKey = `${injectFirst}-${enableCssLayer}`;\n    if (typeof document === 'object' && cacheMap.has(cacheKey)) {\n      return cacheMap.get(cacheKey);\n    }\n    const fresh = getCache(injectFirst, enableCssLayer);\n    cacheMap.set(cacheKey, fresh);\n    return fresh;\n  }, [injectFirst, enableCssLayer]);\n  return cache ? /*#__PURE__*/_jsx(CacheProvider, {\n    value: cache,\n    children: children\n  }) : children;\n}\nprocess.env.NODE_ENV !== \"production\" ? StyledEngineProvider.propTypes = {\n  /**\n   * Your component tree.\n   */\n  children: PropTypes.node,\n  /**\n   * If `true`, the styles are wrapped in `@layer mui`.\n   * Learn more about [Cascade layers](https://developer.mozilla.org/en-US/docs/Learn_web_development/Core/Styling_basics/Cascade_layers).\n   */\n  enableCssLayer: PropTypes.bool,\n  /**\n   * By default, the styles are injected last in the <head> element of the page.\n   * As a result, they gain more specificity than any other style sheet.\n   * If you want to override MUI's styles, set this prop.\n   */\n  injectFirst: PropTypes.bool\n} : void 0;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}