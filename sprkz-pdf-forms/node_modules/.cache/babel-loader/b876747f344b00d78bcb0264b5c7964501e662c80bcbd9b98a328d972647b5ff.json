{"ast":null,"code":"import { defineIntegration, fill, getFunctionName, getOriginalFunction } from '@sentry/core';\nimport { WINDOW, wrap } from '../helpers.js';\nconst DEFAULT_EVENT_TARGET = ['EventTarget', 'Window', 'Node', 'ApplicationCache', 'AudioTrackList', 'BroadcastChannel', 'ChannelMergerNode', 'CryptoOperation', 'EventSource', 'FileReader', 'HTMLUnknownElement', 'IDBDatabase', 'IDBRequest', 'IDBTransaction', 'KeyOperation', 'MediaController', 'MessagePort', 'ModalWindow', 'Notification', 'SVGElementInstance', 'Screen', 'SharedWorker', 'TextTrack', 'TextTrackCue', 'TextTrackList', 'WebSocket', 'WebSocketWorker', 'Worker', 'XMLHttpRequest', 'XMLHttpRequestEventTarget', 'XMLHttpRequestUpload'];\nconst INTEGRATION_NAME = 'BrowserApiErrors';\nconst _browserApiErrorsIntegration = (options = {}) => {\n  const _options = {\n    XMLHttpRequest: true,\n    eventTarget: true,\n    requestAnimationFrame: true,\n    setInterval: true,\n    setTimeout: true,\n    unregisterOriginalCallbacks: false,\n    ...options\n  };\n  return {\n    name: INTEGRATION_NAME,\n    // TODO: This currently only works for the first client this is setup\n    // We may want to adjust this to check for client etc.\n    setupOnce() {\n      if (_options.setTimeout) {\n        fill(WINDOW, 'setTimeout', _wrapTimeFunction);\n      }\n      if (_options.setInterval) {\n        fill(WINDOW, 'setInterval', _wrapTimeFunction);\n      }\n      if (_options.requestAnimationFrame) {\n        fill(WINDOW, 'requestAnimationFrame', _wrapRAF);\n      }\n      if (_options.XMLHttpRequest && 'XMLHttpRequest' in WINDOW) {\n        fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n      }\n      const eventTargetOption = _options.eventTarget;\n      if (eventTargetOption) {\n        const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n        eventTarget.forEach(target => _wrapEventTarget(target, _options));\n      }\n    }\n  };\n};\n\n/**\n * Wrap timer functions and event targets to catch errors and provide better meta data.\n */\nconst browserApiErrorsIntegration = defineIntegration(_browserApiErrorsIntegration);\nfunction _wrapTimeFunction(original) {\n  return function (...args) {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: {\n          function: getFunctionName(original)\n        },\n        handled: false,\n        type: 'instrument'\n      }\n    });\n    return original.apply(this, args);\n  };\n}\nfunction _wrapRAF(original) {\n  return function (callback) {\n    return original.apply(this, [wrap(callback, {\n      mechanism: {\n        data: {\n          function: 'requestAnimationFrame',\n          handler: getFunctionName(original)\n        },\n        handled: false,\n        type: 'instrument'\n      }\n    })]);\n  };\n}\nfunction _wrapXHR(originalSend) {\n  return function (...args) {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        fill(xhr, prop, function (original) {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original)\n              },\n              handled: false,\n              type: 'instrument'\n            }\n          };\n\n          // If Instrument integration has been called before BrowserApiErrors, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n    return originalSend.apply(this, args);\n  };\n}\nfunction _wrapEventTarget(target, integrationOptions) {\n  const globalObject = WINDOW;\n  const proto = globalObject[target]?.prototype;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (!proto?.hasOwnProperty?.('addEventListener')) {\n    return;\n  }\n  fill(proto, 'addEventListener', function (original) {\n    return function (eventName, fn, options) {\n      try {\n        if (isEventListenerObject(fn)) {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target\n              },\n              handled: false,\n              type: 'instrument'\n            }\n          });\n        }\n      } catch {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n      if (integrationOptions.unregisterOriginalCallbacks) {\n        unregisterOriginalCallback(this, eventName, fn);\n      }\n      return original.apply(this, [eventName, wrap(fn, {\n        mechanism: {\n          data: {\n            function: 'addEventListener',\n            handler: getFunctionName(fn),\n            target\n          },\n          handled: false,\n          type: 'instrument'\n        }\n      }), options]);\n    };\n  });\n  fill(proto, 'removeEventListener', function (originalRemoveEventListener) {\n    return function (eventName, fn, options) {\n      /**\n       * There are 2 possible scenarios here:\n       *\n       * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n       * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n       * as a pass-through, and call original `removeEventListener` with it.\n       *\n       * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n       * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n       * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n       * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n       * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n       *\n       * When someone adds a handler prior to initialization, and then do it again, but after,\n       * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n       * to get rid of the initial handler and it'd stick there forever.\n       */\n      try {\n        const originalEventHandler = fn.__sentry_wrapped__;\n        if (originalEventHandler) {\n          originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n        }\n      } catch {\n        // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n      }\n      return originalRemoveEventListener.call(this, eventName, fn, options);\n    };\n  });\n}\nfunction isEventListenerObject(obj) {\n  return typeof obj.handleEvent === 'function';\n}\nfunction unregisterOriginalCallback(target, eventName, fn) {\n  if (target && typeof target === 'object' && 'removeEventListener' in target && typeof target.removeEventListener === 'function') {\n    target.removeEventListener(eventName, fn);\n  }\n}\nexport { browserApiErrorsIntegration };","map":{"version":3,"names":["DEFAULT_EVENT_TARGET","INTEGRATION_NAME","_browserApiErrorsIntegration","options","_options","XMLHttpRequest","eventTarget","requestAnimationFrame","setInterval","setTimeout","unregisterOriginalCallbacks","name","setupOnce","fill","WINDOW","_wrapTimeFunction","_wrapRAF","prototype","_wrapXHR","eventTargetOption","Array","isArray","forEach","target","_wrapEventTarget","browserApiErrorsIntegration","defineIntegration","original","args","originalCallback","wrap","mechanism","data","function","getFunctionName","handled","type","apply","callback","handler","originalSend","xhr","xmlHttpRequestProps","prop","wrapOptions","originalFunction","getOriginalFunction","integrationOptions","globalObject","proto","hasOwnProperty","eventName","fn","isEventListenerObject","handleEvent","unregisterOriginalCallback","originalRemoveEventListener","originalEventHandler","__sentry_wrapped__","call","obj","removeEventListener"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/integrations/browserapierrors.ts"],"sourcesContent":["import type { IntegrationFn, WrappedFunction } from '@sentry/core';\nimport { defineIntegration, fill, getFunctionName, getOriginalFunction } from '@sentry/core';\nimport { WINDOW, wrap } from '../helpers';\n\nconst DEFAULT_EVENT_TARGET = [\n  'EventTarget',\n  'Window',\n  'Node',\n  'ApplicationCache',\n  'AudioTrackList',\n  'BroadcastChannel',\n  'ChannelMergerNode',\n  'CryptoOperation',\n  'EventSource',\n  'FileReader',\n  'HTMLUnknownElement',\n  'IDBDatabase',\n  'IDBRequest',\n  'IDBTransaction',\n  'KeyOperation',\n  'MediaController',\n  'MessagePort',\n  'ModalWindow',\n  'Notification',\n  'SVGElementInstance',\n  'Screen',\n  'SharedWorker',\n  'TextTrack',\n  'TextTrackCue',\n  'TextTrackList',\n  'WebSocket',\n  'WebSocketWorker',\n  'Worker',\n  'XMLHttpRequest',\n  'XMLHttpRequestEventTarget',\n  'XMLHttpRequestUpload',\n];\n\nconst INTEGRATION_NAME = 'BrowserApiErrors';\n\ntype XMLHttpRequestProp = 'onload' | 'onerror' | 'onprogress' | 'onreadystatechange';\n\ninterface BrowserApiErrorsOptions {\n  setTimeout: boolean;\n  setInterval: boolean;\n  requestAnimationFrame: boolean;\n  XMLHttpRequest: boolean;\n  eventTarget: boolean | string[];\n\n  /**\n   * If you experience issues with this integration causing double-invocations of event listeners,\n   * try setting this option to `true`. It will unregister the original callbacks from the event targets\n   * before adding the instrumented callback.\n   *\n   * @default false\n   */\n  unregisterOriginalCallbacks: boolean;\n}\n\nconst _browserApiErrorsIntegration = ((options: Partial<BrowserApiErrorsOptions> = {}) => {\n  const _options = {\n    XMLHttpRequest: true,\n    eventTarget: true,\n    requestAnimationFrame: true,\n    setInterval: true,\n    setTimeout: true,\n    unregisterOriginalCallbacks: false,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO: This currently only works for the first client this is setup\n    // We may want to adjust this to check for client etc.\n    setupOnce() {\n      if (_options.setTimeout) {\n        fill(WINDOW, 'setTimeout', _wrapTimeFunction);\n      }\n\n      if (_options.setInterval) {\n        fill(WINDOW, 'setInterval', _wrapTimeFunction);\n      }\n\n      if (_options.requestAnimationFrame) {\n        fill(WINDOW, 'requestAnimationFrame', _wrapRAF);\n      }\n\n      if (_options.XMLHttpRequest && 'XMLHttpRequest' in WINDOW) {\n        fill(XMLHttpRequest.prototype, 'send', _wrapXHR);\n      }\n\n      const eventTargetOption = _options.eventTarget;\n      if (eventTargetOption) {\n        const eventTarget = Array.isArray(eventTargetOption) ? eventTargetOption : DEFAULT_EVENT_TARGET;\n        eventTarget.forEach(target => _wrapEventTarget(target, _options));\n      }\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Wrap timer functions and event targets to catch errors and provide better meta data.\n */\nexport const browserApiErrorsIntegration = defineIntegration(_browserApiErrorsIntegration);\n\nfunction _wrapTimeFunction(original: () => void): () => number {\n  return function (this: unknown, ...args: unknown[]): number {\n    const originalCallback = args[0];\n    args[0] = wrap(originalCallback, {\n      mechanism: {\n        data: { function: getFunctionName(original) },\n        handled: false,\n        type: 'instrument',\n      },\n    });\n    return original.apply(this, args);\n  };\n}\n\nfunction _wrapRAF(original: () => void): (callback: () => void) => unknown {\n  return function (this: unknown, callback: () => void): () => void {\n    return original.apply(this, [\n      wrap(callback, {\n        mechanism: {\n          data: {\n            function: 'requestAnimationFrame',\n            handler: getFunctionName(original),\n          },\n          handled: false,\n          type: 'instrument',\n        },\n      }),\n    ]);\n  };\n}\n\nfunction _wrapXHR(originalSend: () => void): () => void {\n  return function (this: XMLHttpRequest, ...args: unknown[]): void {\n    // eslint-disable-next-line @typescript-eslint/no-this-alias\n    const xhr = this;\n    const xmlHttpRequestProps: XMLHttpRequestProp[] = ['onload', 'onerror', 'onprogress', 'onreadystatechange'];\n\n    xmlHttpRequestProps.forEach(prop => {\n      if (prop in xhr && typeof xhr[prop] === 'function') {\n        fill(xhr, prop, function (original) {\n          const wrapOptions = {\n            mechanism: {\n              data: {\n                function: prop,\n                handler: getFunctionName(original),\n              },\n              handled: false,\n              type: 'instrument',\n            },\n          };\n\n          // If Instrument integration has been called before BrowserApiErrors, get the name of original function\n          const originalFunction = getOriginalFunction(original);\n          if (originalFunction) {\n            wrapOptions.mechanism.data.handler = getFunctionName(originalFunction);\n          }\n\n          // Otherwise wrap directly\n          return wrap(original, wrapOptions);\n        });\n      }\n    });\n\n    return originalSend.apply(this, args);\n  };\n}\n\nfunction _wrapEventTarget(target: string, integrationOptions: BrowserApiErrorsOptions): void {\n  const globalObject = WINDOW as unknown as Record<string, { prototype?: object }>;\n  const proto = globalObject[target]?.prototype;\n\n  // eslint-disable-next-line no-prototype-builtins\n  if (!proto?.hasOwnProperty?.('addEventListener')) {\n    return;\n  }\n\n  fill(proto, 'addEventListener', function (original: VoidFunction): (\n    ...args: Parameters<typeof WINDOW.addEventListener>\n  ) => ReturnType<typeof WINDOW.addEventListener> {\n    return function (this: unknown, eventName, fn, options): VoidFunction {\n      try {\n        if (isEventListenerObject(fn)) {\n          // ESlint disable explanation:\n          //  First, it is generally safe to call `wrap` with an unbound function. Furthermore, using `.bind()` would\n          //  introduce a bug here, because bind returns a new function that doesn't have our\n          //  flags(like __sentry_original__) attached. `wrap` checks for those flags to avoid unnecessary wrapping.\n          //  Without those flags, every call to addEventListener wraps the function again, causing a memory leak.\n          // eslint-disable-next-line @typescript-eslint/unbound-method\n          fn.handleEvent = wrap(fn.handleEvent, {\n            mechanism: {\n              data: {\n                function: 'handleEvent',\n                handler: getFunctionName(fn),\n                target,\n              },\n              handled: false,\n              type: 'instrument',\n            },\n          });\n        }\n      } catch {\n        // can sometimes get 'Permission denied to access property \"handle Event'\n      }\n\n      if (integrationOptions.unregisterOriginalCallbacks) {\n        unregisterOriginalCallback(this, eventName, fn);\n      }\n\n      return original.apply(this, [\n        eventName,\n        wrap(fn, {\n          mechanism: {\n            data: {\n              function: 'addEventListener',\n              handler: getFunctionName(fn),\n              target,\n            },\n            handled: false,\n            type: 'instrument',\n          },\n        }),\n        options,\n      ]);\n    };\n  });\n\n  fill(proto, 'removeEventListener', function (originalRemoveEventListener: VoidFunction): (\n    this: unknown,\n    ...args: Parameters<typeof WINDOW.removeEventListener>\n  ) => ReturnType<typeof WINDOW.removeEventListener> {\n    return function (this: unknown, eventName, fn, options): VoidFunction {\n      /**\n       * There are 2 possible scenarios here:\n       *\n       * 1. Someone passes a callback, which was attached prior to Sentry initialization, or by using unmodified\n       * method, eg. `document.addEventListener.call(el, name, handler). In this case, we treat this function\n       * as a pass-through, and call original `removeEventListener` with it.\n       *\n       * 2. Someone passes a callback, which was attached after Sentry was initialized, which means that it was using\n       * our wrapped version of `addEventListener`, which internally calls `wrap` helper.\n       * This helper \"wraps\" whole callback inside a try/catch statement, and attached appropriate metadata to it,\n       * in order for us to make a distinction between wrapped/non-wrapped functions possible.\n       * If a function was wrapped, it has additional property of `__sentry_wrapped__`, holding the handler.\n       *\n       * When someone adds a handler prior to initialization, and then do it again, but after,\n       * then we have to detach both of them. Otherwise, if we'd detach only wrapped one, it'd be impossible\n       * to get rid of the initial handler and it'd stick there forever.\n       */\n      try {\n        const originalEventHandler = (fn as WrappedFunction).__sentry_wrapped__;\n        if (originalEventHandler) {\n          originalRemoveEventListener.call(this, eventName, originalEventHandler, options);\n        }\n      } catch {\n        // ignore, accessing __sentry_wrapped__ will throw in some Selenium environments\n      }\n      return originalRemoveEventListener.call(this, eventName, fn, options);\n    };\n  });\n}\n\nfunction isEventListenerObject(obj: unknown): obj is EventListenerObject {\n  return typeof (obj as EventListenerObject).handleEvent === 'function';\n}\n\nfunction unregisterOriginalCallback(target: unknown, eventName: string, fn: EventListenerOrEventListenerObject): void {\n  if (\n    target &&\n    typeof target === 'object' &&\n    'removeEventListener' in target &&\n    typeof target.removeEventListener === 'function'\n  ) {\n    target.removeEventListener(eventName, fn);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}