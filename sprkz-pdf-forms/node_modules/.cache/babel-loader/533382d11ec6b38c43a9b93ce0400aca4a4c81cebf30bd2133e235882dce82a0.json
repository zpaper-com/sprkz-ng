{"ast":null,"code":"import { getCurrentScope } from './currentScopes.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { debug, consoleSandbox } from './utils/debug-logger.js';\n\n/** A class object that can instantiate Client objects. */\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nfunction initAndBind(clientClass, options) {\n  if (options.debug === true) {\n    if (DEBUG_BUILD) {\n      debug.enable();\n    } else {\n      // use `console.warn` rather than `debug.warn` since by non-debug bundles have all `debug.x` statements stripped\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  client.init();\n  return client;\n}\n\n/**\n * Make the given client the current client.\n */\nfunction setCurrentClient(client) {\n  getCurrentScope().setClient(client);\n}\nexport { initAndBind, setCurrentClient };","map":{"version":3,"names":["initAndBind","clientClass","options","debug","DEBUG_BUILD","enable","consoleSandbox","console","warn","scope","getCurrentScope","update","initialScope","client","setCurrentClient","init","setClient"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/sdk.ts"],"sourcesContent":["import type { Client } from './client';\nimport { getCurrentScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { ClientOptions } from './types-hoist/options';\nimport { consoleSandbox, debug } from './utils/debug-logger';\n\n/** A class object that can instantiate Client objects. */\nexport type ClientClass<F extends Client, O extends ClientOptions> = new (options: O) => F;\n\n/**\n * Internal function to create a new SDK client instance. The client is\n * installed and then bound to the current scope.\n *\n * @param clientClass The client class to instantiate.\n * @param options Options to pass to the client.\n */\nexport function initAndBind<F extends Client, O extends ClientOptions>(\n  clientClass: ClientClass<F, O>,\n  options: O,\n): Client {\n  if (options.debug === true) {\n    if (DEBUG_BUILD) {\n      debug.enable();\n    } else {\n      // use `console.warn` rather than `debug.warn` since by non-debug bundles have all `debug.x` statements stripped\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.warn('[Sentry] Cannot initialize SDK with `debug` option using a non-debug bundle.');\n      });\n    }\n  }\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  const client = new clientClass(options);\n  setCurrentClient(client);\n  client.init();\n  return client;\n}\n\n/**\n * Make the given client the current client.\n */\nexport function setCurrentClient(client: Client): void {\n  getCurrentScope().setClient(client);\n}\n"],"mappings":";;;;AAMA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,WAAWA,CACzBC,WAAW,EACXC,OAAO,EACC;EACR,IAAIA,OAAO,CAACC,KAAA,KAAU,IAAI,EAAE;IAC1B,IAAIC,WAAW,EAAE;MACfD,KAAK,CAACE,MAAM,EAAE;IACpB,OAAW;MACX;MACMC,cAAc,CAAC,MAAM;QAC3B;QACQC,OAAO,CAACC,IAAI,CAAC,8EAA8E,CAAC;MACpG,CAAO,CAAC;IACR;EACA;EACE,MAAMC,KAAA,GAAQC,eAAe,EAAE;EAC/BD,KAAK,CAACE,MAAM,CAACT,OAAO,CAACU,YAAY,CAAC;EAElC,MAAMC,MAAA,GAAS,IAAIZ,WAAW,CAACC,OAAO,CAAC;EACvCY,gBAAgB,CAACD,MAAM,CAAC;EACxBA,MAAM,CAACE,IAAI,EAAE;EACb,OAAOF,MAAM;AACf;;AAEA;AACA;AACA;AACO,SAASC,gBAAgBA,CAACD,MAAM,EAAgB;EACrDH,eAAe,EAAE,CAACM,SAAS,CAACH,MAAM,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}