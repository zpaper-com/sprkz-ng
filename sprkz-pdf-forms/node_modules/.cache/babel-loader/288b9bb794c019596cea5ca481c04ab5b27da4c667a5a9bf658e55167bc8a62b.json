{"ast":null,"code":"import { getActiveSpan, getRootSpan, spanToJSON, debug, SPAN_STATUS_ERROR } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../helpers.js';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nfunction registerBackgroundTabDetection() {\n  if (WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      const activeSpan = getActiveSpan();\n      if (!activeSpan) {\n        return;\n      }\n      const rootSpan = getRootSpan(activeSpan);\n      if (WINDOW.document.hidden && rootSpan) {\n        const cancelledStatus = 'cancelled';\n        const {\n          op,\n          status\n        } = spanToJSON(rootSpan);\n        if (DEBUG_BUILD) {\n          debug.log(`[Tracing] Transaction: ${cancelledStatus} -> since tab moved to the background, op: ${op}`);\n        }\n\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!status) {\n          rootSpan.setStatus({\n            code: SPAN_STATUS_ERROR,\n            message: cancelledStatus\n          });\n        }\n        rootSpan.setAttribute('sentry.cancellation_reason', 'document.hidden');\n        rootSpan.end();\n      }\n    });\n  } else {\n    DEBUG_BUILD && debug.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\nexport { registerBackgroundTabDetection };","map":{"version":3,"names":["registerBackgroundTabDetection","WINDOW","document","addEventListener","activeSpan","getActiveSpan","rootSpan","getRootSpan","hidden","cancelledStatus","op","status","spanToJSON","DEBUG_BUILD","debug","log","setStatus","code","SPAN_STATUS_ERROR","message","setAttribute","end","warn"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/tracing/backgroundtab.ts"],"sourcesContent":["import { debug, getActiveSpan, getRootSpan, SPAN_STATUS_ERROR, spanToJSON } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\n\n/**\n * Add a listener that cancels and finishes a transaction when the global\n * document is hidden.\n */\nexport function registerBackgroundTabDetection(): void {\n  if (WINDOW.document) {\n    WINDOW.document.addEventListener('visibilitychange', () => {\n      const activeSpan = getActiveSpan();\n      if (!activeSpan) {\n        return;\n      }\n\n      const rootSpan = getRootSpan(activeSpan);\n\n      if (WINDOW.document.hidden && rootSpan) {\n        const cancelledStatus = 'cancelled';\n\n        const { op, status } = spanToJSON(rootSpan);\n\n        if (DEBUG_BUILD) {\n          debug.log(`[Tracing] Transaction: ${cancelledStatus} -> since tab moved to the background, op: ${op}`);\n        }\n\n        // We should not set status if it is already set, this prevent important statuses like\n        // error or data loss from being overwritten on transaction.\n        if (!status) {\n          rootSpan.setStatus({ code: SPAN_STATUS_ERROR, message: cancelledStatus });\n        }\n\n        rootSpan.setAttribute('sentry.cancellation_reason', 'document.hidden');\n        rootSpan.end();\n      }\n    });\n  } else {\n    DEBUG_BUILD && debug.warn('[Tracing] Could not set up background tab detection due to lack of global document');\n  }\n}\n"],"mappings":";;;;AAIA;AACA;AACA;AACA;AACO,SAASA,8BAA8BA,CAAA,EAAS;EACrD,IAAIC,MAAM,CAACC,QAAQ,EAAE;IACnBD,MAAM,CAACC,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;MACzD,MAAMC,UAAA,GAAaC,aAAa,EAAE;MAClC,IAAI,CAACD,UAAU,EAAE;QACf;MACR;MAEM,MAAME,QAAA,GAAWC,WAAW,CAACH,UAAU,CAAC;MAExC,IAAIH,MAAM,CAACC,QAAQ,CAACM,MAAA,IAAUF,QAAQ,EAAE;QACtC,MAAMG,eAAA,GAAkB,WAAW;QAEnC,MAAM;UAAEC,EAAE;UAAEC;QAAA,IAAWC,UAAU,CAACN,QAAQ,CAAC;QAE3C,IAAIO,WAAW,EAAE;UACfC,KAAK,CAACC,GAAG,CAAC,0BAA0BN,eAAe,8CAA8CC,EAAE,EAAC;QACA;;QAEA;QACA;QACA,KAAAC,MAAA;UACAL,QAAA,CAAAU,SAAA;YAAAC,IAAA,EAAAC,iBAAA;YAAAC,OAAA,EAAAV;UAAA;QACA;QAEAH,QAAA,CAAAc,YAAA;QACAd,QAAA,CAAAe,GAAA;MACA;IACA;EACA;IACAR,WAAA,IAAAC,KAAA,CAAAQ,IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}