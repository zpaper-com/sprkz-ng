{"ast":null,"code":"import { browserTracingIntegration, startBrowserTracingPageLoadSpan, startBrowserTracingNavigationSpan, WINDOW } from '@sentry/browser';\nimport { getCurrentScope, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_OP, getActiveSpan, getRootSpan, spanToJSON } from '@sentry/core';\nimport * as React from 'react';\nimport { hoistNonReactStatics } from './hoist-non-react-statics.js';\n\n// We need to disable eslint no-explicit-any because any is required for the\n// react-router typings.\n\n/**\n * A browser tracing integration that uses React Router v4 to instrument navigations.\n * Expects `history` (and optionally `routes` and `matchPath`) to be passed as options.\n */\nfunction reactRouterV4BrowserTracingIntegration(options) {\n  const integration = browserTracingIntegration({\n    ...options,\n    instrumentPageLoad: false,\n    instrumentNavigation: false\n  });\n  const {\n    history,\n    routes,\n    matchPath,\n    instrumentPageLoad = true,\n    instrumentNavigation = true\n  } = options;\n  return {\n    ...integration,\n    afterAllSetup(client) {\n      integration.afterAllSetup(client);\n      instrumentReactRouter(client, instrumentPageLoad, instrumentNavigation, history, 'reactrouter_v4', routes, matchPath);\n    }\n  };\n}\n\n/**\n * A browser tracing integration that uses React Router v5 to instrument navigations.\n * Expects `history` (and optionally `routes` and `matchPath`) to be passed as options.\n */\nfunction reactRouterV5BrowserTracingIntegration(options) {\n  const integration = browserTracingIntegration({\n    ...options,\n    instrumentPageLoad: false,\n    instrumentNavigation: false\n  });\n  const {\n    history,\n    routes,\n    matchPath,\n    instrumentPageLoad = true,\n    instrumentNavigation = true\n  } = options;\n  return {\n    ...integration,\n    afterAllSetup(client) {\n      integration.afterAllSetup(client);\n      instrumentReactRouter(client, instrumentPageLoad, instrumentNavigation, history, 'reactrouter_v5', routes, matchPath);\n    }\n  };\n}\nfunction instrumentReactRouter(client, instrumentPageLoad, instrumentNavigation, history, instrumentationName, allRoutes = [], matchPath) {\n  function getInitPathName() {\n    if (history.location) {\n      return history.location.pathname;\n    }\n    if (WINDOW.location) {\n      return WINDOW.location.pathname;\n    }\n    return undefined;\n  }\n\n  /**\n   * Normalizes a transaction name. Returns the new name as well as the\n   * source of the transaction.\n   *\n   * @param pathname The initial pathname we normalize\n   */\n  function normalizeTransactionName(pathname) {\n    if (allRoutes.length === 0 || !matchPath) {\n      return [pathname, 'url'];\n    }\n    const branches = matchRoutes(allRoutes, pathname, matchPath);\n    for (const branch of branches) {\n      if (branch.match.isExact) {\n        return [branch.match.path, 'route'];\n      }\n    }\n    return [pathname, 'url'];\n  }\n  if (instrumentPageLoad) {\n    const initPathName = getInitPathName();\n    if (initPathName) {\n      const [name, source] = normalizeTransactionName(initPathName);\n      startBrowserTracingPageLoadSpan(client, {\n        name,\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'pageload',\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: `auto.pageload.react.${instrumentationName}`,\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source\n        }\n      });\n    }\n  }\n  if (instrumentNavigation && history.listen) {\n    history.listen((location, action) => {\n      if (action && (action === 'PUSH' || action === 'POP')) {\n        const [name, source] = normalizeTransactionName(location.pathname);\n        startBrowserTracingNavigationSpan(client, {\n          name,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation',\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: `auto.navigation.react.${instrumentationName}`,\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source\n          }\n        });\n      }\n    });\n  }\n}\n\n/**\n * Matches a set of routes to a pathname\n * Based on implementation from\n */\nfunction matchRoutes(routes, pathname, matchPath, branch = []) {\n  routes.some(route => {\n    const match = route.path ? matchPath(pathname, route) : branch.length ?\n    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n    branch[branch.length - 1].match // use parent match\n    : computeRootMatch(pathname); // use default \"root\" match\n\n    if (match) {\n      branch.push({\n        route,\n        match\n      });\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, matchPath, branch);\n      }\n    }\n    return !!match;\n  });\n  return branch;\n}\nfunction computeRootMatch(pathname) {\n  return {\n    path: '/',\n    url: '/',\n    params: {},\n    isExact: pathname === '/'\n  };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\nfunction withSentryRouting(Route) {\n  const componentDisplayName = Route.displayName || Route.name;\n  const WrappedRoute = props => {\n    if (props?.computedMatch?.isExact) {\n      const route = props.computedMatch.path;\n      const activeRootSpan = getActiveRootSpan();\n      getCurrentScope().setTransactionName(route);\n      if (activeRootSpan) {\n        activeRootSpan.updateName(route);\n        activeRootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n      }\n    }\n\n    // @ts-expect-error Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params:\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n    return React.createElement(Route, {\n      ...props\n    });\n  };\n  WrappedRoute.displayName = `sentryRoute(${componentDisplayName})`;\n  hoistNonReactStatics(WrappedRoute, Route);\n  // @ts-expect-error Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params:\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n  return WrappedRoute;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n\nfunction getActiveRootSpan() {\n  const span = getActiveSpan();\n  const rootSpan = span && getRootSpan(span);\n  if (!rootSpan) {\n    return undefined;\n  }\n  const op = spanToJSON(rootSpan).op;\n\n  // Only use this root span if it is a pageload or navigation span\n  return op === 'navigation' || op === 'pageload' ? rootSpan : undefined;\n}\nexport { reactRouterV4BrowserTracingIntegration, reactRouterV5BrowserTracingIntegration, withSentryRouting };","map":{"version":3,"names":["reactRouterV4BrowserTracingIntegration","options","integration","browserTracingIntegration","instrumentPageLoad","instrumentNavigation","history","routes","matchPath","afterAllSetup","client","instrumentReactRouter","reactRouterV5BrowserTracingIntegration","instrumentationName","allRoutes","getInitPathName","location","pathname","WINDOW","undefined","normalizeTransactionName","length","branches","matchRoutes","branch","match","isExact","path","initPathName","name","source","startBrowserTracingPageLoadSpan","attributes","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","listen","action","startBrowserTracingNavigationSpan","some","route","computeRootMatch","push","url","params","withSentryRouting","Route","componentDisplayName","displayName","WrappedRoute","props","computedMatch","activeRootSpan","getActiveRootSpan","getCurrentScope","setTransactionName","updateName","setAttribute","React","createElement","hoistNonReactStatics","span","getActiveSpan","rootSpan","getRootSpan","op","spanToJSON"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/react/src/reactrouter.tsx"],"sourcesContent":["import {\n  browserTracingIntegration,\n  startBrowserTracingNavigationSpan,\n  startBrowserTracingPageLoadSpan,\n  WINDOW,\n} from '@sentry/browser';\nimport type { Client, Integration, Span, TransactionSource } from '@sentry/core';\nimport {\n  getActiveSpan,\n  getCurrentScope,\n  getRootSpan,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanToJSON,\n} from '@sentry/core';\nimport type { ReactElement } from 'react';\nimport * as React from 'react';\nimport { hoistNonReactStatics } from './hoist-non-react-statics';\nimport type { Action, Location } from './types';\n\n// We need to disable eslint no-explicit-any because any is required for the\n// react-router typings.\ntype Match = { path: string; url: string; params: Record<string, any>; isExact: boolean }; // eslint-disable-line @typescript-eslint/no-explicit-any\n\nexport type RouterHistory = {\n  location?: Location;\n  listen?(cb: (location: Location, action: Action) => void): void;\n} & Record<string, any>; // eslint-disable-line @typescript-eslint/no-explicit-any\n\nexport type RouteConfig = {\n  [propName: string]: unknown;\n  path?: string | string[];\n  exact?: boolean;\n  component?: ReactElement;\n  routes?: RouteConfig[];\n};\n\nexport type MatchPath = (pathname: string, props: string | string[] | any, parent?: Match | null) => Match | null; // eslint-disable-line @typescript-eslint/no-explicit-any\n\ninterface ReactRouterOptions {\n  history: RouterHistory;\n  routes?: RouteConfig[];\n  matchPath?: MatchPath;\n}\n\n/**\n * A browser tracing integration that uses React Router v4 to instrument navigations.\n * Expects `history` (and optionally `routes` and `matchPath`) to be passed as options.\n */\nexport function reactRouterV4BrowserTracingIntegration(\n  options: Parameters<typeof browserTracingIntegration>[0] & ReactRouterOptions,\n): Integration {\n  const integration = browserTracingIntegration({\n    ...options,\n    instrumentPageLoad: false,\n    instrumentNavigation: false,\n  });\n\n  const { history, routes, matchPath, instrumentPageLoad = true, instrumentNavigation = true } = options;\n\n  return {\n    ...integration,\n    afterAllSetup(client) {\n      integration.afterAllSetup(client);\n\n      instrumentReactRouter(\n        client,\n        instrumentPageLoad,\n        instrumentNavigation,\n        history,\n        'reactrouter_v4',\n        routes,\n        matchPath,\n      );\n    },\n  };\n}\n\n/**\n * A browser tracing integration that uses React Router v5 to instrument navigations.\n * Expects `history` (and optionally `routes` and `matchPath`) to be passed as options.\n */\nexport function reactRouterV5BrowserTracingIntegration(\n  options: Parameters<typeof browserTracingIntegration>[0] & ReactRouterOptions,\n): Integration {\n  const integration = browserTracingIntegration({\n    ...options,\n    instrumentPageLoad: false,\n    instrumentNavigation: false,\n  });\n\n  const { history, routes, matchPath, instrumentPageLoad = true, instrumentNavigation = true } = options;\n\n  return {\n    ...integration,\n    afterAllSetup(client) {\n      integration.afterAllSetup(client);\n\n      instrumentReactRouter(\n        client,\n        instrumentPageLoad,\n        instrumentNavigation,\n        history,\n        'reactrouter_v5',\n        routes,\n        matchPath,\n      );\n    },\n  };\n}\n\nfunction instrumentReactRouter(\n  client: Client,\n  instrumentPageLoad: boolean,\n  instrumentNavigation: boolean,\n  history: RouterHistory,\n  instrumentationName: string,\n  allRoutes: RouteConfig[] = [],\n  matchPath?: MatchPath,\n): void {\n  function getInitPathName(): string | undefined {\n    if (history.location) {\n      return history.location.pathname;\n    }\n\n    if (WINDOW.location) {\n      return WINDOW.location.pathname;\n    }\n\n    return undefined;\n  }\n\n  /**\n   * Normalizes a transaction name. Returns the new name as well as the\n   * source of the transaction.\n   *\n   * @param pathname The initial pathname we normalize\n   */\n  function normalizeTransactionName(pathname: string): [string, TransactionSource] {\n    if (allRoutes.length === 0 || !matchPath) {\n      return [pathname, 'url'];\n    }\n\n    const branches = matchRoutes(allRoutes, pathname, matchPath);\n    for (const branch of branches) {\n      if (branch.match.isExact) {\n        return [branch.match.path, 'route'];\n      }\n    }\n\n    return [pathname, 'url'];\n  }\n\n  if (instrumentPageLoad) {\n    const initPathName = getInitPathName();\n    if (initPathName) {\n      const [name, source] = normalizeTransactionName(initPathName);\n      startBrowserTracingPageLoadSpan(client, {\n        name,\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'pageload',\n          [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: `auto.pageload.react.${instrumentationName}`,\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n        },\n      });\n    }\n  }\n\n  if (instrumentNavigation && history.listen) {\n    history.listen((location, action) => {\n      if (action && (action === 'PUSH' || action === 'POP')) {\n        const [name, source] = normalizeTransactionName(location.pathname);\n        startBrowserTracingNavigationSpan(client, {\n          name,\n          attributes: {\n            [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'navigation',\n            [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: `auto.navigation.react.${instrumentationName}`,\n            [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n          },\n        });\n      }\n    });\n  }\n}\n\n/**\n * Matches a set of routes to a pathname\n * Based on implementation from\n */\nfunction matchRoutes(\n  routes: RouteConfig[],\n  pathname: string,\n  matchPath: MatchPath,\n  branch: Array<{ route: RouteConfig; match: Match }> = [],\n): Array<{ route: RouteConfig; match: Match }> {\n  routes.some(route => {\n    const match = route.path\n      ? matchPath(pathname, route)\n      : branch.length\n        ? // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n          branch[branch.length - 1]!.match // use parent match\n        : computeRootMatch(pathname); // use default \"root\" match\n\n    if (match) {\n      branch.push({ route, match });\n\n      if (route.routes) {\n        matchRoutes(route.routes, pathname, matchPath, branch);\n      }\n    }\n\n    return !!match;\n  });\n\n  return branch;\n}\n\nfunction computeRootMatch(pathname: string): Match {\n  return { path: '/', url: '/', params: {}, isExact: pathname === '/' };\n}\n\n/* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\nexport function withSentryRouting<P extends Record<string, any>, R extends React.ComponentType<P>>(Route: R): R {\n  const componentDisplayName = Route.displayName || Route.name;\n\n  const WrappedRoute: React.FC<P> = (props: P) => {\n    if (props?.computedMatch?.isExact) {\n      const route = props.computedMatch.path;\n      const activeRootSpan = getActiveRootSpan();\n\n      getCurrentScope().setTransactionName(route);\n\n      if (activeRootSpan) {\n        activeRootSpan.updateName(route);\n        activeRootSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n      }\n    }\n\n    // @ts-expect-error Setting more specific React Component typing for `R` generic above\n    // will break advanced type inference done by react router params:\n    // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n    return <Route {...props} />;\n  };\n\n  WrappedRoute.displayName = `sentryRoute(${componentDisplayName})`;\n  hoistNonReactStatics(WrappedRoute, Route);\n  // @ts-expect-error Setting more specific React Component typing for `R` generic above\n  // will break advanced type inference done by react router params:\n  // https://github.com/DefinitelyTyped/DefinitelyTyped/blob/13dc4235c069e25fe7ee16e11f529d909f9f3ff8/types/react-router/index.d.ts#L154-L164\n  return WrappedRoute;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n\nfunction getActiveRootSpan(): Span | undefined {\n  const span = getActiveSpan();\n  const rootSpan = span && getRootSpan(span);\n\n  if (!rootSpan) {\n    return undefined;\n  }\n\n  const op = spanToJSON(rootSpan).op;\n\n  // Only use this root span if it is a pageload or navigation span\n  return op === 'navigation' || op === 'pageload' ? rootSpan : undefined;\n}\n"],"mappings":";;;;;AAqBA;AACA;;AAwBA;AACA;AACA;AACA;AACO,SAASA,sCAAsCA,CACpDC,OAAO,EACM;EACb,MAAMC,WAAA,GAAcC,yBAAyB,CAAC;IAC5C,GAAGF,OAAO;IACVG,kBAAkB,EAAE,KAAK;IACzBC,oBAAoB,EAAE;EAC1B,CAAG,CAAC;EAEF,MAAM;IAAEC,OAAO;IAAEC,MAAM;IAAEC,SAAS;IAAEJ,kBAAA,GAAqB,IAAI;IAAEC,oBAAA,GAAuB;EAAA,CAAK,GAAIJ,OAAO;EAEtG,OAAO;IACL,GAAGC,WAAW;IACdO,aAAaA,CAACC,MAAM,EAAE;MACpBR,WAAW,CAACO,aAAa,CAACC,MAAM,CAAC;MAEjCC,qBAAqB,CACnBD,MAAM,EACNN,kBAAkB,EAClBC,oBAAoB,EACpBC,OAAO,EACP,gBAAgB,EAChBC,MAAM,EACNC,SACR,CAAO;IACP;EACA,CAAG;AACH;;AAEA;AACA;AACA;AACA;AACO,SAASI,sCAAsCA,CACpDX,OAAO,EACM;EACb,MAAMC,WAAA,GAAcC,yBAAyB,CAAC;IAC5C,GAAGF,OAAO;IACVG,kBAAkB,EAAE,KAAK;IACzBC,oBAAoB,EAAE;EAC1B,CAAG,CAAC;EAEF,MAAM;IAAEC,OAAO;IAAEC,MAAM;IAAEC,SAAS;IAAEJ,kBAAA,GAAqB,IAAI;IAAEC,oBAAA,GAAuB;EAAA,CAAK,GAAIJ,OAAO;EAEtG,OAAO;IACL,GAAGC,WAAW;IACdO,aAAaA,CAACC,MAAM,EAAE;MACpBR,WAAW,CAACO,aAAa,CAACC,MAAM,CAAC;MAEjCC,qBAAqB,CACnBD,MAAM,EACNN,kBAAkB,EAClBC,oBAAoB,EACpBC,OAAO,EACP,gBAAgB,EAChBC,MAAM,EACNC,SACR,CAAO;IACP;EACA,CAAG;AACH;AAEA,SAASG,qBAAqBA,CAC5BD,MAAM,EACNN,kBAAkB,EAClBC,oBAAoB,EACpBC,OAAO,EACPO,mBAAmB,EACnBC,SAAS,GAAkB,EAAE,EAC7BN,SAAS,EACH;EACN,SAASO,eAAeA,CAAA,EAAuB;IAC7C,IAAIT,OAAO,CAACU,QAAQ,EAAE;MACpB,OAAOV,OAAO,CAACU,QAAQ,CAACC,QAAQ;IACtC;IAEI,IAAIC,MAAM,CAACF,QAAQ,EAAE;MACnB,OAAOE,MAAM,CAACF,QAAQ,CAACC,QAAQ;IACrC;IAEI,OAAOE,SAAS;EACpB;;EAEA;AACA;AACA;AACA;AACA;AACA;EACE,SAASC,wBAAwBA,CAACH,QAAQ,EAAuC;IAC/E,IAAIH,SAAS,CAACO,MAAA,KAAW,KAAK,CAACb,SAAS,EAAE;MACxC,OAAO,CAACS,QAAQ,EAAE,KAAK,CAAC;IAC9B;IAEI,MAAMK,QAAA,GAAWC,WAAW,CAACT,SAAS,EAAEG,QAAQ,EAAET,SAAS,CAAC;IAC5D,KAAK,MAAMgB,MAAA,IAAUF,QAAQ,EAAE;MAC7B,IAAIE,MAAM,CAACC,KAAK,CAACC,OAAO,EAAE;QACxB,OAAO,CAACF,MAAM,CAACC,KAAK,CAACE,IAAI,EAAE,OAAO,CAAC;MAC3C;IACA;IAEI,OAAO,CAACV,QAAQ,EAAE,KAAK,CAAC;EAC5B;EAEE,IAAIb,kBAAkB,EAAE;IACtB,MAAMwB,YAAA,GAAeb,eAAe,EAAE;IACtC,IAAIa,YAAY,EAAE;MAChB,MAAM,CAACC,IAAI,EAAEC,MAAM,IAAIV,wBAAwB,CAACQ,YAAY,CAAC;MAC7DG,+BAA+B,CAACrB,MAAM,EAAE;QACtCmB,IAAI;QACJG,UAAU,EAAE;UACV,CAACC,4BAA4B,GAAG,UAAU;UAC1C,CAACC,gCAAgC,GAAG,uBAAuBrB,mBAAmB,EAAC;UACA,CAAAsB,gCAAA,GAAAL;QACA;MACA;IACA;EACA;EAEA,IAAAzB,oBAAA,IAAAC,OAAA,CAAA8B,MAAA;IACA9B,OAAA,CAAA8B,MAAA,EAAApB,QAAA,EAAAqB,MAAA;MACA,IAAAA,MAAA,KAAAA,MAAA,eAAAA,MAAA;QACA,OAAAR,IAAA,EAAAC,MAAA,IAAAV,wBAAA,CAAAJ,QAAA,CAAAC,QAAA;QACAqB,iCAAA,CAAA5B,MAAA;UACAmB,IAAA;UACAG,UAAA;YACA,CAAAC,4BAAA;YACA,CAAAC,gCAAA,4BAAArB,mBAAA;YACA,CAAAsB,gCAAA,GAAAL;UACA;QACA;MACA;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAAP,YACAhB,MAAA,EACAU,QAAA,EACAT,SAAA,EACAgB,MAAA,OACA;EACAjB,MAAA,CAAAgC,IAAA,CAAAC,KAAA;IACA,MAAAf,KAAA,GAAAe,KAAA,CAAAb,IAAA,GACAnB,SAAA,CAAAS,QAAA,EAAAuB,KAAA,IACAhB,MAAA,CAAAH,MAAA;IACA;IACAG,MAAA,CAAAA,MAAA,CAAAH,MAAA,MAAAI,KAAA;IAAA,EACAgB,gBAAA,CAAAxB,QAAA;;IAEA,IAAAQ,KAAA;MACAD,MAAA,CAAAkB,IAAA;QAAAF,KAAA;QAAAf;MAAA;MAEA,IAAAe,KAAA,CAAAjC,MAAA;QACAgB,WAAA,CAAAiB,KAAA,CAAAjC,MAAA,EAAAU,QAAA,EAAAT,SAAA,EAAAgB,MAAA;MACA;IACA;IAEA,SAAAC,KAAA;EACA;EAEA,OAAAD,MAAA;AACA;AAEA,SAAAiB,iBAAAxB,QAAA;EACA;IAAAU,IAAA;IAAAgB,GAAA;IAAAC,MAAA;IAAAlB,OAAA,EAAAT,QAAA;EAAA;AACA;;AAEA;AACA,SAAA4B,kBAAAC,KAAA;EACA,MAAAC,oBAAA,GAAAD,KAAA,CAAAE,WAAA,IAAAF,KAAA,CAAAjB,IAAA;EAEA,MAAAoB,YAAA,GAAAC,KAAA;IACA,IAAAA,KAAA,EAAAC,aAAA,EAAAzB,OAAA;MACA,MAAAc,KAAA,GAAAU,KAAA,CAAAC,aAAA,CAAAxB,IAAA;MACA,MAAAyB,cAAA,GAAAC,iBAAA;MAEAC,eAAA,GAAAC,kBAAA,CAAAf,KAAA;MAEA,IAAAY,cAAA;QACAA,cAAA,CAAAI,UAAA,CAAAhB,KAAA;QACAY,cAAA,CAAAK,YAAA,CAAAtB,gCAAA;MACA;IACA;;IAEA;IACA;IACA;IACA,OAAAuB,KAAA,CAAAC,aAAA,CAAAb,KAAA;MAAA,GAAAI;IAAA;EACA;EAEAD,YAAA,CAAAD,WAAA,kBAAAD,oBAAA;EACAa,oBAAA,CAAAX,YAAA,EAAAH,KAAA;EACA;EACA;EACA;EACA,OAAAG,YAAA;AACA;AACA;;AAEA,SAAAI,kBAAA;EACA,MAAAQ,IAAA,GAAAC,aAAA;EACA,MAAAC,QAAA,GAAAF,IAAA,IAAAG,WAAA,CAAAH,IAAA;EAEA,KAAAE,QAAA;IACA,OAAA5C,SAAA;EACA;EAEA,MAAA8C,EAAA,GAAAC,UAAA,CAAAH,QAAA,EAAAE,EAAA;;EAEA;EACA,OAAAA,EAAA,qBAAAA,EAAA,kBAAAF,QAAA,GAAA5C,SAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}