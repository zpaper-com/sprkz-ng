{"ast":null,"code":"import { browserPerformanceTimeOrigin, getActiveSpan, getRootSpan, spanToJSON, getCurrentScope, timestampInSeconds, startSpan, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\nimport { addPerformanceInstrumentationHandler } from './instrument.js';\nimport { getBrowserPerformanceAPI, msToSec } from './utils.js';\n\n// ElementTiming interface based on the W3C spec\n\n/**\n * Start tracking ElementTiming performance entries.\n */\nfunction startTrackingElementTiming() {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin()) {\n    return addPerformanceInstrumentationHandler('element', _onElementTiming);\n  }\n  return () => undefined;\n}\n\n/**\n * exported only for testing\n */\nconst _onElementTiming = ({\n  entries\n}) => {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n  const transactionName = rootSpan ? spanToJSON(rootSpan).description : getCurrentScope().getScopeData().transactionName;\n  entries.forEach(entry => {\n    const elementEntry = entry;\n\n    // Skip entries without identifier (elementtiming attribute)\n    if (!elementEntry.identifier) {\n      return;\n    }\n\n    // `name` contains the type of the element paint. Can be `'image-paint'` or `'text-paint'`.\n    // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming#instance_properties\n    const paintType = elementEntry.name;\n    const renderTime = elementEntry.renderTime;\n    const loadTime = elementEntry.loadTime;\n\n    // starting the span at:\n    // - `loadTime` if available (should be available for all \"image-paint\" entries, 0 otherwise)\n    // - `renderTime` if available (available for all entries, except 3rd party images, but these should be covered by `loadTime`, 0 otherwise)\n    // - `timestampInSeconds()` as a safeguard\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming/renderTime#cross-origin_image_render_time\n    const [spanStartTime, spanStartTimeSource] = loadTime ? [msToSec(loadTime), 'load-time'] : renderTime ? [msToSec(renderTime), 'render-time'] : [timestampInSeconds(), 'entry-emission'];\n    const duration = paintType === 'image-paint' ?\n    // for image paints, we can acually get a duration because image-paint entries also have a `loadTime`\n    // and `renderTime`. `loadTime` is the time when the image finished loading and `renderTime` is the\n    // time when the image finished rendering.\n    msToSec(Math.max(0, (renderTime ?? 0) - (loadTime ?? 0))) :\n    // for `'text-paint'` entries, we can't get a duration because the `loadTime` is always zero.\n    0;\n    const attributes = {\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.elementtiming',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.elementtiming',\n      // name must be user-entered, so we can assume low cardinality\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n      // recording the source of the span start time, as it varies depending on available data\n      'sentry.span_start_time_source': spanStartTimeSource,\n      'sentry.transaction_name': transactionName,\n      'element.id': elementEntry.id,\n      'element.type': elementEntry.element?.tagName?.toLowerCase() || 'unknown',\n      'element.size': elementEntry.naturalWidth && elementEntry.naturalHeight ? `${elementEntry.naturalWidth}x${elementEntry.naturalHeight}` : undefined,\n      'element.render_time': renderTime,\n      'element.load_time': loadTime,\n      // `url` is `0`(number) for text paints (hence we fall back to undefined)\n      'element.url': elementEntry.url || undefined,\n      'element.identifier': elementEntry.identifier,\n      'element.paint_type': paintType\n    };\n    startSpan({\n      name: `element[${elementEntry.identifier}]`,\n      attributes,\n      startTime: spanStartTime,\n      onlyIfParent: true\n    }, span => {\n      span.end(spanStartTime + duration);\n    });\n  });\n};\nexport { _onElementTiming, startTrackingElementTiming };","map":{"version":3,"names":["startTrackingElementTiming","performance","getBrowserPerformanceAPI","browserPerformanceTimeOrigin","addPerformanceInstrumentationHandler","_onElementTiming","undefined","entries","activeSpan","getActiveSpan","rootSpan","getRootSpan","transactionName","spanToJSON","description","getCurrentScope","getScopeData","forEach","entry","elementEntry","identifier","paintType","name","renderTime","loadTime","spanStartTime","spanStartTimeSource","msToSec","timestampInSeconds","duration","Math","max","attributes","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","id","element","tagName","toLowerCase","naturalWidth","naturalHeight","url","startSpan","startTime","onlyIfParent","span","end"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry-internal/browser-utils/src/metrics/elementTiming.ts"],"sourcesContent":["import type { SpanAttributes } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  getActiveSpan,\n  getCurrentScope,\n  getRootSpan,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanToJSON,\n  startSpan,\n  timestampInSeconds,\n} from '@sentry/core';\nimport { addPerformanceInstrumentationHandler } from './instrument';\nimport { getBrowserPerformanceAPI, msToSec } from './utils';\n\n// ElementTiming interface based on the W3C spec\ninterface PerformanceElementTiming extends PerformanceEntry {\n  renderTime: number;\n  loadTime: number;\n  intersectionRect: DOMRectReadOnly;\n  identifier: string;\n  naturalWidth: number;\n  naturalHeight: number;\n  id: string;\n  element: Element | null;\n  url?: string;\n}\n\n/**\n * Start tracking ElementTiming performance entries.\n */\nexport function startTrackingElementTiming(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin()) {\n    return addPerformanceInstrumentationHandler('element', _onElementTiming);\n  }\n\n  return () => undefined;\n}\n\n/**\n * exported only for testing\n */\nexport const _onElementTiming = ({ entries }: { entries: PerformanceEntry[] }): void => {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n  const transactionName = rootSpan\n    ? spanToJSON(rootSpan).description\n    : getCurrentScope().getScopeData().transactionName;\n\n  entries.forEach(entry => {\n    const elementEntry = entry as PerformanceElementTiming;\n\n    // Skip entries without identifier (elementtiming attribute)\n    if (!elementEntry.identifier) {\n      return;\n    }\n\n    // `name` contains the type of the element paint. Can be `'image-paint'` or `'text-paint'`.\n    // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming#instance_properties\n    const paintType = elementEntry.name as 'image-paint' | 'text-paint' | undefined;\n\n    const renderTime = elementEntry.renderTime;\n    const loadTime = elementEntry.loadTime;\n\n    // starting the span at:\n    // - `loadTime` if available (should be available for all \"image-paint\" entries, 0 otherwise)\n    // - `renderTime` if available (available for all entries, except 3rd party images, but these should be covered by `loadTime`, 0 otherwise)\n    // - `timestampInSeconds()` as a safeguard\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming/renderTime#cross-origin_image_render_time\n    const [spanStartTime, spanStartTimeSource] = loadTime\n      ? [msToSec(loadTime), 'load-time']\n      : renderTime\n        ? [msToSec(renderTime), 'render-time']\n        : [timestampInSeconds(), 'entry-emission'];\n\n    const duration =\n      paintType === 'image-paint'\n        ? // for image paints, we can acually get a duration because image-paint entries also have a `loadTime`\n          // and `renderTime`. `loadTime` is the time when the image finished loading and `renderTime` is the\n          // time when the image finished rendering.\n          msToSec(Math.max(0, (renderTime ?? 0) - (loadTime ?? 0)))\n        : // for `'text-paint'` entries, we can't get a duration because the `loadTime` is always zero.\n          0;\n\n    const attributes: SpanAttributes = {\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.elementtiming',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.elementtiming',\n      // name must be user-entered, so we can assume low cardinality\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n      // recording the source of the span start time, as it varies depending on available data\n      'sentry.span_start_time_source': spanStartTimeSource,\n      'sentry.transaction_name': transactionName,\n      'element.id': elementEntry.id,\n      'element.type': elementEntry.element?.tagName?.toLowerCase() || 'unknown',\n      'element.size':\n        elementEntry.naturalWidth && elementEntry.naturalHeight\n          ? `${elementEntry.naturalWidth}x${elementEntry.naturalHeight}`\n          : undefined,\n      'element.render_time': renderTime,\n      'element.load_time': loadTime,\n      // `url` is `0`(number) for text paints (hence we fall back to undefined)\n      'element.url': elementEntry.url || undefined,\n      'element.identifier': elementEntry.identifier,\n      'element.paint_type': paintType,\n    };\n\n    startSpan(\n      {\n        name: `element[${elementEntry.identifier}]`,\n        attributes,\n        startTime: spanStartTime,\n        onlyIfParent: true,\n      },\n      span => {\n        span.end(spanStartTime + duration);\n      },\n    );\n  });\n};\n"],"mappings":";;;;AAgBA;;AAaA;AACA;AACA;AACO,SAASA,0BAA0BA,CAAA,EAAe;EACvD,MAAMC,WAAA,GAAcC,wBAAwB,EAAE;EAC9C,IAAID,WAAA,IAAeE,4BAA4B,EAAE,EAAE;IACjD,OAAOC,oCAAoC,CAAC,SAAS,EAAEC,gBAAgB,CAAC;EAC5E;EAEE,OAAO,MAAMC,SAAS;AACxB;;AAEA;AACA;AACA;MACaD,gBAAA,GAAmBA,CAAC;EAAEE;AAAA,CAAS,KAA4C;EACtF,MAAMC,UAAA,GAAaC,aAAa,EAAE;EAClC,MAAMC,QAAA,GAAWF,UAAA,GAAaG,WAAW,CAACH,UAAU,IAAIF,SAAS;EACjE,MAAMM,eAAA,GAAkBF,QAAA,GACpBG,UAAU,CAACH,QAAQ,CAAC,CAACI,WAAA,GACrBC,eAAe,EAAE,CAACC,YAAY,EAAE,CAACJ,eAAe;EAEpDL,OAAO,CAACU,OAAO,CAACC,KAAA,IAAS;IACvB,MAAMC,YAAA,GAAeD,KAAA;;IAEzB;IACI,IAAI,CAACC,YAAY,CAACC,UAAU,EAAE;MAC5B;IACN;;IAEA;IACA;IACI,MAAMC,SAAA,GAAYF,YAAY,CAACG,IAAA;IAE/B,MAAMC,UAAA,GAAaJ,YAAY,CAACI,UAAU;IAC1C,MAAMC,QAAA,GAAWL,YAAY,CAACK,QAAQ;;IAE1C;IACA;IACA;IACA;IACA;IACI,MAAM,CAACC,aAAa,EAAEC,mBAAmB,IAAIF,QAAA,GACzC,CAACG,OAAO,CAACH,QAAQ,CAAC,EAAE,WAAW,IAC/BD,UAAA,GACE,CAACI,OAAO,CAACJ,UAAU,CAAC,EAAE,aAAa,IACnC,CAACK,kBAAkB,EAAE,EAAE,gBAAgB,CAAC;IAE9C,MAAMC,QAAA,GACJR,SAAA,KAAc;IACpB;IACA;IACA;IACUM,OAAO,CAACG,IAAI,CAACC,GAAG,CAAC,CAAC,EAAE,CAACR,UAAA,IAAc,CAAC,KAAKC,QAAA,IAAY,CAAC,CAAC,CAAC;IAClE;IACU,CAAC;IAEP,MAAMQ,UAAU,GAAmB;MACjC,CAACC,gCAAgC,GAAG,+BAA+B;MACnE,CAACC,4BAA4B,GAAG,kBAAkB;MACxD;MACM,CAACC,gCAAgC,GAAG,WAAW;MACrD;MACM,+BAA+B,EAAET,mBAAmB;MACpD,yBAAyB,EAAEd,eAAe;MAC1C,YAAY,EAAEO,YAAY,CAACiB,EAAE;MAC7B,cAAc,EAAEjB,YAAY,CAACkB,OAAO,EAAEC,OAAO,EAAEC,WAAW,EAAC,IAAK,SAAS;MACzE,cAAc,EACZpB,YAAY,CAACqB,YAAA,IAAgBrB,YAAY,CAACsB,aAAA,GACtC,GAACtB,YAAA,CAAAqB,YAAA,IAAArB,YAAA,CAAAsB,aAAA,KACAnC,SAAA;MACA,uBAAAiB,UAAA;MACA,qBAAAC,QAAA;MACA;MACA,eAAAL,YAAA,CAAAuB,GAAA,IAAApC,SAAA;MACA,sBAAAa,YAAA,CAAAC,UAAA;MACA,sBAAAC;IACA;IAEAsB,SAAA,CACA;MACArB,IAAA,aAAAH,YAAA,CAAAC,UAAA;MACAY,UAAA;MACAY,SAAA,EAAAnB,aAAA;MACAoB,YAAA;IACA,GACAC,IAAA;MACAA,IAAA,CAAAC,GAAA,CAAAtB,aAAA,GAAAI,QAAA;IACA,CACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}