{"ast":null,"code":"import { OPENAI_OPERATIONS } from '../gen-ai-attributes.js';\nimport { INSTRUMENTED_METHODS } from './constants.js';\n\n/**\n * Maps OpenAI method paths to Sentry operation names\n */\nfunction getOperationName(methodPath) {\n  if (methodPath.includes('chat.completions')) {\n    return OPENAI_OPERATIONS.CHAT;\n  }\n  if (methodPath.includes('responses')) {\n    // The responses API is also a chat operation\n    return OPENAI_OPERATIONS.CHAT;\n  }\n  return methodPath.split('.').pop() || 'unknown';\n}\n\n/**\n * Get the span operation for OpenAI methods\n * Following Sentry's convention: \"gen_ai.{operation_name}\"\n */\nfunction getSpanOperation(methodPath) {\n  return `gen_ai.${getOperationName(methodPath)}`;\n}\n\n/**\n * Check if a method path should be instrumented\n */\nfunction shouldInstrument(methodPath) {\n  return INSTRUMENTED_METHODS.includes(methodPath);\n}\n\n/**\n * Build method path from current traversal\n */\nfunction buildMethodPath(currentPath, prop) {\n  return currentPath ? `${currentPath}.${prop}` : prop;\n}\n\n/**\n * Check if response is a Chat Completion object\n */\nfunction isChatCompletionResponse(response) {\n  return response !== null && typeof response === 'object' && 'object' in response && response.object === 'chat.completion';\n}\n\n/**\n * Check if response is a Responses API object\n */\nfunction isResponsesApiResponse(response) {\n  return response !== null && typeof response === 'object' && 'object' in response && response.object === 'response';\n}\nexport { buildMethodPath, getOperationName, getSpanOperation, isChatCompletionResponse, isResponsesApiResponse, shouldInstrument };","map":{"version":3,"names":["getOperationName","methodPath","includes","OPENAI_OPERATIONS","CHAT","split","pop","getSpanOperation","shouldInstrument","INSTRUMENTED_METHODS","buildMethodPath","currentPath","prop","isChatCompletionResponse","response","object","isResponsesApiResponse"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/openai/utils.ts"],"sourcesContent":["import { OPENAI_OPERATIONS } from '../gen-ai-attributes';\nimport { INSTRUMENTED_METHODS } from './constants';\nimport type { InstrumentedMethod, OpenAiChatCompletionObject, OpenAIResponseObject } from './types';\n\n/**\n * Maps OpenAI method paths to Sentry operation names\n */\nexport function getOperationName(methodPath: string): string {\n  if (methodPath.includes('chat.completions')) {\n    return OPENAI_OPERATIONS.CHAT;\n  }\n  if (methodPath.includes('responses')) {\n    // The responses API is also a chat operation\n    return OPENAI_OPERATIONS.CHAT;\n  }\n  return methodPath.split('.').pop() || 'unknown';\n}\n\n/**\n * Get the span operation for OpenAI methods\n * Following Sentry's convention: \"gen_ai.{operation_name}\"\n */\nexport function getSpanOperation(methodPath: string): string {\n  return `gen_ai.${getOperationName(methodPath)}`;\n}\n\n/**\n * Check if a method path should be instrumented\n */\nexport function shouldInstrument(methodPath: string): methodPath is InstrumentedMethod {\n  return INSTRUMENTED_METHODS.includes(methodPath as InstrumentedMethod);\n}\n\n/**\n * Build method path from current traversal\n */\nexport function buildMethodPath(currentPath: string, prop: string): string {\n  return currentPath ? `${currentPath}.${prop}` : prop;\n}\n\n/**\n * Check if response is a Chat Completion object\n */\nexport function isChatCompletionResponse(response: unknown): response is OpenAiChatCompletionObject {\n  return (\n    response !== null &&\n    typeof response === 'object' &&\n    'object' in response &&\n    (response as Record<string, unknown>).object === 'chat.completion'\n  );\n}\n\n/**\n * Check if response is a Responses API object\n */\nexport function isResponsesApiResponse(response: unknown): response is OpenAIResponseObject {\n  return (\n    response !== null &&\n    typeof response === 'object' &&\n    'object' in response &&\n    (response as Record<string, unknown>).object === 'response'\n  );\n}\n"],"mappings":";;;AAIA;AACA;AACA;AACO,SAASA,gBAAgBA,CAACC,UAAU,EAAkB;EAC3D,IAAIA,UAAU,CAACC,QAAQ,CAAC,kBAAkB,CAAC,EAAE;IAC3C,OAAOC,iBAAiB,CAACC,IAAI;EACjC;EACE,IAAIH,UAAU,CAACC,QAAQ,CAAC,WAAW,CAAC,EAAE;IACxC;IACI,OAAOC,iBAAiB,CAACC,IAAI;EACjC;EACE,OAAOH,UAAU,CAACI,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,EAAC,IAAK,SAAS;AACjD;;AAEA;AACA;AACA;AACA;AACO,SAASC,gBAAgBA,CAACN,UAAU,EAAkB;EAC3D,OAAO,UAAUD,gBAAgB,CAACC,UAAU,CAAC,EAAC;AACA;;AAEA;AACA;AACA;AACA,SAAAO,iBAAAP,UAAA;EACA,OAAAQ,oBAAA,CAAAP,QAAA,CAAAD,UAAA;AACA;;AAEA;AACA;AACA;AACA,SAAAS,gBAAAC,WAAA,EAAAC,IAAA;EACA,OAAAD,WAAA,MAAAA,WAAA,IAAAC,IAAA,KAAAA,IAAA;AACA;;AAEA;AACA;AACA;AACA,SAAAC,yBAAAC,QAAA;EACA,OACAA,QAAA,aACA,OAAAA,QAAA,iBACA,YAAAA,QAAA,IACAA,QAAA,CAAAC,MAAA;AAEA;;AAEA;AACA;AACA;AACA,SAAAC,uBAAAF,QAAA;EACA,OACAA,QAAA,aACA,OAAAA,QAAA,iBACA,YAAAA,QAAA,IACAA,QAAA,CAAAC,MAAA;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}