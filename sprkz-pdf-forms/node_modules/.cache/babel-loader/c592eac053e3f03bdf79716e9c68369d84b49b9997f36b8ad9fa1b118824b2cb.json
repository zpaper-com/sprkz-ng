{"ast":null,"code":"import { defineIntegration, applyAggregateErrorsToEvent } from '@sentry/core';\nimport { exceptionFromError } from '../eventbuilder.js';\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\nconst INTEGRATION_NAME = 'LinkedErrors';\nconst _linkedErrorsIntegration = (options = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n      applyAggregateErrorsToEvent(\n      // This differs from the LinkedErrors integration in core by using a different exceptionFromError function\n      exceptionFromError, options.stackParser, key, limit, event, hint);\n    }\n  };\n};\n\n/**\n * Aggregrate linked errors in an event.\n */\nconst linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\nexport { linkedErrorsIntegration };","map":{"version":3,"names":["DEFAULT_KEY","DEFAULT_LIMIT","INTEGRATION_NAME","_linkedErrorsIntegration","options","limit","key","name","preprocessEvent","event","hint","client","getOptions","applyAggregateErrorsToEvent","exceptionFromError","stackParser","linkedErrorsIntegration","defineIntegration"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/integrations/linkederrors.ts"],"sourcesContent":["import type { IntegrationFn } from '@sentry/core';\nimport { applyAggregateErrorsToEvent, defineIntegration } from '@sentry/core';\nimport { exceptionFromError } from '../eventbuilder';\n\ninterface LinkedErrorsOptions {\n  key?: string;\n  limit?: number;\n}\n\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\n\nconst INTEGRATION_NAME = 'LinkedErrors';\n\nconst _linkedErrorsIntegration = ((options: LinkedErrorsOptions = {}) => {\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n\n      applyAggregateErrorsToEvent(\n        // This differs from the LinkedErrors integration in core by using a different exceptionFromError function\n        exceptionFromError,\n        options.stackParser,\n        key,\n        limit,\n        event,\n        hint,\n      );\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Aggregrate linked errors in an event.\n */\nexport const linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\n"],"mappings":";;AASA,MAAMA,WAAA,GAAc,OAAO;AAC3B,MAAMC,aAAA,GAAgB,CAAC;AAEvB,MAAMC,gBAAA,GAAmB,cAAc;AAEvC,MAAMC,wBAAA,GAA4BA,CAACC,OAAO,GAAwB,EAAE,KAAK;EACvE,MAAMC,KAAA,GAAQD,OAAO,CAACC,KAAA,IAASJ,aAAa;EAC5C,MAAMK,GAAA,GAAMF,OAAO,CAACE,GAAA,IAAON,WAAW;EAEtC,OAAO;IACLO,IAAI,EAAEL,gBAAgB;IACtBM,eAAeA,CAACC,KAAK,EAAEC,IAAI,EAAEC,MAAM,EAAE;MACnC,MAAMP,OAAA,GAAUO,MAAM,CAACC,UAAU,EAAE;MAEnCC,2BAA2B;MACjC;MACQC,kBAAkB,EAClBV,OAAO,CAACW,WAAW,EACnBT,GAAG,EACHD,KAAK,EACLI,KAAK,EACLC,IACR,CAAO;IACP;EACA,CAAG;AACH,CAAC;;AAED;AACA;AACA;MACaM,uBAAA,GAA0BC,iBAAiB,CAACd,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}