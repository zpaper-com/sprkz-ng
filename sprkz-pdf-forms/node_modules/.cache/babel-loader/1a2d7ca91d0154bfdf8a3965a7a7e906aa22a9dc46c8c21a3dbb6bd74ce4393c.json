{"ast":null,"code":"import { dsnToString } from '../utils/dsn.js';\nimport { createEnvelope } from '../utils/envelope.js';\n\n/**\n * Creates a log container envelope item for a list of logs.\n *\n * @param items - The logs to include in the envelope.\n * @returns The created log container envelope item.\n */\nfunction createLogContainerEnvelopeItem(items) {\n  return [{\n    type: 'log',\n    item_count: items.length,\n    content_type: 'application/vnd.sentry.items.log+json'\n  }, {\n    items\n  }];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * Logs from multiple traces can be included in the same envelope.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nfunction createLogEnvelope(logs, metadata, tunnel, dsn) {\n  const headers = {};\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version\n    };\n  }\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n  return createEnvelope(headers, [createLogContainerEnvelopeItem(logs)]);\n}\nexport { createLogContainerEnvelopeItem, createLogEnvelope };","map":{"version":3,"names":["createLogContainerEnvelopeItem","items","type","item_count","length","content_type","createLogEnvelope","logs","metadata","tunnel","dsn","headers","sdk","name","version","dsnToString","createEnvelope"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/logs/envelope.ts"],"sourcesContent":["import type { DsnComponents } from '../types-hoist/dsn';\nimport type { LogContainerItem, LogEnvelope } from '../types-hoist/envelope';\nimport type { SerializedLog } from '../types-hoist/log';\nimport type { SdkMetadata } from '../types-hoist/sdkmetadata';\nimport { dsnToString } from '../utils/dsn';\nimport { createEnvelope } from '../utils/envelope';\n\n/**\n * Creates a log container envelope item for a list of logs.\n *\n * @param items - The logs to include in the envelope.\n * @returns The created log container envelope item.\n */\nexport function createLogContainerEnvelopeItem(items: Array<SerializedLog>): LogContainerItem {\n  return [\n    {\n      type: 'log',\n      item_count: items.length,\n      content_type: 'application/vnd.sentry.items.log+json',\n    },\n    {\n      items,\n    },\n  ];\n}\n\n/**\n * Creates an envelope for a list of logs.\n *\n * Logs from multiple traces can be included in the same envelope.\n *\n * @param logs - The logs to include in the envelope.\n * @param metadata - The metadata to include in the envelope.\n * @param tunnel - The tunnel to include in the envelope.\n * @param dsn - The DSN to include in the envelope.\n * @returns The created envelope.\n */\nexport function createLogEnvelope(\n  logs: Array<SerializedLog>,\n  metadata?: SdkMetadata,\n  tunnel?: string,\n  dsn?: DsnComponents,\n): LogEnvelope {\n  const headers: LogEnvelope[0] = {};\n\n  if (metadata?.sdk) {\n    headers.sdk = {\n      name: metadata.sdk.name,\n      version: metadata.sdk.version,\n    };\n  }\n\n  if (!!tunnel && !!dsn) {\n    headers.dsn = dsnToString(dsn);\n  }\n\n  return createEnvelope<LogEnvelope>(headers, [createLogContainerEnvelopeItem(logs)]);\n}\n"],"mappings":";;;AAOA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,8BAA8BA,CAACC,KAAK,EAA0C;EAC5F,OAAO,CACL;IACEC,IAAI,EAAE,KAAK;IACXC,UAAU,EAAEF,KAAK,CAACG,MAAM;IACxBC,YAAY,EAAE;EACpB,CAAK,EACD;IACEJ;EACN,CAAK,CACF;AACH;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASK,iBAAiBA,CAC/BC,IAAI,EACJC,QAAQ,EACRC,MAAM,EACNC,GAAG,EACU;EACb,MAAMC,OAAO,GAAmB,EAAE;EAElC,IAAIH,QAAQ,EAAEI,GAAG,EAAE;IACjBD,OAAO,CAACC,GAAA,GAAM;MACZC,IAAI,EAAEL,QAAQ,CAACI,GAAG,CAACC,IAAI;MACvBC,OAAO,EAAEN,QAAQ,CAACI,GAAG,CAACE;IAC5B,CAAK;EACL;EAEE,IAAI,CAAC,CAACL,MAAA,IAAU,CAAC,CAACC,GAAG,EAAE;IACrBC,OAAO,CAACD,GAAA,GAAMK,WAAW,CAACL,GAAG,CAAC;EAClC;EAEE,OAAOM,cAAc,CAAcL,OAAO,EAAE,CAACX,8BAA8B,CAACO,IAAI,CAAC,CAAC,CAAC;AACrF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}