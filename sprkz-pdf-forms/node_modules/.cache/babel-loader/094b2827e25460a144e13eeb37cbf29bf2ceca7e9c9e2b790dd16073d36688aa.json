{"ast":null,"code":"import { WINDOW } from '../../types.js';\nimport { bindReporter } from './lib/bindReporter.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { initUnique } from './lib/initUnique.js';\nimport { LayoutShiftManager } from './lib/LayoutShiftManager.js';\nimport { observe } from './lib/observe.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { onFCP } from './onFCP.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Thresholds for CLS. See https://web.dev/articles/cls#what_is_a_good_cls_score */\nconst CLSThresholds = [0.1, 0.25];\n\n/**\n * Calculates the [CLS](https://web.dev/articles/cls) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/articles/cls#layout_shift_score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nconst onCLS = (onReport, opts = {}) => {\n  // Start monitoring FCP so we can only report CLS if FCP is also reported.\n  // Note: this is done to match the current behavior of CrUX.\n  onFCP(runOnce(() => {\n    const metric = initMetric('CLS', 0);\n    let report;\n    const layoutShiftManager = initUnique(opts, LayoutShiftManager);\n    const handleEntries = entries => {\n      for (const entry of entries) {\n        layoutShiftManager._processEntry(entry);\n      }\n\n      // If the current session value is larger than the current CLS value,\n      // update CLS and the entries contributing to it.\n      if (layoutShiftManager._sessionValue > metric.value) {\n        metric.value = layoutShiftManager._sessionValue;\n        metric.entries = layoutShiftManager._sessionEntries;\n        report();\n      }\n    };\n    const po = observe('layout-shift', handleEntries);\n    if (po) {\n      report = bindReporter(onReport, metric, CLSThresholds, opts.reportAllChanges);\n      WINDOW.document?.addEventListener('visibilitychange', () => {\n        if (WINDOW.document?.visibilityState === 'hidden') {\n          handleEntries(po.takeRecords());\n          report(true);\n        }\n      });\n\n      // Queue a task to report (if nothing else triggers a report first).\n      // This allows CLS to be reported as soon as FCP fires when\n      // `reportAllChanges` is true.\n      WINDOW?.setTimeout?.(report);\n    }\n  }));\n};\nexport { CLSThresholds, onCLS };","map":{"version":3,"names":["CLSThresholds","onCLS","onReport","opts","onFCP","runOnce","metric","initMetric","report","layoutShiftManager","initUnique","LayoutShiftManager","handleEntries","entries","entry","_processEntry","_sessionValue","value","_sessionEntries","po","observe","bindReporter","reportAllChanges","WINDOW","document","addEventListener","visibilityState","takeRecords","setTimeout"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/getCLS.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { initUnique } from './lib/initUnique';\nimport { LayoutShiftManager } from './lib/LayoutShiftManager';\nimport { observe } from './lib/observe';\nimport { runOnce } from './lib/runOnce';\nimport { onFCP } from './onFCP';\nimport type { CLSMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for CLS. See https://web.dev/articles/cls#what_is_a_good_cls_score */\nexport const CLSThresholds: MetricRatingThresholds = [0.1, 0.25];\n\n/**\n * Calculates the [CLS](https://web.dev/articles/cls) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/articles/cls#layout_shift_score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a page—including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (onReport: (metric: CLSMetric) => void, opts: ReportOpts = {}) => {\n  // Start monitoring FCP so we can only report CLS if FCP is also reported.\n  // Note: this is done to match the current behavior of CrUX.\n  onFCP(\n    runOnce(() => {\n      const metric = initMetric('CLS', 0);\n      let report: ReturnType<typeof bindReporter>;\n\n      const layoutShiftManager = initUnique(opts, LayoutShiftManager);\n\n      const handleEntries = (entries: LayoutShift[]) => {\n        for (const entry of entries) {\n          layoutShiftManager._processEntry(entry);\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (layoutShiftManager._sessionValue > metric.value) {\n          metric.value = layoutShiftManager._sessionValue;\n          metric.entries = layoutShiftManager._sessionEntries;\n          report();\n        }\n      };\n\n      const po = observe('layout-shift', handleEntries);\n      if (po) {\n        report = bindReporter(onReport, metric, CLSThresholds, opts!.reportAllChanges);\n\n        WINDOW.document?.addEventListener('visibilitychange', () => {\n          if (WINDOW.document?.visibilityState === 'hidden') {\n            handleEntries(po.takeRecords() as CLSMetric['entries']);\n            report(true);\n          }\n        });\n\n        // Queue a task to report (if nothing else triggers a report first).\n        // This allows CLS to be reported as soon as FCP fires when\n        // `reportAllChanges` is true.\n        WINDOW?.setTimeout?.(report);\n      }\n    }),\n  );\n};\n"],"mappings":";;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAYA;AACO,MAAMA,aAAa,GAA2B,CAAC,GAAG,EAAE,IAAI;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,KAAA,GAAQA,CAACC,QAAQ,EAA+BC,IAAI,GAAe,EAAE,KAAK;EACvF;EACA;EACEC,KAAK,CACHC,OAAO,CAAC,MAAM;IACZ,MAAMC,MAAA,GAASC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC;IACnC,IAAIC,MAAM;IAEV,MAAMC,kBAAA,GAAqBC,UAAU,CAACP,IAAI,EAAEQ,kBAAkB,CAAC;IAE/D,MAAMC,aAAA,GAAiBC,OAAO,IAAoB;MAChD,KAAK,MAAMC,KAAA,IAASD,OAAO,EAAE;QAC3BJ,kBAAkB,CAACM,aAAa,CAACD,KAAK,CAAC;MACjD;;MAEA;MACA;MACQ,IAAIL,kBAAkB,CAACO,aAAA,GAAgBV,MAAM,CAACW,KAAK,EAAE;QACnDX,MAAM,CAACW,KAAA,GAAQR,kBAAkB,CAACO,aAAa;QAC/CV,MAAM,CAACO,OAAA,GAAUJ,kBAAkB,CAACS,eAAe;QACnDV,MAAM,EAAE;MAClB;IACA,CAAO;IAED,MAAMW,EAAA,GAAKC,OAAO,CAAC,cAAc,EAAER,aAAa,CAAC;IACjD,IAAIO,EAAE,EAAE;MACNX,MAAA,GAASa,YAAY,CAACnB,QAAQ,EAAEI,MAAM,EAAEN,aAAa,EAAEG,IAAI,CAAEmB,gBAAgB,CAAC;MAE9EC,MAAM,CAACC,QAAQ,EAAEC,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;QAC1D,IAAIF,MAAM,CAACC,QAAQ,EAAEE,eAAA,KAAoB,QAAQ,EAAE;UACjDd,aAAa,CAACO,EAAE,CAACQ,WAAW,GAA2B;UACvDnB,MAAM,CAAC,IAAI,CAAC;QACxB;MACA,CAAS,CAAC;;MAEV;MACA;MACA;MACQe,MAAM,EAAEK,UAAU,GAAGpB,MAAM,CAAC;IACpC;EACA,CAAK,CACL,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}