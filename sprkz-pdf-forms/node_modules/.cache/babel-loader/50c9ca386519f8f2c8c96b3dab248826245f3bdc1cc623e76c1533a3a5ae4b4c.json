{"ast":null,"code":"import { defineIntegration } from '../integration.js';\nimport { addMetadataToStackFrames, stripMetadataFromStackFrames } from '../metadata.js';\nimport { forEachEnvelopeItem } from '../utils/envelope.js';\nimport { getFramesFromEvent } from '../utils/stacktrace.js';\n\n/**\n * This integration allows you to filter out, or tag error events that do not come from user code marked with a bundle key via the Sentry bundler plugins.\n */\nconst thirdPartyErrorFilterIntegration = defineIntegration(options => {\n  return {\n    name: 'ThirdPartyErrorsFilter',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      // TODO(lforst): Move this cleanup logic into a more central place in the SDK.\n      client.on('beforeEnvelope', envelope => {\n        forEachEnvelopeItem(envelope, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? item[1] : undefined;\n            if (event) {\n              stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n        const stackParser = client.getOptions().stackParser;\n        addMetadataToStackFrames(stackParser, event);\n      });\n    },\n    processEvent(event) {\n      const frameKeys = getBundleKeysForAllFramesWithFilenames(event);\n      if (frameKeys) {\n        const arrayMethod = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'apply-tag-if-contains-third-party-frames' ? 'some' : 'every';\n        const behaviourApplies = frameKeys[arrayMethod](keys => !keys.some(key => options.filterKeys.includes(key)));\n        if (behaviourApplies) {\n          const shouldDrop = options.behaviour === 'drop-error-if-contains-third-party-frames' || options.behaviour === 'drop-error-if-exclusively-contains-third-party-frames';\n          if (shouldDrop) {\n            return null;\n          } else {\n            event.tags = {\n              ...event.tags,\n              third_party_code: true\n            };\n          }\n        }\n      }\n      return event;\n    }\n  };\n});\nfunction getBundleKeysForAllFramesWithFilenames(event) {\n  const frames = getFramesFromEvent(event);\n  if (!frames) {\n    return undefined;\n  }\n  return frames\n  // Exclude frames without a filename since these are likely native code or built-ins\n  .filter(frame => !!frame.filename).map(frame => {\n    if (frame.module_metadata) {\n      return Object.keys(frame.module_metadata).filter(key => key.startsWith(BUNDLER_PLUGIN_APP_KEY_PREFIX)).map(key => key.slice(BUNDLER_PLUGIN_APP_KEY_PREFIX.length));\n    }\n    return [];\n  });\n}\nconst BUNDLER_PLUGIN_APP_KEY_PREFIX = '_sentryBundlerPluginAppKey:';\nexport { thirdPartyErrorFilterIntegration };","map":{"version":3,"names":["thirdPartyErrorFilterIntegration","defineIntegration","options","name","setup","client","on","envelope","forEachEnvelopeItem","item","type","event","Array","isArray","undefined","stripMetadataFromStackFrames","stackParser","getOptions","addMetadataToStackFrames","processEvent","frameKeys","getBundleKeysForAllFramesWithFilenames","arrayMethod","behaviour","behaviourApplies","keys","some","key","filterKeys","includes","shouldDrop","tags","third_party_code","frames","getFramesFromEvent","filter","frame","filename","map","module_metadata","Object","startsWith","BUNDLER_PLUGIN_APP_KEY_PREFIX","slice","length"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/integrations/third-party-errors-filter.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport { addMetadataToStackFrames, stripMetadataFromStackFrames } from '../metadata';\nimport type { EventItem } from '../types-hoist/envelope';\nimport type { Event } from '../types-hoist/event';\nimport { forEachEnvelopeItem } from '../utils/envelope';\nimport { getFramesFromEvent } from '../utils/stacktrace';\n\ninterface Options {\n  /**\n   * Keys that have been provided in the Sentry bundler plugin via the the `applicationKey` option, identifying your bundles.\n   *\n   * - Webpack plugin: https://www.npmjs.com/package/@sentry/webpack-plugin#applicationkey\n   * - Vite plugin: https://www.npmjs.com/package/@sentry/vite-plugin#applicationkey\n   * - Esbuild plugin: https://www.npmjs.com/package/@sentry/esbuild-plugin#applicationkey\n   * - Rollup plugin: https://www.npmjs.com/package/@sentry/rollup-plugin#applicationkey\n   */\n  filterKeys: string[];\n\n  /**\n   * Defines how the integration should behave. \"Third-Party Stack Frames\" are stack frames that did not come from files marked with a matching bundle key.\n   *\n   * You can define the behaviour with one of 4 modes:\n   * - `drop-error-if-contains-third-party-frames`: Drop error events that contain at least one third-party stack frame.\n   * - `drop-error-if-exclusively-contains-third-party-frames`: Drop error events that exclusively contain third-party stack frames.\n   * - `apply-tag-if-contains-third-party-frames`: Keep all error events, but apply a `third_party_code: true` tag in case the error contains at least one third-party stack frame.\n   * - `apply-tag-if-exclusively-contains-third-party-frames`: Keep all error events, but apply a `third_party_code: true` tag in case the error contains exclusively third-party stack frames.\n   *\n   * If you chose the mode to only apply tags, the tags can then be used in Sentry to filter your issue stream by entering `!third_party_code:True` in the search bar.\n   */\n  behaviour:\n    | 'drop-error-if-contains-third-party-frames'\n    | 'drop-error-if-exclusively-contains-third-party-frames'\n    | 'apply-tag-if-contains-third-party-frames'\n    | 'apply-tag-if-exclusively-contains-third-party-frames';\n}\n\n/**\n * This integration allows you to filter out, or tag error events that do not come from user code marked with a bundle key via the Sentry bundler plugins.\n */\nexport const thirdPartyErrorFilterIntegration = defineIntegration((options: Options) => {\n  return {\n    name: 'ThirdPartyErrorsFilter',\n    setup(client) {\n      // We need to strip metadata from stack frames before sending them to Sentry since these are client side only.\n      // TODO(lforst): Move this cleanup logic into a more central place in the SDK.\n      client.on('beforeEnvelope', envelope => {\n        forEachEnvelopeItem(envelope, (item, type) => {\n          if (type === 'event') {\n            const event = Array.isArray(item) ? (item as EventItem)[1] : undefined;\n\n            if (event) {\n              stripMetadataFromStackFrames(event);\n              item[1] = event;\n            }\n          }\n        });\n      });\n\n      client.on('applyFrameMetadata', event => {\n        // Only apply stack frame metadata to error events\n        if (event.type) {\n          return;\n        }\n\n        const stackParser = client.getOptions().stackParser;\n        addMetadataToStackFrames(stackParser, event);\n      });\n    },\n\n    processEvent(event) {\n      const frameKeys = getBundleKeysForAllFramesWithFilenames(event);\n\n      if (frameKeys) {\n        const arrayMethod =\n          options.behaviour === 'drop-error-if-contains-third-party-frames' ||\n          options.behaviour === 'apply-tag-if-contains-third-party-frames'\n            ? 'some'\n            : 'every';\n\n        const behaviourApplies = frameKeys[arrayMethod](keys => !keys.some(key => options.filterKeys.includes(key)));\n\n        if (behaviourApplies) {\n          const shouldDrop =\n            options.behaviour === 'drop-error-if-contains-third-party-frames' ||\n            options.behaviour === 'drop-error-if-exclusively-contains-third-party-frames';\n          if (shouldDrop) {\n            return null;\n          } else {\n            event.tags = {\n              ...event.tags,\n              third_party_code: true,\n            };\n          }\n        }\n      }\n\n      return event;\n    },\n  };\n});\n\nfunction getBundleKeysForAllFramesWithFilenames(event: Event): string[][] | undefined {\n  const frames = getFramesFromEvent(event);\n\n  if (!frames) {\n    return undefined;\n  }\n\n  return (\n    frames\n      // Exclude frames without a filename since these are likely native code or built-ins\n      .filter(frame => !!frame.filename)\n      .map(frame => {\n        if (frame.module_metadata) {\n          return Object.keys(frame.module_metadata)\n            .filter(key => key.startsWith(BUNDLER_PLUGIN_APP_KEY_PREFIX))\n            .map(key => key.slice(BUNDLER_PLUGIN_APP_KEY_PREFIX.length));\n        }\n        return [];\n      })\n  );\n}\n\nconst BUNDLER_PLUGIN_APP_KEY_PREFIX = '_sentryBundlerPluginAppKey:';\n"],"mappings":";;;;;AAoCA;AACA;AACA;AACO,MAAMA,gCAAA,GAAmCC,iBAAiB,CAAEC,OAAO,IAAc;EACtF,OAAO;IACLC,IAAI,EAAE,wBAAwB;IAC9BC,KAAKA,CAACC,MAAM,EAAE;MAClB;MACA;MACMA,MAAM,CAACC,EAAE,CAAC,gBAAgB,EAAEC,QAAA,IAAY;QACtCC,mBAAmB,CAACD,QAAQ,EAAE,CAACE,IAAI,EAAEC,IAAI,KAAK;UAC5C,IAAIA,IAAA,KAAS,OAAO,EAAE;YACpB,MAAMC,KAAA,GAAQC,KAAK,CAACC,OAAO,CAACJ,IAAI,IAAKA,IAAA,CAAmB,CAAC,IAAIK,SAAS;YAEtE,IAAIH,KAAK,EAAE;cACTI,4BAA4B,CAACJ,KAAK,CAAC;cACnCF,IAAI,CAAC,CAAC,IAAIE,KAAK;YAC7B;UACA;QACA,CAAS,CAAC;MACV,CAAO,CAAC;MAEFN,MAAM,CAACC,EAAE,CAAC,oBAAoB,EAAEK,KAAA,IAAS;QAC/C;QACQ,IAAIA,KAAK,CAACD,IAAI,EAAE;UACd;QACV;QAEQ,MAAMM,WAAA,GAAcX,MAAM,CAACY,UAAU,EAAE,CAACD,WAAW;QACnDE,wBAAwB,CAACF,WAAW,EAAEL,KAAK,CAAC;MACpD,CAAO,CAAC;IACR,CAAK;IAEDQ,YAAYA,CAACR,KAAK,EAAE;MAClB,MAAMS,SAAA,GAAYC,sCAAsC,CAACV,KAAK,CAAC;MAE/D,IAAIS,SAAS,EAAE;QACb,MAAME,WAAA,GACJpB,OAAO,CAACqB,SAAA,KAAc,+CACtBrB,OAAO,CAACqB,SAAA,KAAc,6CAClB,SACA,OAAO;QAEb,MAAMC,gBAAA,GAAmBJ,SAAS,CAACE,WAAW,CAAC,CAACG,IAAA,IAAQ,CAACA,IAAI,CAACC,IAAI,CAACC,GAAA,IAAOzB,OAAO,CAAC0B,UAAU,CAACC,QAAQ,CAACF,GAAG,CAAC,CAAC,CAAC;QAE5G,IAAIH,gBAAgB,EAAE;UACpB,MAAMM,UAAA,GACJ5B,OAAO,CAACqB,SAAA,KAAc,+CACtBrB,OAAO,CAACqB,SAAA,KAAc,uDAAuD;UAC/E,IAAIO,UAAU,EAAE;YACd,OAAO,IAAI;UACvB,OAAiB;YACLnB,KAAK,CAACoB,IAAA,GAAO;cACX,GAAGpB,KAAK,CAACoB,IAAI;cACbC,gBAAgB,EAAE;YAChC,CAAa;UACb;QACA;MACA;MAEM,OAAOrB,KAAK;IAClB;EACA,CAAG;AACH,CAAC;AAED,SAASU,sCAAsCA,CAACV,KAAK,EAAiC;EACpF,MAAMsB,MAAA,GAASC,kBAAkB,CAACvB,KAAK,CAAC;EAExC,IAAI,CAACsB,MAAM,EAAE;IACX,OAAOnB,SAAS;EACpB;EAEE,OACEmB;EACJ;EAAA,CACOE,MAAM,CAACC,KAAA,IAAS,CAAC,CAACA,KAAK,CAACC,QAAQ,EAChCC,GAAG,CAACF,KAAA,IAAS;IACZ,IAAIA,KAAK,CAACG,eAAe,EAAE;MACzB,OAAOC,MAAM,CAACf,IAAI,CAACW,KAAK,CAACG,eAAe,EACrCJ,MAAM,CAACR,GAAA,IAAOA,GAAG,CAACc,UAAU,CAACC,6BAA6B,CAAC,EAC3DJ,GAAG,CAACX,GAAA,IAAOA,GAAG,CAACgB,KAAK,CAACD,6BAA6B,CAACE,MAAM,CAAC,CAAC;IACxE;IACQ,OAAO,EAAE;EACjB,CAAO;AAEP;AAEA,MAAMF,6BAAA,GAAgC,6BAA6B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}