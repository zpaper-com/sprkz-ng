{"ast":null,"code":"import { getClient } from './currentScopes.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { debug } from './utils/debug-logger.js';\nfunction isProfilingIntegrationWithProfiler(integration) {\n  return !!integration && typeof integration['_profiler'] !== 'undefined' && typeof integration['_profiler']['start'] === 'function' && typeof integration['_profiler']['stop'] === 'function';\n}\n/**\n * Starts the Sentry continuous profiler.\n * This mode is exclusive with the transaction profiler and will only work if the profilesSampleRate is set to a falsy value.\n * In continuous profiling mode, the profiler will keep reporting profile chunks to Sentry until it is stopped, which allows for continuous profiling of the application.\n */\nfunction startProfiler() {\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && debug.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n  if (!integration) {\n    DEBUG_BUILD && debug.warn('ProfilingIntegration is not available');\n    return;\n  }\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    DEBUG_BUILD && debug.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n  integration._profiler.start();\n}\n\n/**\n * Stops the Sentry continuous profiler.\n * Calls to stop will stop the profiler and flush the currently collected profile data to Sentry.\n */\nfunction stopProfiler() {\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && debug.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n  if (!integration) {\n    DEBUG_BUILD && debug.warn('ProfilingIntegration is not available');\n    return;\n  }\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    DEBUG_BUILD && debug.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n  integration._profiler.stop();\n}\nconst profiler = {\n  startProfiler,\n  stopProfiler\n};\nexport { profiler };\n//# sourceMappingURL=profiling.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}