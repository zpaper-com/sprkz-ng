{"ast":null,"code":"import { UNKNOWN_FUNCTION } from './stacktrace.js';\n\n/**\n * Does this filename look like it's part of the app code?\n */\nfunction filenameIsInApp(filename, isNative = false) {\n  const isInternal = isNative || filename &&\n  // It's not internal if it's an absolute linux path\n  !filename.startsWith('/') &&\n  // It's not internal if it's an absolute windows path\n  !filename.match(/^[A-Z]:/) &&\n  // It's not internal if the path is starting with a dot\n  !filename.startsWith('.') &&\n  // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n  !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nfunction node(getModule) {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return line => {\n    const lineMatch = line.match(FULL_MATCH);\n    if (lineMatch) {\n      let object;\n      let method;\n      let functionName;\n      let typeName;\n      let methodName;\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n      if (functionName === undefined) {\n        methodName = methodName || UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n      let filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename?.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative)\n      };\n    }\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line\n      };\n    }\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nfunction nodeStackLineParser(getModule) {\n  return [90, node(getModule)];\n}\nfunction _parseIntOrUndefined(input) {\n  return parseInt(input || '', 10) || undefined;\n}\nexport { filenameIsInApp, node, nodeStackLineParser };","map":{"version":3,"names":["filenameIsInApp","filename","isNative","isInternal","startsWith","match","undefined","includes","node","getModule","FILENAME_MATCH","FULL_MATCH","line","lineMatch","object","method","functionName","typeName","methodName","methodStart","lastIndexOf","slice","objectEnd","indexOf","UNKNOWN_FUNCTION","decodeURI","module","function","lineno","_parseIntOrUndefined","colno","in_app","nodeStackLineParser","input","parseInt"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/node-stack-trace.ts"],"sourcesContent":["// This code was originally forked from https://github.com/felixge/node-stack-trace\n// Since then it has been highly modified to fit our needs.\n\n// Copyright (c) 2011 Felix GeisendÃ¶rfer (felix@debuggable.com)//\n//\n//  Permission is hereby granted, free of charge, to any person obtaining a copy\n//  of this software and associated documentation files (the \"Software\"), to deal\n//  in the Software without restriction, including without limitation the rights\n//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n//  copies of the Software, and to permit persons to whom the Software is\n//  furnished to do so, subject to the following conditions://\n//\n//  The above copyright notice and this permission notice shall be included in\n//  all copies or substantial portions of the Software.//\n//\n//  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n//  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n//  THE SOFTWARE.\n\nimport type { StackLineParser, StackLineParserFn } from '../types-hoist/stacktrace';\nimport { UNKNOWN_FUNCTION } from './stacktrace';\n\nexport type GetModuleFn = (filename: string | undefined) => string | undefined;\n\n/**\n * Does this filename look like it's part of the app code?\n */\nexport function filenameIsInApp(filename: string, isNative: boolean = false): boolean {\n  const isInternal =\n    isNative ||\n    (filename &&\n      // It's not internal if it's an absolute linux path\n      !filename.startsWith('/') &&\n      // It's not internal if it's an absolute windows path\n      !filename.match(/^[A-Z]:/) &&\n      // It's not internal if the path is starting with a dot\n      !filename.startsWith('.') &&\n      // It's not internal if the frame has a protocol. In node, this is usually the case if the file got pre-processed with a bundler like webpack\n      !filename.match(/^[a-zA-Z]([a-zA-Z0-9.\\-+])*:\\/\\//)); // Schema from: https://stackoverflow.com/a/3641782\n\n  // in_app is all that's not an internal Node function or a module within node_modules\n  // note that isNative appears to return true even for node core libraries\n  // see https://github.com/getsentry/raven-node/issues/176\n\n  return !isInternal && filename !== undefined && !filename.includes('node_modules/');\n}\n\n/** Node Stack line parser */\nexport function node(getModule?: GetModuleFn): StackLineParserFn {\n  const FILENAME_MATCH = /^\\s*[-]{4,}$/;\n  const FULL_MATCH = /at (?:async )?(?:(.+?)\\s+\\()?(?:(.+):(\\d+):(\\d+)?|([^)]+))\\)?/;\n\n  // eslint-disable-next-line complexity\n  return (line: string) => {\n    const lineMatch = line.match(FULL_MATCH);\n\n    if (lineMatch) {\n      let object: string | undefined;\n      let method: string | undefined;\n      let functionName: string | undefined;\n      let typeName: string | undefined;\n      let methodName: string | undefined;\n\n      if (lineMatch[1]) {\n        functionName = lineMatch[1];\n\n        let methodStart = functionName.lastIndexOf('.');\n        if (functionName[methodStart - 1] === '.') {\n          methodStart--;\n        }\n\n        if (methodStart > 0) {\n          object = functionName.slice(0, methodStart);\n          method = functionName.slice(methodStart + 1);\n          const objectEnd = object.indexOf('.Module');\n          if (objectEnd > 0) {\n            functionName = functionName.slice(objectEnd + 1);\n            object = object.slice(0, objectEnd);\n          }\n        }\n        typeName = undefined;\n      }\n\n      if (method) {\n        typeName = object;\n        methodName = method;\n      }\n\n      if (method === '<anonymous>') {\n        methodName = undefined;\n        functionName = undefined;\n      }\n\n      if (functionName === undefined) {\n        methodName = methodName || UNKNOWN_FUNCTION;\n        functionName = typeName ? `${typeName}.${methodName}` : methodName;\n      }\n\n      let filename = lineMatch[2]?.startsWith('file://') ? lineMatch[2].slice(7) : lineMatch[2];\n      const isNative = lineMatch[5] === 'native';\n\n      // If it's a Windows path, trim the leading slash so that `/C:/foo` becomes `C:/foo`\n      if (filename?.match(/\\/[A-Z]:/)) {\n        filename = filename.slice(1);\n      }\n\n      if (!filename && lineMatch[5] && !isNative) {\n        filename = lineMatch[5];\n      }\n\n      return {\n        filename: filename ? decodeURI(filename) : undefined,\n        module: getModule ? getModule(filename) : undefined,\n        function: functionName,\n        lineno: _parseIntOrUndefined(lineMatch[3]),\n        colno: _parseIntOrUndefined(lineMatch[4]),\n        in_app: filenameIsInApp(filename || '', isNative),\n      };\n    }\n\n    if (line.match(FILENAME_MATCH)) {\n      return {\n        filename: line,\n      };\n    }\n\n    return undefined;\n  };\n}\n\n/**\n * Node.js stack line parser\n *\n * This is in @sentry/core so it can be used from the Electron SDK in the browser for when `nodeIntegration == true`.\n * This allows it to be used without referencing or importing any node specific code which causes bundlers to complain\n */\nexport function nodeStackLineParser(getModule?: GetModuleFn): StackLineParser {\n  return [90, node(getModule)];\n}\n\nfunction _parseIntOrUndefined(input: string | undefined): number | undefined {\n  return parseInt(input || '', 10) || undefined;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}