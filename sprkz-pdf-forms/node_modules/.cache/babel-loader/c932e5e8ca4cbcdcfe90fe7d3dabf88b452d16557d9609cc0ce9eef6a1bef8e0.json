{"ast":null,"code":"import { getInteractionCount } from './polyfills/interactionCountPolyfill.js';\n\n/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n// Used to store the interaction count after a bfcache restore, since p98\n// interaction latencies should only consider the current navigation.\nlet prevInteractionCount = 0;\n\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = () => {\n  return getInteractionCount() - prevInteractionCount;\n};\n\n/**\n *\n */\nclass InteractionManager {\n  constructor() {\n    InteractionManager.prototype.__init.call(this);\n    InteractionManager.prototype.__init2.call(this);\n  }\n  /**\n   * A list of longest interactions on the page (by latency) sorted so the\n   * longest one is first. The list is at most MAX_INTERACTIONS_TO_CONSIDER\n   * long.\n   */\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  __init() {\n    this._longestInteractionList = [];\n  }\n\n  /**\n   * A mapping of longest interactions by their interaction ID.\n   * This is used for faster lookup.\n   */\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  __init2() {\n    this._longestInteractionMap = new Map();\n  }\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility, jsdoc/require-jsdoc\n  _resetInteractions() {\n    prevInteractionCount = getInteractionCount();\n    this._longestInteractionList.length = 0;\n    this._longestInteractionMap.clear();\n  }\n\n  /**\n   * Returns the estimated p98 longest interaction based on the stored\n   * interaction candidates and the interaction count for the current page.\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _estimateP98LongestInteraction() {\n    const candidateInteractionIndex = Math.min(this._longestInteractionList.length - 1, Math.floor(getInteractionCountForNavigation() / 50));\n    return this._longestInteractionList[candidateInteractionIndex];\n  }\n\n  /**\n   * Takes a performance entry and adds it to the list of worst interactions\n   * if its duration is long enough to make it among the worst. If the\n   * entry is part of an existing interaction, it is merged and the latency\n   * and entries list is updated as needed.\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _processEntry(entry) {\n    this._onBeforeProcessingEntry?.(entry);\n\n    // Skip further processing for entries that cannot be INP candidates.\n    if (!(entry.interactionId || entry.entryType === 'first-input')) return;\n\n    // The least-long of the 10 longest interactions.\n    const minLongestInteraction = this._longestInteractionList.at(-1);\n    let interaction = this._longestInteractionMap.get(entry.interactionId);\n\n    // Only process the entry if it's possibly one of the ten longest,\n    // or if it's part of an existing interaction.\n    if (interaction || this._longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||\n    // If the above conditions are false, `minLongestInteraction` will be set.\n    entry.duration > minLongestInteraction._latency) {\n      // If the interaction already exists, update it. Otherwise create one.\n      if (interaction) {\n        // If the new entry has a longer duration, replace the old entries,\n        // otherwise add to the array.\n        if (entry.duration > interaction._latency) {\n          interaction.entries = [entry];\n          interaction._latency = entry.duration;\n        } else if (entry.duration === interaction._latency && entry.startTime === interaction.entries[0].startTime) {\n          interaction.entries.push(entry);\n        }\n      } else {\n        interaction = {\n          id: entry.interactionId,\n          entries: [entry],\n          _latency: entry.duration\n        };\n        this._longestInteractionMap.set(interaction.id, interaction);\n        this._longestInteractionList.push(interaction);\n      }\n\n      // Sort the entries by latency (descending) and keep only the top ten.\n      this._longestInteractionList.sort((a, b) => b._latency - a._latency);\n      if (this._longestInteractionList.length > MAX_INTERACTIONS_TO_CONSIDER) {\n        const removedInteractions = this._longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER);\n        for (const interaction of removedInteractions) {\n          this._longestInteractionMap.delete(interaction.id);\n        }\n      }\n\n      // Call any post-processing on the interaction\n      this._onAfterProcessingINPCandidate?.(interaction);\n    }\n  }\n}\nexport { InteractionManager };","map":{"version":3,"names":["MAX_INTERACTIONS_TO_CONSIDER","prevInteractionCount","getInteractionCountForNavigation","getInteractionCount","InteractionManager","constructor","prototype","__init","call","__init2","_longestInteractionList","_longestInteractionMap","Map","_resetInteractions","length","clear","_estimateP98LongestInteraction","candidateInteractionIndex","Math","min","floor","_processEntry","entry","_onBeforeProcessingEntry","interactionId","entryType","minLongestInteraction","at","interaction","get","duration","_latency","entries","startTime","push","id","set","sort","a","b","removedInteractions","splice","delete","_onAfterProcessingINPCandidate"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/InteractionManager.ts"],"sourcesContent":["/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInteractionCount } from './polyfills/interactionCountPolyfill.js';\n\nexport interface Interaction {\n  _latency: number;\n  // While the `id` and `entries` properties are also internal and could be\n  // mangled by prefixing with an underscore, since they correspond to public\n  // symbols there is no need to mangle them as the library will compress\n  // better if we reuse the existing names.\n  id: number;\n  entries: PerformanceEventTiming[];\n}\n\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n// Used to store the interaction count after a bfcache restore, since p98\n// interaction latencies should only consider the current navigation.\nlet prevInteractionCount = 0;\n\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = () => {\n  return getInteractionCount() - prevInteractionCount;\n};\n\n/**\n *\n */\nexport class InteractionManager {\n  /**\n   * A list of longest interactions on the page (by latency) sorted so the\n   * longest one is first. The list is at most MAX_INTERACTIONS_TO_CONSIDER\n   * long.\n   */\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  _longestInteractionList: Interaction[] = [];\n\n  /**\n   * A mapping of longest interactions by their interaction ID.\n   * This is used for faster lookup.\n   */\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  _longestInteractionMap: Map<number, Interaction> = new Map();\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _onBeforeProcessingEntry?: (entry: PerformanceEventTiming) => void;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _onAfterProcessingINPCandidate?: (interaction: Interaction) => void;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility, jsdoc/require-jsdoc\n  _resetInteractions() {\n    prevInteractionCount = getInteractionCount();\n    this._longestInteractionList.length = 0;\n    this._longestInteractionMap.clear();\n  }\n\n  /**\n   * Returns the estimated p98 longest interaction based on the stored\n   * interaction candidates and the interaction count for the current page.\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _estimateP98LongestInteraction() {\n    const candidateInteractionIndex = Math.min(\n      this._longestInteractionList.length - 1,\n      Math.floor(getInteractionCountForNavigation() / 50),\n    );\n\n    return this._longestInteractionList[candidateInteractionIndex];\n  }\n\n  /**\n   * Takes a performance entry and adds it to the list of worst interactions\n   * if its duration is long enough to make it among the worst. If the\n   * entry is part of an existing interaction, it is merged and the latency\n   * and entries list is updated as needed.\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _processEntry(entry: PerformanceEventTiming) {\n    this._onBeforeProcessingEntry?.(entry);\n\n    // Skip further processing for entries that cannot be INP candidates.\n    if (!(entry.interactionId || entry.entryType === 'first-input')) return;\n\n    // The least-long of the 10 longest interactions.\n    const minLongestInteraction = this._longestInteractionList.at(-1);\n\n    let interaction = this._longestInteractionMap.get(entry.interactionId!);\n\n    // Only process the entry if it's possibly one of the ten longest,\n    // or if it's part of an existing interaction.\n    if (\n      interaction ||\n      this._longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||\n      // If the above conditions are false, `minLongestInteraction` will be set.\n      entry.duration > minLongestInteraction!._latency\n    ) {\n      // If the interaction already exists, update it. Otherwise create one.\n      if (interaction) {\n        // If the new entry has a longer duration, replace the old entries,\n        // otherwise add to the array.\n        if (entry.duration > interaction._latency) {\n          interaction.entries = [entry];\n          interaction._latency = entry.duration;\n        } else if (entry.duration === interaction._latency && entry.startTime === interaction.entries[0]!.startTime) {\n          interaction.entries.push(entry);\n        }\n      } else {\n        interaction = {\n          id: entry.interactionId!,\n          entries: [entry],\n          _latency: entry.duration,\n        };\n        this._longestInteractionMap.set(interaction.id, interaction);\n        this._longestInteractionList.push(interaction);\n      }\n\n      // Sort the entries by latency (descending) and keep only the top ten.\n      this._longestInteractionList.sort((a, b) => b._latency - a._latency);\n      if (this._longestInteractionList.length > MAX_INTERACTIONS_TO_CONSIDER) {\n        const removedInteractions = this._longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER);\n\n        for (const interaction of removedInteractions) {\n          this._longestInteractionMap.delete(interaction.id);\n        }\n      }\n\n      // Call any post-processing on the interaction\n      this._onAfterProcessingINPCandidate?.(interaction);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}