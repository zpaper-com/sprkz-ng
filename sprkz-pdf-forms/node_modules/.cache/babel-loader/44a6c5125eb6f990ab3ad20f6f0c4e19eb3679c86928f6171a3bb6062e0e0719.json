{"ast":null,"code":"import { isString } from './is.js';\nimport { GLOBAL_OBJ } from './worldwide.js';\nconst WINDOW = GLOBAL_OBJ;\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction htmlTreeAsString(elem, options = {}) {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = !Array.isArray(options) && options.maxStringLength || DEFAULT_MAX_STRING_LENGTH;\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength) {\n        break;\n      }\n      out.push(nextStr);\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n    return out.reverse().join(separator);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el, keyAttrs) {\n  const elem = el;\n  const out = [];\n  if (!elem?.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)]) : null;\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n    const className = elem.className;\n    if (className && isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nfunction getLocationHref() {\n  try {\n    return WINDOW.document.location.href;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nfunction getComponentName(elem) {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n  let currentElem = elem;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n    currentElem = currentElem.parentNode;\n  }\n  return null;\n}\nexport { getComponentName, getLocationHref, htmlTreeAsString };","map":{"version":3,"names":["WINDOW","GLOBAL_OBJ","DEFAULT_MAX_STRING_LENGTH","htmlTreeAsString","elem","options","currentElem","MAX_TRAVERSE_HEIGHT","out","height","len","separator","sepLength","length","nextStr","keyAttrs","Array","isArray","maxStringLength","_htmlElementAsString","push","parentNode","reverse","join","el","tagName","HTMLElement","dataset","toLowerCase","keyAttrPairs","filter","keyAttr","getAttribute","map","forEach","keyAttrPair","id","className","isString","classes","split","c","allowedAttrs","k","attr","getLocationHref","document","location","href","getComponentName","i"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/browser.ts"],"sourcesContent":["import { isString } from './is';\nimport { GLOBAL_OBJ } from './worldwide';\n\nconst WINDOW = GLOBAL_OBJ as unknown as Window;\n\nconst DEFAULT_MAX_STRING_LENGTH = 80;\n\ntype SimpleNode = {\n  parentNode: SimpleNode;\n} | null;\n\n/**\n * Given a child DOM element, returns a query-selector statement describing that\n * and its ancestors\n * e.g. [HTMLElement] => body > div > input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nexport function htmlTreeAsString(\n  elem: unknown,\n  options: string[] | { keyAttrs?: string[]; maxStringLength?: number } = {},\n): string {\n  if (!elem) {\n    return '<unknown>';\n  }\n\n  // try/catch both:\n  // - accessing event.target (see getsentry/raven-js#838, #768)\n  // - `htmlTreeAsString` because it's complex, and just accessing the DOM incorrectly\n  // - can throw an exception in some circumstances.\n  try {\n    let currentElem = elem as SimpleNode;\n    const MAX_TRAVERSE_HEIGHT = 5;\n    const out = [];\n    let height = 0;\n    let len = 0;\n    const separator = ' > ';\n    const sepLength = separator.length;\n    let nextStr;\n    const keyAttrs = Array.isArray(options) ? options : options.keyAttrs;\n    const maxStringLength = (!Array.isArray(options) && options.maxStringLength) || DEFAULT_MAX_STRING_LENGTH;\n\n    while (currentElem && height++ < MAX_TRAVERSE_HEIGHT) {\n      nextStr = _htmlElementAsString(currentElem, keyAttrs);\n      // bail out if\n      // - nextStr is the 'html' element\n      // - the length of the string that would be created exceeds maxStringLength\n      //   (ignore this limit if we are on the first iteration)\n      if (nextStr === 'html' || (height > 1 && len + out.length * sepLength + nextStr.length >= maxStringLength)) {\n        break;\n      }\n\n      out.push(nextStr);\n\n      len += nextStr.length;\n      currentElem = currentElem.parentNode;\n    }\n\n    return out.reverse().join(separator);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/**\n * Returns a simple, query-selector representation of a DOM element\n * e.g. [HTMLElement] => input#foo.btn[name=baz]\n * @returns generated DOM path\n */\nfunction _htmlElementAsString(el: unknown, keyAttrs?: string[]): string {\n  const elem = el as {\n    tagName?: string;\n    id?: string;\n    className?: string;\n    getAttribute(key: string): string;\n  };\n\n  const out = [];\n\n  if (!elem?.tagName) {\n    return '';\n  }\n\n  // @ts-expect-error WINDOW has HTMLElement\n  if (WINDOW.HTMLElement) {\n    // If using the component name annotation plugin, this value may be available on the DOM node\n    if (elem instanceof HTMLElement && elem.dataset) {\n      if (elem.dataset['sentryComponent']) {\n        return elem.dataset['sentryComponent'];\n      }\n      if (elem.dataset['sentryElement']) {\n        return elem.dataset['sentryElement'];\n      }\n    }\n  }\n\n  out.push(elem.tagName.toLowerCase());\n\n  // Pairs of attribute keys defined in `serializeAttribute` and their values on element.\n  const keyAttrPairs = keyAttrs?.length\n    ? keyAttrs.filter(keyAttr => elem.getAttribute(keyAttr)).map(keyAttr => [keyAttr, elem.getAttribute(keyAttr)])\n    : null;\n\n  if (keyAttrPairs?.length) {\n    keyAttrPairs.forEach(keyAttrPair => {\n      out.push(`[${keyAttrPair[0]}=\"${keyAttrPair[1]}\"]`);\n    });\n  } else {\n    if (elem.id) {\n      out.push(`#${elem.id}`);\n    }\n\n    const className = elem.className;\n    if (className && isString(className)) {\n      const classes = className.split(/\\s+/);\n      for (const c of classes) {\n        out.push(`.${c}`);\n      }\n    }\n  }\n  const allowedAttrs = ['aria-label', 'type', 'name', 'title', 'alt'];\n  for (const k of allowedAttrs) {\n    const attr = elem.getAttribute(k);\n    if (attr) {\n      out.push(`[${k}=\"${attr}\"]`);\n    }\n  }\n\n  return out.join('');\n}\n\n/**\n * A safe form of location.href\n */\nexport function getLocationHref(): string {\n  try {\n    return WINDOW.document.location.href;\n  } catch {\n    return '';\n  }\n}\n\n/**\n * Given a DOM element, traverses up the tree until it finds the first ancestor node\n * that has the `data-sentry-component` or `data-sentry-element` attribute with `data-sentry-component` taking\n * precedence. This attribute is added at build-time by projects that have the component name annotation plugin installed.\n *\n * @returns a string representation of the component for the provided DOM element, or `null` if not found\n */\nexport function getComponentName(elem: unknown): string | null {\n  // @ts-expect-error WINDOW has HTMLElement\n  if (!WINDOW.HTMLElement) {\n    return null;\n  }\n\n  let currentElem = elem as SimpleNode;\n  const MAX_TRAVERSE_HEIGHT = 5;\n  for (let i = 0; i < MAX_TRAVERSE_HEIGHT; i++) {\n    if (!currentElem) {\n      return null;\n    }\n\n    if (currentElem instanceof HTMLElement) {\n      if (currentElem.dataset['sentryComponent']) {\n        return currentElem.dataset['sentryComponent'];\n      }\n      if (currentElem.dataset['sentryElement']) {\n        return currentElem.dataset['sentryElement'];\n      }\n    }\n\n    currentElem = currentElem.parentNode;\n  }\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}