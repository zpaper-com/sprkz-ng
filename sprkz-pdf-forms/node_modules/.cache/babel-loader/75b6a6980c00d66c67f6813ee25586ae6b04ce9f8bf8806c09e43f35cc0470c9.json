{"ast":null,"code":"var _jsxFileName = \"/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/src/components/pdf/PDFFormContainer.tsx\";\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport { Box, AppBar, Toolbar, Typography, IconButton, Alert, Snackbar, useTheme, useMediaQuery } from '@mui/material';\nimport { Menu as MenuIcon, ZoomIn, ZoomOut, NavigateBefore, NavigateNext } from '@mui/icons-material';\nimport { PDFViewer } from './PDFViewer';\nimport { ThumbnailSidebar } from './ThumbnailSidebar';\nimport { PDFService } from '../../services/pdfService';\nimport { FormFieldService } from '../../services/formFieldService';\nimport { WizardButton } from '../wizard/WizardButton';\nimport { ProgressTracker } from '../ui/ProgressTracker';\nimport { useForm } from '../../contexts/FormContext';\nimport { useWizard } from '../../contexts/WizardContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PDFFormContainer = ({\n  className\n}) => {\n  const theme = useTheme();\n  const isMobile = useMediaQuery(theme.breakpoints.down('md'));\n  const formContext = useForm();\n  const wizard = useWizard();\n\n  // PDF state\n  const [pdfDoc, setPdfDoc] = useState(null);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [scale, setScale] = useState(1.0);\n  const [sidebarOpen, setSidebarOpen] = useState(!isMobile);\n\n  // Form tracking state\n  const [completedPages, setCompletedPages] = useState(new Set());\n  const [pagesWithFormFields, setPagesWithFormFields] = useState(new Set());\n\n  // UI state\n  const [error, setError] = useState(null);\n  const [snackbarMessage, setSnackbarMessage] = useState('');\n\n  // Get PDF URL from environment or URL parameters (memoized to prevent re-renders)\n  const pdfUrl = useMemo(() => PDFService.getDefaultPDFUrl(), []);\n\n  // Handle document load\n  const handleDocumentLoad = useCallback(async document => {\n    setPdfDoc(document);\n    setCurrentPage(1);\n    console.log(`PDF document loaded: ${document.numPages} pages`);\n    try {\n      // Extract all form fields from the document\n      const allFormFields = await FormFieldService.extractAllFormFields(document);\n\n      // Initialize form context with extracted fields\n      formContext.initializeFields(allFormFields);\n\n      // Initialize wizard with form fields\n      wizard.initializeWizard(allFormFields);\n\n      // Track pages with form fields\n      const pagesWithForms = new Set();\n      allFormFields.forEach(field => {\n        pagesWithForms.add(field.page);\n      });\n      setPagesWithFormFields(pagesWithForms);\n\n      // Show status message\n      if (allFormFields.length > 0) {\n        const categories = FormFieldService.categorizeFields(allFormFields);\n        setSnackbarMessage(`Found ${categories.required.length} required fields and ${categories.signature.length} signatures across ${pagesWithForms.size} page(s)`);\n      } else {\n        setSnackbarMessage('No form fields found in this PDF');\n      }\n    } catch (error) {\n      console.error('Failed to extract form fields:', error);\n      setSnackbarMessage('Error extracting form fields from PDF');\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Remove dependencies to prevent reloading\n\n  // Handle page load\n  const handlePageLoad = useCallback(page => {\n    console.log(`Page ${page.pageNumber} loaded and rendered`);\n  }, []);\n\n  // Handle PDF errors\n  const handleError = useCallback(error => {\n    setError(error);\n    console.error('PDF error:', error);\n  }, []);\n\n  // Navigation handlers\n  const handlePageSelect = useCallback(pageNumber => {\n    if (pdfDoc && pageNumber >= 1 && pageNumber <= pdfDoc.numPages) {\n      setCurrentPage(pageNumber);\n\n      // Auto-close sidebar on mobile after selection\n      if (isMobile) {\n        setSidebarOpen(false);\n      }\n    }\n  }, [pdfDoc, isMobile]);\n  const handlePreviousPage = useCallback(() => {\n    if (currentPage > 1) {\n      setCurrentPage(currentPage - 1);\n    }\n  }, [currentPage]);\n  const handleNextPage = useCallback(() => {\n    if (pdfDoc && currentPage < pdfDoc.numPages) {\n      setCurrentPage(currentPage + 1);\n    }\n  }, [pdfDoc, currentPage]);\n\n  // Zoom handlers\n  const handleZoomIn = useCallback(() => {\n    setScale(prevScale => Math.min(prevScale * 1.25, 3.0));\n  }, []);\n  const handleZoomOut = useCallback(() => {\n    setScale(prevScale => Math.max(prevScale / 1.25, 0.5));\n  }, []);\n\n  // Toggle sidebar\n  const handleToggleSidebar = useCallback(() => {\n    setSidebarOpen(!sidebarOpen);\n  }, [sidebarOpen]);\n\n  // Cleanup on unmount\n  useEffect(() => {\n    return () => {\n      if (pdfUrl) {\n        PDFService.cleanup(pdfUrl);\n      }\n    };\n  }, [pdfUrl]);\n\n  // Close error alert\n  const handleCloseError = () => {\n    setError(null);\n  };\n\n  // Close snackbar\n  const handleCloseSnackbar = () => {\n    setSnackbarMessage('');\n  };\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: className,\n    sx: {\n      height: '100vh',\n      display: 'flex',\n      flexDirection: 'column'\n    },\n    children: [/*#__PURE__*/_jsxDEV(AppBar, {\n      position: \"static\",\n      color: \"default\",\n      elevation: 1,\n      children: /*#__PURE__*/_jsxDEV(Toolbar, {\n        variant: \"dense\",\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          edge: \"start\",\n          onClick: handleToggleSidebar,\n          \"aria-label\": \"toggle sidebar\",\n          sx: {\n            mr: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(MenuIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          sx: {\n            flexGrow: 1,\n            fontSize: '1rem'\n          },\n          children: [\"Sprkz PDF Forms\", pdfDoc && /*#__PURE__*/_jsxDEV(Typography, {\n            component: \"span\",\n            variant: \"body2\",\n            sx: {\n              ml: 2,\n              color: 'text.secondary'\n            },\n            children: [\"Page \", currentPage, \" of \", pdfDoc.numPages]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 181,\n          columnNumber: 11\n        }, this), wizard.state.totalRequiredFields > 0 && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            mr: 2\n          },\n          children: /*#__PURE__*/_jsxDEV(WizardButton, {\n            size: \"small\",\n            showProgress: false,\n            showGuidance: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 193,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            display: 'flex',\n            alignItems: 'center',\n            gap: 1\n          },\n          children: [/*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: handlePreviousPage,\n            disabled: currentPage <= 1,\n            size: \"small\",\n            children: /*#__PURE__*/_jsxDEV(NavigateBefore, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 204,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 199,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: handleNextPage,\n            disabled: !pdfDoc || currentPage >= pdfDoc.numPages,\n            size: \"small\",\n            children: /*#__PURE__*/_jsxDEV(NavigateNext, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 212,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 207,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Typography, {\n            variant: \"body2\",\n            sx: {\n              mx: 1,\n              minWidth: 60,\n              textAlign: 'center'\n            },\n            children: [Math.round(scale * 100), \"%\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 215,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: handleZoomOut,\n            disabled: scale <= 0.5,\n            size: \"small\",\n            children: /*#__PURE__*/_jsxDEV(ZoomOut, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 219,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(IconButton, {\n            onClick: handleZoomIn,\n            disabled: scale >= 3.0,\n            size: \"small\",\n            children: /*#__PURE__*/_jsxDEV(ZoomIn, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 224,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 223,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      onClose: handleCloseError,\n      sx: {\n        m: 2\n      },\n      children: [/*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: (error.type || 'Unknown Error').replace(/_/g, ' ').toLowerCase().replace(/\\b\\w/g, l => l.toUpperCase())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        children: error.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 240,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      sx: {\n        display: 'flex',\n        flex: 1,\n        overflow: 'hidden'\n      },\n      children: [/*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          display: 'flex',\n          flexDirection: 'column'\n        },\n        children: [/*#__PURE__*/_jsxDEV(ThumbnailSidebar, {\n          pdfDoc: pdfDoc,\n          currentPage: currentPage,\n          completedPages: completedPages,\n          pagesWithFormFields: pagesWithFormFields,\n          onPageSelect: handlePageSelect,\n          open: sidebarOpen,\n          onToggle: handleToggleSidebar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 250,\n          columnNumber: 11\n        }, this), sidebarOpen && !isMobile && wizard.state.totalRequiredFields > 0 && /*#__PURE__*/_jsxDEV(Box, {\n          sx: {\n            width: 160,\n            p: 1,\n            borderTop: '1px solid',\n            borderColor: 'divider'\n          },\n          children: /*#__PURE__*/_jsxDEV(ProgressTracker, {\n            compact: false,\n            showFieldList: false,\n            showStats: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 249,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Box, {\n        sx: {\n          flex: 1,\n          display: 'flex',\n          justifyContent: 'center',\n          alignItems: 'flex-start',\n          overflow: 'auto',\n          backgroundColor: 'grey.100',\n          p: 2\n        },\n        children: /*#__PURE__*/_jsxDEV(PDFViewer, {\n          // Stabilize component with key\n          url: pdfUrl,\n          scale: scale,\n          currentPage: currentPage,\n          onDocumentLoad: handleDocumentLoad,\n          onPageLoad: handlePageLoad,\n          onError: handleError\n        }, pdfUrl, false, {\n          fileName: _jsxFileName,\n          lineNumber: 284,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 273,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: Boolean(snackbarMessage),\n      autoHideDuration: 4000,\n      onClose: handleCloseSnackbar,\n      message: snackbarMessage,\n      anchorOrigin: {\n        vertical: 'bottom',\n        horizontal: 'center'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 168,\n    columnNumber: 5\n  }, this);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}