{"ast":null,"code":"var _UnleashService;import{UnleashClient}from'@unleash/proxy-client-react';// Unleash configuration\n// Default configuration\nconst DEFAULT_CONFIG={url:process.env.REACT_APP_UNLEASH_PROXY_URL||'',clientKey:process.env.REACT_APP_UNLEASH_CLIENT_KEY||'',refreshInterval:15,// seconds\nappName:'sprkz-pdf-forms',environment:process.env.NODE_ENV||'development'};// Feature flag definitions with types\n// Default feature flag values (fallbacks when Unleash is unavailable)\nexport const DEFAULT_FEATURE_FLAGS={// Core features - enabled by default for MVP\nENHANCED_WIZARD_MODE:true,PROGRESSIVE_FORM_FILLING:true,SMART_FIELD_DETECTION:true,// Signature features - all enabled\nSIGNATURE_DRAWING_MODE:true,SIGNATURE_TYPED_MODE:true,SIGNATURE_UPLOAD_MODE:false,// Not yet implemented\nMULTI_SIGNATURE_SUPPORT:true,// PDF processing - basic features enabled\nADVANCED_PDF_VALIDATION:true,PDF_FIELD_AUTOCOMPLETE:false,// Future feature\nPDF_PREVIEW_MODE:true,BULK_PDF_PROCESSING:false,// Future feature\n// UI/UX features\nDARK_MODE_SUPPORT:false,// Future feature\nACCESSIBILITY_ENHANCEMENTS:true,MOBILE_OPTIMIZATIONS:true,ANIMATION_EFFECTS:true,// Performance features\nPDF_LAZY_LOADING:true,FORM_STATE_PERSISTENCE:true,OFFLINE_MODE_SUPPORT:false,// Future feature\n// Validation and security\nENHANCED_FIELD_VALIDATION:true,SECURITY_AUDIT_LOGGING:false,// Production only\nDATA_ENCRYPTION:false,// Future feature\n// Analytics and monitoring\nUSAGE_ANALYTICS:process.env.NODE_ENV==='production',ERROR_REPORTING:true,// Sentry integration\nPERFORMANCE_MONITORING:true};// Feature flag categories for organization\nexport const FEATURE_CATEGORIES={CORE:['ENHANCED_WIZARD_MODE','PROGRESSIVE_FORM_FILLING','SMART_FIELD_DETECTION'],SIGNATURE:['SIGNATURE_DRAWING_MODE','SIGNATURE_TYPED_MODE','SIGNATURE_UPLOAD_MODE','MULTI_SIGNATURE_SUPPORT'],PDF:['ADVANCED_PDF_VALIDATION','PDF_FIELD_AUTOCOMPLETE','PDF_PREVIEW_MODE','BULK_PDF_PROCESSING'],UI_UX:['DARK_MODE_SUPPORT','ACCESSIBILITY_ENHANCEMENTS','MOBILE_OPTIMIZATIONS','ANIMATION_EFFECTS'],PERFORMANCE:['PDF_LAZY_LOADING','FORM_STATE_PERSISTENCE','OFFLINE_MODE_SUPPORT'],SECURITY:['ENHANCED_FIELD_VALIDATION','SECURITY_AUDIT_LOGGING','DATA_ENCRYPTION'],MONITORING:['USAGE_ANALYTICS','ERROR_REPORTING','PERFORMANCE_MONITORING']};// Unleash service class\nexport class UnleashService{constructor(config){this.client=null;this.config=void 0;this.isInitialized=false;this.listeners=new Set();this.config={...DEFAULT_CONFIG,...config};}static getInstance(config){if(!UnleashService.instance){UnleashService.instance=new UnleashService(config);}return UnleashService.instance;}// Initialize the Unleash client\nasync initialize(context){if(this.isInitialized){return;}// Skip initialization if no URL or client key is provided\nif(!this.config.url||!this.config.clientKey){console.log('Unleash not configured - using fallback flags');this.isInitialized=true;this.notifyListeners();return;}try{// Create Unleash client\nthis.client=new UnleashClient({url:this.config.url,clientKey:this.config.clientKey,refreshInterval:this.config.refreshInterval,appName:this.config.appName,environment:this.config.environment,context:{userId:this.config.userId||this.generateUserId(),sessionId:this.config.sessionId||this.generateSessionId(),...context}});// Start the client\nthis.client.start();// Wait for initial fetch\nawait this.client.on('ready',()=>{console.log('Unleash client initialized successfully');this.isInitialized=true;this.notifyListeners();});// Handle errors\nthis.client.on('error',error=>{console.error('Unleash client error:',error);// Continue with default flags on error\nthis.isInitialized=true;});// Handle updates\nthis.client.on('update',()=>{console.log('Feature flags updated');this.notifyListeners();});}catch(error){console.error('Failed to initialize Unleash:',error);// Continue with default flags\nthis.isInitialized=true;}}// Check if a feature flag is enabled\nisEnabled(flagName,context){if(!this.client||!this.isInitialized){return DEFAULT_FEATURE_FLAGS[flagName];}try{return this.client.isEnabled(flagName,context);}catch(error){console.warn(`Failed to check feature flag ${flagName}:`,error);return DEFAULT_FEATURE_FLAGS[flagName];}}// Get variant for a feature flag\ngetVariant(flagName,context){if(!this.client||!this.isInitialized){return null;}try{return this.client.getVariant(flagName,context);}catch(error){console.warn(`Failed to get variant for ${flagName}:`,error);return null;}}// Get all feature flags as an object\ngetAllFlags(context){const flags={};for(const flagName of Object.keys(DEFAULT_FEATURE_FLAGS)){flags[flagName]=this.isEnabled(flagName,context);}return flags;}// Subscribe to flag changes\nsubscribe(listener){this.listeners.add(listener);// Return unsubscribe function\nreturn()=>{this.listeners.delete(listener);};}// Update context (useful for user-specific flags)\nupdateContext(context){if(this.client){this.client.updateContext(context);}}// Get feature flags by category\ngetFlagsByCategory(category,context){const categoryFlags=FEATURE_CATEGORIES[category];const flags={};for(const flagName of categoryFlags){flags[flagName]=this.isEnabled(flagName,context);}return flags;}// Utility methods for debugging\ngetStatus(){return{initialized:this.isInitialized,clientReady:!!this.client,flagCount:Object.keys(DEFAULT_FEATURE_FLAGS).length};}// Generate unique user ID for session\ngenerateUserId(){return`user-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;}// Generate session ID\ngenerateSessionId(){return`session-${Date.now()}-${Math.random().toString(36).substr(2,9)}`;}// Notify all listeners of changes\nnotifyListeners(){this.listeners.forEach(listener=>{try{listener();}catch(error){console.error('Error in feature flag listener:',error);}});}// Clean up resources\ndestroy(){if(this.client){this.client.stop();this.client=null;}this.listeners.clear();this.isInitialized=false;}}// Singleton instance\n_UnleashService=UnleashService;UnleashService.instance=void 0;export const unleashService=UnleashService.getInstance();// Utility function to check individual flags (for convenience)\nexport const isFeatureEnabled=(flagName,context)=>{return unleashService.isEnabled(flagName,context);};// Utility function to get feature variant\nexport const getFeatureVariant=(flagName,context)=>{return unleashService.getVariant(flagName,context);};export default UnleashService;","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}