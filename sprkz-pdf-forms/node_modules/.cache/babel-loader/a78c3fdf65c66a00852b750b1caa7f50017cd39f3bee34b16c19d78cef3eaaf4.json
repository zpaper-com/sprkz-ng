{"ast":null,"code":"import { isThenable } from './is.js';\n\n/**\n * Wrap a callback function with error handling.\n * If an error is thrown, it will be passed to the `onError` callback and re-thrown.\n *\n * If the return value of the function is a promise, it will be handled with `maybeHandlePromiseRejection`.\n *\n * If an `onFinally` callback is provided, this will be called when the callback has finished\n * - so if it returns a promise, once the promise resolved/rejected,\n * else once the callback has finished executing.\n * The `onFinally` callback will _always_ be called, no matter if an error was thrown or not.\n */\nfunction handleCallbackErrors(fn, onError) {\n  let onFinally = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : () => {};\n  let maybePromiseResult;\n  try {\n    maybePromiseResult = fn();\n  } catch (e) {\n    onError(e);\n    onFinally();\n    throw e;\n  }\n  return maybeHandlePromiseRejection(maybePromiseResult, onError, onFinally);\n}\n\n/**\n * Maybe handle a promise rejection.\n * This expects to be given a value that _may_ be a promise, or any other value.\n * If it is a promise, and it rejects, it will call the `onError` callback.\n * Other than this, it will generally return the given value as-is.\n */\nfunction maybeHandlePromiseRejection(value, onError, onFinally) {\n  if (isThenable(value)) {\n    // @ts-expect-error - the isThenable check returns the \"wrong\" type here\n    return value.then(res => {\n      onFinally();\n      return res;\n    }, e => {\n      onError(e);\n      onFinally();\n      throw e;\n    });\n  }\n  onFinally();\n  return value;\n}\nexport { handleCallbackErrors };\n//# sourceMappingURL=handleCallbackErrors.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}