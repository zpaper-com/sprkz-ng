{"ast":null,"code":"import { timestampInSeconds, debug, spanToJSON, uuid4, getCurrentScope } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../helpers.js';\nimport { isAutomatedPageLoadSpan, startJSSelfProfile, MAX_PROFILE_DURATION_MS, addProfileToGlobalCache } from './utils.js';\n\n/**\n * Wraps startTransaction and stopTransaction with profiling related logic.\n * startProfileForTransaction is called after the call to startTransaction in order to avoid our own code from\n * being profiled. Because of that same reason, stopProfiling is called before the call to stopTransaction.\n */\nfunction startProfileForSpan(span) {\n  // Start the profiler and get the profiler instance.\n  let startTimestamp;\n  if (isAutomatedPageLoadSpan(span)) {\n    startTimestamp = timestampInSeconds() * 1000;\n  }\n  const profiler = startJSSelfProfile();\n\n  // We failed to construct the profiler, so we skip.\n  // No need to log anything as this has already been logged in startProfile.\n  if (!profiler) {\n    return;\n  }\n  if (DEBUG_BUILD) {\n    debug.log(`[Profiling] started profiling span: ${spanToJSON(span).description}`);\n  }\n\n  // We create \"unique\" span names to avoid concurrent spans with same names\n  // from being ignored by the profiler. From here on, only this span name should be used when\n  // calling the profiler methods. Note: we log the original name to the user to avoid confusion.\n  const profileId = uuid4();\n  getCurrentScope().setContext('profile', {\n    profile_id: profileId,\n    start_timestamp: startTimestamp\n  });\n\n  /**\n   * Idempotent handler for profile stop\n   */\n  async function onProfileHandler() {\n    // Check if the profile exists and return it the behavior has to be idempotent as users may call span.finish multiple times.\n    if (!span) {\n      return;\n    }\n    // Satisfy the type checker, but profiler will always be defined here.\n    if (!profiler) {\n      return;\n    }\n    return profiler.stop().then(profile => {\n      if (maxDurationTimeoutID) {\n        WINDOW.clearTimeout(maxDurationTimeoutID);\n        maxDurationTimeoutID = undefined;\n      }\n      if (DEBUG_BUILD) {\n        debug.log(`[Profiling] stopped profiling of span: ${spanToJSON(span).description}`);\n      }\n\n      // In case of an overlapping span, stopProfiling may return null and silently ignore the overlapping profile.\n      if (!profile) {\n        if (DEBUG_BUILD) {\n          debug.log(`[Profiling] profiler returned null profile for: ${spanToJSON(span).description}`, 'this may indicate an overlapping span or a call to stopProfiling with a profile title that was never started');\n        }\n        return;\n      }\n      addProfileToGlobalCache(profileId, profile);\n    }).catch(error => {\n      if (DEBUG_BUILD) {\n        debug.log('[Profiling] error while stopping profiler:', error);\n      }\n    });\n  }\n\n  // Enqueue a timeout to prevent profiles from running over max duration.\n  let maxDurationTimeoutID = WINDOW.setTimeout(() => {\n    if (DEBUG_BUILD) {\n      debug.log('[Profiling] max profile duration elapsed, stopping profiling for:', spanToJSON(span).description);\n    }\n    // If the timeout exceeds, we want to stop profiling, but not finish the span\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    onProfileHandler();\n  }, MAX_PROFILE_DURATION_MS);\n\n  // We need to reference the original end call to avoid creating an infinite loop\n  const originalEnd = span.end.bind(span);\n\n  /**\n   * Wraps span `end()` with profiling related logic.\n   * startProfiling is called after the call to spanStart in order to avoid our own code from\n   * being profiled. Because of that same reason, stopProfiling is called before the call to spanEnd.\n   */\n  function profilingWrappedSpanEnd() {\n    if (!span) {\n      return originalEnd();\n    }\n    // onProfileHandler should always return the same profile even if this is called multiple times.\n    // Always call onProfileHandler to ensure stopProfiling is called and the timeout is cleared.\n    void onProfileHandler().then(() => {\n      originalEnd();\n    }, () => {\n      // If onProfileHandler fails, we still want to call the original finish method.\n      originalEnd();\n    });\n    return span;\n  }\n  span.end = profilingWrappedSpanEnd;\n}\nexport { startProfileForSpan };","map":{"version":3,"names":["startProfileForSpan","span","startTimestamp","isAutomatedPageLoadSpan","timestampInSeconds","profiler","startJSSelfProfile","DEBUG_BUILD","debug","log","spanToJSON","description","profileId","uuid4","getCurrentScope","setContext","profile_id","start_timestamp","onProfileHandler","stop","then","profile","maxDurationTimeoutID","WINDOW","clearTimeout","undefined","addProfileToGlobalCache","catch","error","setTimeout","MAX_PROFILE_DURATION_MS","originalEnd","end","bind","profilingWrappedSpanEnd"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/profiling/startProfileForSpan.ts"],"sourcesContent":["import type { Span } from '@sentry/core';\nimport { debug, getCurrentScope, spanToJSON, timestampInSeconds, uuid4 } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\nimport type { JSSelfProfile } from './jsSelfProfiling';\nimport { addProfileToGlobalCache, isAutomatedPageLoadSpan, MAX_PROFILE_DURATION_MS, startJSSelfProfile } from './utils';\n\n/**\n * Wraps startTransaction and stopTransaction with profiling related logic.\n * startProfileForTransaction is called after the call to startTransaction in order to avoid our own code from\n * being profiled. Because of that same reason, stopProfiling is called before the call to stopTransaction.\n */\nexport function startProfileForSpan(span: Span): void {\n  // Start the profiler and get the profiler instance.\n  let startTimestamp: number | undefined;\n  if (isAutomatedPageLoadSpan(span)) {\n    startTimestamp = timestampInSeconds() * 1000;\n  }\n\n  const profiler = startJSSelfProfile();\n\n  // We failed to construct the profiler, so we skip.\n  // No need to log anything as this has already been logged in startProfile.\n  if (!profiler) {\n    return;\n  }\n\n  if (DEBUG_BUILD) {\n    debug.log(`[Profiling] started profiling span: ${spanToJSON(span).description}`);\n  }\n\n  // We create \"unique\" span names to avoid concurrent spans with same names\n  // from being ignored by the profiler. From here on, only this span name should be used when\n  // calling the profiler methods. Note: we log the original name to the user to avoid confusion.\n  const profileId = uuid4();\n\n  // A couple of important things to note here:\n  // `CpuProfilerBindings.stopProfiling` will be scheduled to run in 30seconds in order to exceed max profile duration.\n  // Whichever of the two (span.finish/timeout) is first to run, the profiling will be stopped and the gathered profile\n  // will be processed when the original span is finished. Since onProfileHandler can be invoked multiple times in the\n  // event of an error or user mistake (calling span.finish multiple times), it is important that the behavior of onProfileHandler\n  // is idempotent as we do not want any timings or profiles to be overridden by the last call to onProfileHandler.\n  // After the original finish method is called, the event will be reported through the integration and delegated to transport.\n  const processedProfile: JSSelfProfile | null = null;\n\n  getCurrentScope().setContext('profile', {\n    profile_id: profileId,\n    start_timestamp: startTimestamp,\n  });\n\n  /**\n   * Idempotent handler for profile stop\n   */\n  async function onProfileHandler(): Promise<void> {\n    // Check if the profile exists and return it the behavior has to be idempotent as users may call span.finish multiple times.\n    if (!span) {\n      return;\n    }\n    // Satisfy the type checker, but profiler will always be defined here.\n    if (!profiler) {\n      return;\n    }\n    if (processedProfile) {\n      if (DEBUG_BUILD) {\n        debug.log('[Profiling] profile for:', spanToJSON(span).description, 'already exists, returning early');\n      }\n      return;\n    }\n\n    return profiler\n      .stop()\n      .then((profile: JSSelfProfile): void => {\n        if (maxDurationTimeoutID) {\n          WINDOW.clearTimeout(maxDurationTimeoutID);\n          maxDurationTimeoutID = undefined;\n        }\n\n        if (DEBUG_BUILD) {\n          debug.log(`[Profiling] stopped profiling of span: ${spanToJSON(span).description}`);\n        }\n\n        // In case of an overlapping span, stopProfiling may return null and silently ignore the overlapping profile.\n        if (!profile) {\n          if (DEBUG_BUILD) {\n            debug.log(\n              `[Profiling] profiler returned null profile for: ${spanToJSON(span).description}`,\n              'this may indicate an overlapping span or a call to stopProfiling with a profile title that was never started',\n            );\n          }\n          return;\n        }\n\n        addProfileToGlobalCache(profileId, profile);\n      })\n      .catch(error => {\n        if (DEBUG_BUILD) {\n          debug.log('[Profiling] error while stopping profiler:', error);\n        }\n      });\n  }\n\n  // Enqueue a timeout to prevent profiles from running over max duration.\n  let maxDurationTimeoutID: number | undefined = WINDOW.setTimeout(() => {\n    if (DEBUG_BUILD) {\n      debug.log('[Profiling] max profile duration elapsed, stopping profiling for:', spanToJSON(span).description);\n    }\n    // If the timeout exceeds, we want to stop profiling, but not finish the span\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    onProfileHandler();\n  }, MAX_PROFILE_DURATION_MS);\n\n  // We need to reference the original end call to avoid creating an infinite loop\n  const originalEnd = span.end.bind(span);\n\n  /**\n   * Wraps span `end()` with profiling related logic.\n   * startProfiling is called after the call to spanStart in order to avoid our own code from\n   * being profiled. Because of that same reason, stopProfiling is called before the call to spanEnd.\n   */\n  function profilingWrappedSpanEnd(): Span {\n    if (!span) {\n      return originalEnd();\n    }\n    // onProfileHandler should always return the same profile even if this is called multiple times.\n    // Always call onProfileHandler to ensure stopProfiling is called and the timeout is cleared.\n    void onProfileHandler().then(\n      () => {\n        originalEnd();\n      },\n      () => {\n        // If onProfileHandler fails, we still want to call the original finish method.\n        originalEnd();\n      },\n    );\n\n    return span;\n  }\n\n  span.end = profilingWrappedSpanEnd;\n}\n"],"mappings":";;;;;AAOA;AACA;AACA;AACA;AACA;AACO,SAASA,mBAAmBA,CAACC,IAAI,EAAc;EACtD;EACE,IAAIC,cAAc;EAClB,IAAIC,uBAAuB,CAACF,IAAI,CAAC,EAAE;IACjCC,cAAA,GAAiBE,kBAAkB,EAAC,GAAI,IAAI;EAChD;EAEE,MAAMC,QAAA,GAAWC,kBAAkB,EAAE;;EAEvC;EACA;EACE,IAAI,CAACD,QAAQ,EAAE;IACb;EACJ;EAEE,IAAIE,WAAW,EAAE;IACfC,KAAK,CAACC,GAAG,CAAC,uCAAuCC,UAAU,CAACT,IAAI,CAAC,CAACU,WAAW,EAAC;EACA;;EAEA;EACA;EACA;EACA,MAAAC,SAAA,GAAAC,KAAA;EAWAC,eAAA,GAAAC,UAAA;IACAC,UAAA,EAAAJ,SAAA;IACAK,eAAA,EAAAf;EACA;;EAEA;AACA;AACA;EACA,eAAAgB,iBAAA;IACA;IACA,KAAAjB,IAAA;MACA;IACA;IACA;IACA,KAAAI,QAAA;MACA;IACA;IAQA,OAAAA,QAAA,CACAc,IAAA,GACAC,IAAA,CAAAC,OAAA;MACA,IAAAC,oBAAA;QACAC,MAAA,CAAAC,YAAA,CAAAF,oBAAA;QACAA,oBAAA,GAAAG,SAAA;MACA;MAEA,IAAAlB,WAAA;QACAC,KAAA,CAAAC,GAAA,2CAAAC,UAAA,CAAAT,IAAA,EAAAU,WAAA;MACA;;MAEA;MACA,KAAAU,OAAA;QACA,IAAAd,WAAA;UACAC,KAAA,CAAAC,GAAA,CACA,mDAAAC,UAAA,CAAAT,IAAA,EAAAU,WAAA,IACA,8GACA;QACA;QACA;MACA;MAEAe,uBAAA,CAAAd,SAAA,EAAAS,OAAA;IACA,GACAM,KAAA,CAAAC,KAAA;MACA,IAAArB,WAAA;QACAC,KAAA,CAAAC,GAAA,+CAAAmB,KAAA;MACA;IACA;EACA;;EAEA;EACA,IAAAN,oBAAA,GAAAC,MAAA,CAAAM,UAAA;IACA,IAAAtB,WAAA;MACAC,KAAA,CAAAC,GAAA,sEAAAC,UAAA,CAAAT,IAAA,EAAAU,WAAA;IACA;IACA;IACA;IACAO,gBAAA;EACA,GAAAY,uBAAA;;EAEA;EACA,MAAAC,WAAA,GAAA9B,IAAA,CAAA+B,GAAA,CAAAC,IAAA,CAAAhC,IAAA;;EAEA;AACA;AACA;AACA;AACA;EACA,SAAAiC,wBAAA;IACA,KAAAjC,IAAA;MACA,OAAA8B,WAAA;IACA;IACA;IACA;IACA,KAAAb,gBAAA,GAAAE,IAAA,CACA;MACAW,WAAA;IACA,GACA;MACA;MACAA,WAAA;IACA,CACA;IAEA,OAAA9B,IAAA;EACA;EAEAA,IAAA,CAAA+B,GAAA,GAAAE,uBAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}