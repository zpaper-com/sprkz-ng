{"ast":null,"code":"import { withScope, captureException } from '@sentry/browser';\nimport { isError } from '@sentry/core';\nimport { version } from 'react';\n\n/**\n * See if React major version is 17+ by parsing version string.\n */\nfunction isAtLeastReact17(reactVersion) {\n  const reactMajor = reactVersion.match(/^([^.]+)/);\n  return reactMajor !== null && parseInt(reactMajor[0]) >= 17;\n}\n\n/**\n * Recurse through `error.cause` chain to set cause on an error.\n */\nfunction setCause(error, cause) {\n  const seenErrors = new WeakSet();\n  function recurse(error, cause) {\n    // If we've already seen the error, there is a recursive loop somewhere in the error's\n    // cause chain. Let's just bail out then to prevent a stack overflow.\n    if (seenErrors.has(error)) {\n      return;\n    }\n    if (error.cause) {\n      seenErrors.add(error);\n      return recurse(error.cause, cause);\n    }\n    error.cause = cause;\n  }\n  recurse(error, cause);\n}\n\n/**\n * Captures an error that was thrown by a React ErrorBoundary or React root.\n *\n * @param error The error to capture.\n * @param errorInfo The errorInfo provided by React.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nfunction captureReactException(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nerror, {\n  componentStack\n}, hint) {\n  // If on React version >= 17, create stack trace from componentStack param and links\n  // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n  // Linking errors requires the `LinkedErrors` integration be enabled.\n  // See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks\n  //\n  // Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked\n  // with non-error objects. This is why we need to check if the error is an error-like object.\n  // See: https://github.com/getsentry/sentry-javascript/issues/6167\n  if (isAtLeastReact17(version) && isError(error) && componentStack) {\n    const errorBoundaryError = new Error(error.message);\n    errorBoundaryError.name = `React ErrorBoundary ${error.name}`;\n    errorBoundaryError.stack = componentStack;\n\n    // Using the `LinkedErrors` integration to link the errors together.\n    setCause(error, errorBoundaryError);\n  }\n  return withScope(scope => {\n    scope.setContext('react', {\n      componentStack\n    });\n    return captureException(error, hint);\n  });\n}\n\n/**\n * Creates an error handler that can be used with the `onCaughtError`, `onUncaughtError`,\n * and `onRecoverableError` options in `createRoot` and `hydrateRoot` React DOM methods.\n *\n * @param callback An optional callback that will be called after the error is captured.\n * Use this to add custom handling for errors.\n *\n * @example\n *\n * ```JavaScript\n * const root = createRoot(container, {\n *  onCaughtError: Sentry.reactErrorHandler(),\n *  onUncaughtError: Sentry.reactErrorHandler((error, errorInfo) => {\n *    console.warn('Caught error', error, errorInfo.componentStack);\n *  });\n * });\n * ```\n */\nfunction reactErrorHandler(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ncallback\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (error, errorInfo) => {\n    const eventId = captureReactException(error, errorInfo);\n    if (callback) {\n      callback(error, errorInfo, eventId);\n    }\n  };\n}\nexport { captureReactException, isAtLeastReact17, reactErrorHandler, setCause };","map":{"version":3,"names":["isAtLeastReact17","reactVersion","reactMajor","match","parseInt","setCause","error","cause","seenErrors","WeakSet","recurse","has","add","captureReactException","componentStack","hint","version","isError","errorBoundaryError","Error","message","name","stack","withScope","scope","setContext","captureException","reactErrorHandler","callback","errorInfo","eventId"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/react/src/error.ts"],"sourcesContent":["import { captureException, withScope } from '@sentry/browser';\nimport { isError } from '@sentry/core';\nimport type { ErrorInfo } from 'react';\nimport { version } from 'react';\n\n/**\n * See if React major version is 17+ by parsing version string.\n */\nexport function isAtLeastReact17(reactVersion: string): boolean {\n  const reactMajor = reactVersion.match(/^([^.]+)/);\n  return reactMajor !== null && parseInt(reactMajor[0]) >= 17;\n}\n\n/**\n * Recurse through `error.cause` chain to set cause on an error.\n */\nexport function setCause(error: Error & { cause?: Error }, cause: Error): void {\n  const seenErrors = new WeakSet();\n\n  function recurse(error: Error & { cause?: Error }, cause: Error): void {\n    // If we've already seen the error, there is a recursive loop somewhere in the error's\n    // cause chain. Let's just bail out then to prevent a stack overflow.\n    if (seenErrors.has(error)) {\n      return;\n    }\n    if (error.cause) {\n      seenErrors.add(error);\n      return recurse(error.cause, cause);\n    }\n    error.cause = cause;\n  }\n\n  recurse(error, cause);\n}\n\n/**\n * Captures an error that was thrown by a React ErrorBoundary or React root.\n *\n * @param error The error to capture.\n * @param errorInfo The errorInfo provided by React.\n * @param hint Optional additional data to attach to the Sentry event.\n * @returns the id of the captured Sentry event.\n */\nexport function captureReactException(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  error: any,\n  { componentStack }: ErrorInfo,\n  hint?: Parameters<typeof captureException>[1],\n): string {\n  // If on React version >= 17, create stack trace from componentStack param and links\n  // to to the original error using `error.cause` otherwise relies on error param for stacktrace.\n  // Linking errors requires the `LinkedErrors` integration be enabled.\n  // See: https://reactjs.org/blog/2020/08/10/react-v17-rc.html#native-component-stacks\n  //\n  // Although `componentDidCatch` is typed to accept an `Error` object, it can also be invoked\n  // with non-error objects. This is why we need to check if the error is an error-like object.\n  // See: https://github.com/getsentry/sentry-javascript/issues/6167\n  if (isAtLeastReact17(version) && isError(error) && componentStack) {\n    const errorBoundaryError = new Error(error.message);\n    errorBoundaryError.name = `React ErrorBoundary ${error.name}`;\n    errorBoundaryError.stack = componentStack;\n\n    // Using the `LinkedErrors` integration to link the errors together.\n    setCause(error, errorBoundaryError);\n  }\n\n  return withScope(scope => {\n    scope.setContext('react', { componentStack });\n    return captureException(error, hint);\n  });\n}\n\n/**\n * Creates an error handler that can be used with the `onCaughtError`, `onUncaughtError`,\n * and `onRecoverableError` options in `createRoot` and `hydrateRoot` React DOM methods.\n *\n * @param callback An optional callback that will be called after the error is captured.\n * Use this to add custom handling for errors.\n *\n * @example\n *\n * ```JavaScript\n * const root = createRoot(container, {\n *  onCaughtError: Sentry.reactErrorHandler(),\n *  onUncaughtError: Sentry.reactErrorHandler((error, errorInfo) => {\n *    console.warn('Caught error', error, errorInfo.componentStack);\n *  });\n * });\n * ```\n */\nexport function reactErrorHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  callback?: (error: any, errorInfo: ErrorInfo, eventId: string) => void,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n): (error: any, errorInfo: ErrorInfo) => void {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return (error: any, errorInfo: ErrorInfo) => {\n    const eventId = captureReactException(error, errorInfo);\n    if (callback) {\n      callback(error, errorInfo, eventId);\n    }\n  };\n}\n"],"mappings":";;;;AAKA;AACA;AACA;AACO,SAASA,gBAAgBA,CAACC,YAAY,EAAmB;EAC9D,MAAMC,UAAA,GAAaD,YAAY,CAACE,KAAK,CAAC,UAAU,CAAC;EACjD,OAAOD,UAAA,KAAe,QAAQE,QAAQ,CAACF,UAAU,CAAC,CAAC,CAAC,KAAK,EAAE;AAC7D;;AAEA;AACA;AACA;AACO,SAASG,QAAQA,CAACC,KAAK,EAA6BC,KAAK,EAAe;EAC7E,MAAMC,UAAA,GAAa,IAAIC,OAAO,EAAE;EAEhC,SAASC,OAAOA,CAACJ,KAAK,EAA6BC,KAAK,EAAe;IACzE;IACA;IACI,IAAIC,UAAU,CAACG,GAAG,CAACL,KAAK,CAAC,EAAE;MACzB;IACN;IACI,IAAIA,KAAK,CAACC,KAAK,EAAE;MACfC,UAAU,CAACI,GAAG,CAACN,KAAK,CAAC;MACrB,OAAOI,OAAO,CAACJ,KAAK,CAACC,KAAK,EAAEA,KAAK,CAAC;IACxC;IACID,KAAK,CAACC,KAAA,GAAQA,KAAK;EACvB;EAEEG,OAAO,CAACJ,KAAK,EAAEC,KAAK,CAAC;AACvB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASM,qBAAqBA;AACrC;AACEP,KAAK,EACL;EAAEQ;AAAA,CAAgB,EAClBC,IAAI,EACI;EACV;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACE,IAAIf,gBAAgB,CAACgB,OAAO,KAAKC,OAAO,CAACX,KAAK,KAAKQ,cAAc,EAAE;IACjE,MAAMI,kBAAA,GAAqB,IAAIC,KAAK,CAACb,KAAK,CAACc,OAAO,CAAC;IACnDF,kBAAkB,CAACG,IAAA,GAAO,uBAAuBf,KAAK,CAACe,IAAI,EAAC;IACAH,kBAAA,CAAAI,KAAA,GAAAR,cAAA;;IAEA;IACAT,QAAA,CAAAC,KAAA,EAAAY,kBAAA;EACA;EAEA,OAAAK,SAAA,CAAAC,KAAA;IACAA,KAAA,CAAAC,UAAA;MAAAX;IAAA;IACA,OAAAY,gBAAA,CAAApB,KAAA,EAAAS,IAAA;EACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAY;AACA;AACAC;AACA;AAAA,EACA;EACA;EACA,QAAAtB,KAAA,EAAAuB,SAAA;IACA,MAAAC,OAAA,GAAAjB,qBAAA,CAAAP,KAAA,EAAAuB,SAAA;IACA,IAAAD,QAAA;MACAA,QAAA,CAAAtB,KAAA,EAAAuB,SAAA,EAAAC,OAAA;IACA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}