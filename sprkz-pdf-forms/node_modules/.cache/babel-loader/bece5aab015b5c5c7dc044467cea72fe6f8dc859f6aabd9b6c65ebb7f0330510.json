{"ast":null,"code":"var _jsxFileName = \"/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/src/components/pdf/PDFViewer.tsx\";\nimport React, { useRef, useEffect, useState, useCallback } from 'react';\nimport { Box, CircularProgress, Typography, Alert } from '@mui/material';\nimport { PDFService } from '../../services/pdfService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PDFViewer = ({\n  url,\n  scale = 1.0,\n  currentPage = 1,\n  onDocumentLoad,\n  onPageLoad,\n  onError,\n  className\n}) => {\n  const canvasRef = useRef(null);\n  const textLayerRef = useRef(null);\n  const annotationLayerRef = useRef(null);\n  const containerRef = useRef(null);\n  const [pdfDoc, setPdfDoc] = useState(null);\n  const [currentPageObj, setCurrentPageObj] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const [renderingPage, setRenderingPage] = useState(false);\n\n  // Load PDF document\n  useEffect(() => {\n    let isMounted = true;\n    const loadDocument = async () => {\n      try {\n        setLoading(true);\n        setError(null);\n        console.log(`[PDF] Loading PDF from: ${url} at ${new Date().toISOString()}`);\n        const document = await PDFService.loadDocument({\n          url\n        });\n        if (!isMounted) return;\n        setPdfDoc(document);\n        onDocumentLoad === null || onDocumentLoad === void 0 ? void 0 : onDocumentLoad(document);\n        console.log(`PDF loaded successfully. Pages: ${document.numPages}`);\n      } catch (err) {\n        if (!isMounted) return;\n        const pdfError = err;\n        setError(pdfError);\n        onError === null || onError === void 0 ? void 0 : onError(pdfError);\n        console.error('Failed to load PDF document:', pdfError);\n      } finally {\n        if (isMounted) {\n          setLoading(false);\n        }\n      }\n    };\n    if (url) {\n      loadDocument();\n    }\n    return () => {\n      isMounted = false;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]); // Remove callback dependencies to prevent reload loops\n\n  // Render specific page\n  const renderPage = useCallback(async pageNumber => {\n    if (!pdfDoc || renderingPage) return;\n    try {\n      setRenderingPage(true);\n      setError(null);\n      console.log(`[PDF] Rendering page ${pageNumber} at ${new Date().toISOString()}...`);\n      const page = await PDFService.getPage(pdfDoc, pageNumber);\n      setCurrentPageObj(page);\n      onPageLoad === null || onPageLoad === void 0 ? void 0 : onPageLoad(page);\n      const viewport = page.getViewport({\n        scale\n      });\n\n      // Clear previous content\n      if (containerRef.current) {\n        const canvas = canvasRef.current;\n        const textLayer = textLayerRef.current;\n        const annotationLayer = annotationLayerRef.current;\n        if (canvas && textLayer && annotationLayer) {\n          // Clear layers\n          const context = canvas.getContext('2d');\n          if (context) {\n            context.clearRect(0, 0, canvas.width, canvas.height);\n          }\n          textLayer.innerHTML = '';\n          annotationLayer.innerHTML = '';\n\n          // Set container dimensions\n          containerRef.current.style.width = `${viewport.width}px`;\n          containerRef.current.style.height = `${viewport.height}px`;\n\n          // 1. Canvas Layer - Render visual content\n          await PDFService.renderPageToCanvas(page, canvas, scale);\n\n          // 2. Text Layer - Enable text selection\n          try {\n            const textContent = await page.getTextContent();\n\n            // Set text layer dimensions and positioning\n            textLayer.style.width = `${viewport.width}px`;\n            textLayer.style.height = `${viewport.height}px`;\n            textLayer.className = 'textLayer';\n\n            // Create text spans for selection (simplified implementation)\n            textContent.items.forEach((item, index) => {\n              if ('str' in item && item.str) {\n                const span = document.createElement('span');\n                span.textContent = item.str;\n                span.style.position = 'absolute';\n                span.style.left = `${item.transform[4]}px`;\n                span.style.top = `${viewport.height - item.transform[5]}px`;\n                span.style.fontSize = `${item.height}px`;\n                span.style.fontFamily = item.fontName || 'sans-serif';\n                span.style.color = 'transparent';\n                span.style.userSelect = 'text';\n                textLayer.appendChild(span);\n              }\n            });\n          } catch (textError) {\n            console.warn('Failed to render text layer:', textError);\n          }\n\n          // 3. Annotation Layer - Handle interactive forms\n          try {\n            const annotations = await page.getAnnotations({\n              intent: 'display'\n            });\n            if (annotations.length > 0) {\n              // Set annotation layer dimensions and positioning\n              annotationLayer.style.width = `${viewport.width}px`;\n              annotationLayer.style.height = `${viewport.height}px`;\n              annotationLayer.className = 'annotationLayer';\n\n              // Create form elements for annotations (simplified implementation)\n              annotations.forEach(annotation => {\n                if (annotation.subtype === 'Widget') {\n                  const rect = annotation.rect;\n                  const element = document.createElement('div');\n                  element.style.position = 'absolute';\n                  element.style.left = `${rect[0]}px`;\n                  element.style.top = `${viewport.height - rect[3]}px`;\n                  element.style.width = `${rect[2] - rect[0]}px`;\n                  element.style.height = `${rect[3] - rect[1]}px`;\n                  element.style.backgroundColor = 'rgba(0, 54, 255, 0.13)';\n                  element.style.border = '1px solid rgba(0, 54, 255, 0.5)';\n                  element.title = `Form field: ${annotation.fieldName || 'Unknown'}`;\n                  annotationLayer.appendChild(element);\n                }\n              });\n              console.log(`Rendered ${annotations.length} annotations on page ${pageNumber}`);\n            }\n          } catch (annotationError) {\n            console.warn('Failed to render annotation layer:', annotationError);\n          }\n\n          // Preload adjacent pages for smooth navigation\n          PDFService.preloadAdjacentPages(pdfDoc, pageNumber, 1);\n        }\n      }\n      console.log(`Page ${pageNumber} rendered successfully`);\n    } catch (err) {\n      const pdfError = err;\n      setError(pdfError);\n      onError === null || onError === void 0 ? void 0 : onError(pdfError);\n      console.error(`Failed to render page ${pageNumber}:`, pdfError);\n    } finally {\n      setRenderingPage(false);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pdfDoc, scale, renderingPage]); // Remove callback dependencies to prevent render loops\n\n  // Render page when currentPage or scale changes\n  useEffect(() => {\n    if (pdfDoc && currentPage >= 1 && currentPage <= pdfDoc.numPages) {\n      renderPage(currentPage);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [pdfDoc, currentPage, scale]); // Remove renderPage from dependencies to prevent infinite loop\n\n  // Handle container resize for responsiveness\n  useEffect(() => {\n    const handleResize = () => {\n      if (currentPageObj && !renderingPage) {\n        // Re-render current page with new scale if needed\n        renderPage(currentPage);\n      }\n    };\n    window.addEventListener('resize', handleResize);\n    return () => window.removeEventListener('resize', handleResize);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentPageObj, currentPage, renderingPage]); // Remove renderPage dependency\n\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Box, {\n      display: \"flex\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      minHeight: 400,\n      className: className,\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 48\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          mt: 2\n        },\n        children: \"Loading PDF document...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this);\n  }\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(Alert, {\n      severity: \"error\",\n      sx: {\n        minHeight: 400,\n        display: 'flex',\n        alignItems: 'center'\n      },\n      className: className,\n      children: /*#__PURE__*/_jsxDEV(Box, {\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          gutterBottom: true,\n          children: \"Failed to load PDF\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 242,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"body2\",\n          color: \"textSecondary\",\n          children: error.message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 245,\n          columnNumber: 11\n        }, this), error.originalError && /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          display: \"block\",\n          sx: {\n            mt: 1\n          },\n          children: [\"Technical details: \", error.originalError.message]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 249,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Box, {\n    className: className,\n    sx: {\n      position: 'relative',\n      display: 'inline-block',\n      border: '1px solid #ccc',\n      boxShadow: '0 2px 8px rgba(0,0,0,0.1)'\n    },\n    children: [renderingPage && /*#__PURE__*/_jsxDEV(Box, {\n      position: \"absolute\",\n      top: 0,\n      left: 0,\n      right: 0,\n      bottom: 0,\n      display: \"flex\",\n      alignItems: \"center\",\n      justifyContent: \"center\",\n      bgcolor: \"rgba(255, 255, 255, 0.8)\",\n      zIndex: 10,\n      children: [/*#__PURE__*/_jsxDEV(CircularProgress, {\n        size: 32\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 282,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Typography, {\n        variant: \"body2\",\n        sx: {\n          ml: 2\n        },\n        children: [\"Rendering page \", currentPage, \"...\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 270,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Box, {\n      ref: containerRef,\n      position: \"relative\",\n      sx: {\n        '& .textLayer': {\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          overflow: 'hidden',\n          opacity: 0.2,\n          lineHeight: 1.0,\n          '& > span': {\n            color: 'transparent',\n            position: 'absolute',\n            whiteSpace: 'pre',\n            cursor: 'text',\n            transformOrigin: '0% 0%'\n          }\n        },\n        '& .annotationLayer': {\n          position: 'absolute',\n          left: 0,\n          top: 0,\n          right: 0,\n          bottom: 0,\n          '& section': {\n            position: 'absolute'\n          },\n          '& .linkAnnotation > a': {\n            position: 'absolute',\n            fontSize: '1em',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%'\n          },\n          '& .textWidgetAnnotation input': {\n            background: 'rgba(0, 54, 255, 0.13)',\n            border: '1px solid transparent',\n            boxSizing: 'border-box',\n            fontSize: '9px',\n            height: '100%',\n            margin: 0,\n            padding: 0,\n            verticalAlign: 'top',\n            width: '100%'\n          },\n          '& .textWidgetAnnotation textarea': {\n            background: 'rgba(0, 54, 255, 0.13)',\n            border: '1px solid transparent',\n            boxSizing: 'border-box',\n            fontSize: '9px',\n            height: '100%',\n            margin: 0,\n            padding: 0,\n            verticalAlign: 'top',\n            width: '100%',\n            resize: 'none'\n          },\n          '& .choiceWidgetAnnotation select': {\n            background: 'rgba(0, 54, 255, 0.13)',\n            border: '1px solid transparent',\n            boxSizing: 'border-box',\n            fontSize: '9px',\n            height: '100%',\n            margin: 0,\n            padding: 0,\n            verticalAlign: 'top',\n            width: '100%'\n          },\n          '& .checkboxWidgetAnnotation input': {\n            height: '100%',\n            margin: 0,\n            verticalAlign: 'top',\n            width: '100%'\n          }\n        }\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"canvas\", {\n        ref: canvasRef,\n        style: {\n          display: 'block',\n          backgroundColor: 'white'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 372,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: textLayerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 381,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: annotationLayerRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 290,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 259,\n    columnNumber: 5\n  }, this);\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}