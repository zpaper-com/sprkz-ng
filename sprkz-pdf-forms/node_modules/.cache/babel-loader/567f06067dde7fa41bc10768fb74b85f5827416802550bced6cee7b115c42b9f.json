{"ast":null,"code":"import { isString, isRegExp, isVueViewModel } from './is.js';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nfunction truncate(str, max = 0) {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nfunction snipLine(line, colno) {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nfunction safeJoin(input, delimiter) {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch {\n      output.push('[value cannot be serialized]');\n    }\n  }\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nfunction isMatchingPattern(value, pattern, requireExactStringMatch = false) {\n  if (!isString(value)) {\n    return false;\n  }\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nfunction stringMatchesSomePattern(testString, patterns = [], requireExactStringMatch = false) {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\nexport { isMatchingPattern, safeJoin, snipLine, stringMatchesSomePattern, truncate };","map":{"version":3,"names":["truncate","str","max","length","slice","snipLine","line","colno","newLine","lineLength","start","Math","end","min","safeJoin","input","delimiter","Array","isArray","output","i","value","isVueViewModel","push","String","join","isMatchingPattern","pattern","requireExactStringMatch","isString","isRegExp","test","includes","stringMatchesSomePattern","testString","patterns","some"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/string.ts"],"sourcesContent":["import { isRegExp, isString, isVueViewModel } from './is';\n\nexport { escapeStringForRegex } from '../vendor/escapeStringForRegex';\n\n/**\n * Truncates given string to the maximum characters count\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string (0 = unlimited)\n * @returns string Encoded\n */\nexport function truncate(str: string, max: number = 0): string {\n  if (typeof str !== 'string' || max === 0) {\n    return str;\n  }\n  return str.length <= max ? str : `${str.slice(0, max)}...`;\n}\n\n/**\n * This is basically just `trim_line` from\n * https://github.com/getsentry/sentry/blob/master/src/sentry/lang/javascript/processor.py#L67\n *\n * @param str An object that contains serializable values\n * @param max Maximum number of characters in truncated string\n * @returns string Encoded\n */\nexport function snipLine(line: string, colno: number): string {\n  let newLine = line;\n  const lineLength = newLine.length;\n  if (lineLength <= 150) {\n    return newLine;\n  }\n  if (colno > lineLength) {\n    // eslint-disable-next-line no-param-reassign\n    colno = lineLength;\n  }\n\n  let start = Math.max(colno - 60, 0);\n  if (start < 5) {\n    start = 0;\n  }\n\n  let end = Math.min(start + 140, lineLength);\n  if (end > lineLength - 5) {\n    end = lineLength;\n  }\n  if (end === lineLength) {\n    start = Math.max(end - 140, 0);\n  }\n\n  newLine = newLine.slice(start, end);\n  if (start > 0) {\n    newLine = `'{snip} ${newLine}`;\n  }\n  if (end < lineLength) {\n    newLine += ' {snip}';\n  }\n\n  return newLine;\n}\n\n/**\n * Join values in array\n * @param input array of values to be joined together\n * @param delimiter string to be placed in-between values\n * @returns Joined values\n */\nexport function safeJoin(input: unknown[], delimiter?: string): string {\n  if (!Array.isArray(input)) {\n    return '';\n  }\n\n  const output = [];\n  // eslint-disable-next-line @typescript-eslint/prefer-for-of\n  for (let i = 0; i < input.length; i++) {\n    const value = input[i];\n    try {\n      // This is a hack to fix a Vue3-specific bug that causes an infinite loop of\n      // console warnings. This happens when a Vue template is rendered with\n      // an undeclared variable, which we try to stringify, ultimately causing\n      // Vue to issue another warning which repeats indefinitely.\n      // see: https://github.com/getsentry/sentry-javascript/pull/8981\n      if (isVueViewModel(value)) {\n        output.push('[VueViewModel]');\n      } else {\n        output.push(String(value));\n      }\n    } catch {\n      output.push('[value cannot be serialized]');\n    }\n  }\n\n  return output.join(delimiter);\n}\n\n/**\n * Checks if the given value matches a regex or string\n *\n * @param value The string to test\n * @param pattern Either a regex or a string against which `value` will be matched\n * @param requireExactStringMatch If true, `value` must match `pattern` exactly. If false, `value` will match\n * `pattern` if it contains `pattern`. Only applies to string-type patterns.\n */\nexport function isMatchingPattern(\n  value: string,\n  pattern: RegExp | string,\n  requireExactStringMatch: boolean = false,\n): boolean {\n  if (!isString(value)) {\n    return false;\n  }\n\n  if (isRegExp(pattern)) {\n    return pattern.test(value);\n  }\n  if (isString(pattern)) {\n    return requireExactStringMatch ? value === pattern : value.includes(pattern);\n  }\n\n  return false;\n}\n\n/**\n * Test the given string against an array of strings and regexes. By default, string matching is done on a\n * substring-inclusion basis rather than a strict equality basis\n *\n * @param testString The string to test\n * @param patterns The patterns against which to test the string\n * @param requireExactStringMatch If true, `testString` must match one of the given string patterns exactly in order to\n * count. If false, `testString` will match a string pattern if it contains that pattern.\n * @returns\n */\nexport function stringMatchesSomePattern(\n  testString: string,\n  patterns: Array<string | RegExp> = [],\n  requireExactStringMatch: boolean = false,\n): boolean {\n  return patterns.some(pattern => isMatchingPattern(testString, pattern, requireExactStringMatch));\n}\n"],"mappings":";;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAQA,CAACC,GAAG,EAAUC,GAAG,GAAW,CAAC,EAAU;EAC7D,IAAI,OAAOD,GAAA,KAAQ,YAAYC,GAAA,KAAQ,CAAC,EAAE;IACxC,OAAOD,GAAG;EACd;EACE,OAAOA,GAAG,CAACE,MAAA,IAAUD,GAAA,GAAMD,GAAA,GAAM,GAACA,GAAA,CAAAG,KAAA,IAAAF,GAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAG,SAAAC,IAAA,EAAAC,KAAA;EACA,IAAAC,OAAA,GAAAF,IAAA;EACA,MAAAG,UAAA,GAAAD,OAAA,CAAAL,MAAA;EACA,IAAAM,UAAA;IACA,OAAAD,OAAA;EACA;EACA,IAAAD,KAAA,GAAAE,UAAA;IACA;IACAF,KAAA,GAAAE,UAAA;EACA;EAEA,IAAAC,KAAA,GAAAC,IAAA,CAAAT,GAAA,CAAAK,KAAA;EACA,IAAAG,KAAA;IACAA,KAAA;EACA;EAEA,IAAAE,GAAA,GAAAD,IAAA,CAAAE,GAAA,CAAAH,KAAA,QAAAD,UAAA;EACA,IAAAG,GAAA,GAAAH,UAAA;IACAG,GAAA,GAAAH,UAAA;EACA;EACA,IAAAG,GAAA,KAAAH,UAAA;IACAC,KAAA,GAAAC,IAAA,CAAAT,GAAA,CAAAU,GAAA;EACA;EAEAJ,OAAA,GAAAA,OAAA,CAAAJ,KAAA,CAAAM,KAAA,EAAAE,GAAA;EACA,IAAAF,KAAA;IACAF,OAAA,cAAAA,OAAA;EACA;EACA,IAAAI,GAAA,GAAAH,UAAA;IACAD,OAAA;EACA;EAEA,OAAAA,OAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAM,SAAAC,KAAA,EAAAC,SAAA;EACA,KAAAC,KAAA,CAAAC,OAAA,CAAAH,KAAA;IACA;EACA;EAEA,MAAAI,MAAA;EACA;EACA,SAAAC,CAAA,MAAAA,CAAA,GAAAL,KAAA,CAAAZ,MAAA,EAAAiB,CAAA;IACA,MAAAC,KAAA,GAAAN,KAAA,CAAAK,CAAA;IACA;MACA;MACA;MACA;MACA;MACA;MACA,IAAAE,cAAA,CAAAD,KAAA;QACAF,MAAA,CAAAI,IAAA;MACA;QACAJ,MAAA,CAAAI,IAAA,CAAAC,MAAA,CAAAH,KAAA;MACA;IACA;MACAF,MAAA,CAAAI,IAAA;IACA;EACA;EAEA,OAAAJ,MAAA,CAAAM,IAAA,CAAAT,SAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAU,kBACAL,KAAA,EACAM,OAAA,EACAC,uBAAA,UACA;EACA,KAAAC,QAAA,CAAAR,KAAA;IACA;EACA;EAEA,IAAAS,QAAA,CAAAH,OAAA;IACA,OAAAA,OAAA,CAAAI,IAAA,CAAAV,KAAA;EACA;EACA,IAAAQ,QAAA,CAAAF,OAAA;IACA,OAAAC,uBAAA,GAAAP,KAAA,KAAAM,OAAA,GAAAN,KAAA,CAAAW,QAAA,CAAAL,OAAA;EACA;EAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAM,yBACAC,UAAA,EACAC,QAAA,OACAP,uBAAA,UACA;EACA,OAAAO,QAAA,CAAAC,IAAA,CAAAT,OAAA,IAAAD,iBAAA,CAAAQ,UAAA,EAAAP,OAAA,EAAAC,uBAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}