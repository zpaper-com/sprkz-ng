{"ast":null,"code":"var _jsxFileName = \"/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/src/contexts/WizardContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useCallback, useEffect } from 'react';\nimport { useForm } from './FormContext';\nimport { useFeatureFlag } from '../hooks/useFeatureFlags';\n\n// Wizard States\n\n// Wizard Button States\n\n// Wizard Context State\n\n// Wizard Actions\n\n// Wizard Context Type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WizardContext = /*#__PURE__*/createContext(undefined);\n\n// Initial state\nconst initialState = {\n  wizardState: 'idle',\n  currentFieldIndex: -1,\n  currentField: null,\n  requiredFields: [],\n  signatureFields: [],\n  completedFields: [],\n  totalRequiredFields: 0,\n  completionPercentage: 0,\n  isFormValid: false,\n  showFieldTooltip: false,\n  tooltipField: null\n};\n\n// Wizard reducer\nfunction wizardReducer(state, action) {\n  switch (action.type) {\n    case 'INITIALIZE':\n      {\n        const {\n          requiredFields,\n          signatureFields\n        } = action.payload;\n        return {\n          ...state,\n          requiredFields,\n          signatureFields,\n          totalRequiredFields: requiredFields.length,\n          wizardState: 'start'\n        };\n      }\n    case 'SET_WIZARD_STATE':\n      {\n        return {\n          ...state,\n          wizardState: action.payload\n        };\n      }\n    case 'SET_CURRENT_FIELD':\n      {\n        const {\n          field,\n          index\n        } = action.payload;\n        return {\n          ...state,\n          currentField: field,\n          currentFieldIndex: index\n        };\n      }\n    case 'FIELD_COMPLETED':\n      {\n        const fieldName = action.payload;\n        const completedFields = [...state.completedFields];\n        if (!completedFields.includes(fieldName)) {\n          completedFields.push(fieldName);\n        }\n        return {\n          ...state,\n          completedFields,\n          completionPercentage: Math.round(completedFields.length / Math.max(state.totalRequiredFields, 1) * 100)\n        };\n      }\n    case 'UPDATE_PROGRESS':\n      {\n        const {\n          completed,\n          percentage\n        } = action.payload;\n        return {\n          ...state,\n          completedFields: completed,\n          completionPercentage: percentage\n        };\n      }\n    case 'SET_FORM_VALID':\n      {\n        return {\n          ...state,\n          isFormValid: action.payload\n        };\n      }\n    case 'SHOW_TOOLTIP':\n      {\n        return {\n          ...state,\n          showFieldTooltip: true,\n          tooltipField: action.payload\n        };\n      }\n    case 'HIDE_TOOLTIP':\n      {\n        return {\n          ...state,\n          showFieldTooltip: false,\n          tooltipField: null\n        };\n      }\n    case 'RESET_WIZARD':\n      {\n        return {\n          ...initialState\n        };\n      }\n    default:\n      return state;\n  }\n}\n\n// Wizard Provider\nexport const WizardProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(wizardReducer, initialState);\n  const formContext = useForm();\n\n  // Feature flags for wizard behavior\n  const {\n    isEnabled: enhancedWizardMode\n  } = useFeatureFlag('ENHANCED_WIZARD_MODE');\n  const {\n    isEnabled: progressiveFormFilling\n  } = useFeatureFlag('PROGRESSIVE_FORM_FILLING');\n  const {\n    isEnabled: smartFieldDetection\n  } = useFeatureFlag('SMART_FIELD_DETECTION');\n\n  // Show field tooltip\n  const showFieldTooltip = useCallback(field => {\n    dispatch({\n      type: 'SHOW_TOOLTIP',\n      payload: field\n    });\n  }, []);\n\n  // Hide field tooltip\n  const hideFieldTooltip = useCallback(() => {\n    dispatch({\n      type: 'HIDE_TOOLTIP'\n    });\n  }, []);\n\n  // Initialize wizard with form fields\n  const initializeWizard = useCallback(allFields => {\n    const requiredFields = allFields.filter(field => field.required && !field.readOnly);\n    const signatureFields = allFields.filter(field => field.type === 'signature' || field.name.toLowerCase().includes('signature') || field.name.toLowerCase().includes('sign'));\n    dispatch({\n      type: 'INITIALIZE',\n      payload: {\n        requiredFields,\n        signatureFields\n      }\n    });\n  }, []);\n\n  // Start the wizard\n  const startWizard = useCallback(() => {\n    const firstIncompleteField = state.requiredFields.find(field => !state.completedFields.includes(field.name));\n    if (firstIncompleteField) {\n      dispatch({\n        type: 'SET_CURRENT_FIELD',\n        payload: {\n          field: firstIncompleteField,\n          index: 0\n        }\n      });\n      dispatch({\n        type: 'SET_WIZARD_STATE',\n        payload: 'next'\n      });\n\n      // Show tooltip for the field\n      showFieldTooltip(firstIncompleteField);\n    } else {\n      // All required fields complete, check signatures\n      if (state.signatureFields.length > 0) {\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'sign'\n        });\n      } else {\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'submit'\n        });\n      }\n    }\n  }, [state.requiredFields, state.completedFields, state.signatureFields, showFieldTooltip]);\n\n  // Navigate to next field\n  const nextField = useCallback(() => {\n    const incompleteRequired = state.requiredFields.filter(field => !state.completedFields.includes(field.name));\n    if (incompleteRequired.length > 0) {\n      const nextField = incompleteRequired[0];\n      const fieldIndex = state.requiredFields.findIndex(f => f.name === nextField.name);\n      dispatch({\n        type: 'SET_CURRENT_FIELD',\n        payload: {\n          field: nextField,\n          index: fieldIndex\n        }\n      });\n      showFieldTooltip(nextField);\n    } else {\n      // All required fields complete\n      if (state.signatureFields.length > 0) {\n        const incompleteSignatures = state.signatureFields.filter(field => !state.completedFields.includes(field.name));\n        if (incompleteSignatures.length > 0) {\n          dispatch({\n            type: 'SET_WIZARD_STATE',\n            payload: 'sign'\n          });\n          const firstSignature = incompleteSignatures[0];\n          dispatch({\n            type: 'SET_CURRENT_FIELD',\n            payload: {\n              field: firstSignature,\n              index: 0\n            }\n          });\n          showFieldTooltip(firstSignature);\n        } else {\n          dispatch({\n            type: 'SET_WIZARD_STATE',\n            payload: 'submit'\n          });\n        }\n      } else {\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'submit'\n        });\n      }\n    }\n  }, [state.requiredFields, state.signatureFields, state.completedFields, showFieldTooltip]);\n\n  // Go to signature fields\n  const goToSignatures = useCallback(() => {\n    if (state.signatureFields.length > 0) {\n      const firstIncompleteSignature = state.signatureFields.find(field => !state.completedFields.includes(field.name));\n      if (firstIncompleteSignature) {\n        dispatch({\n          type: 'SET_CURRENT_FIELD',\n          payload: {\n            field: firstIncompleteSignature,\n            index: 0\n          }\n        });\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'sign'\n        });\n        showFieldTooltip(firstIncompleteSignature);\n      } else {\n        // All signatures complete\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'submit'\n        });\n      }\n    }\n  }, [state.signatureFields, state.completedFields, showFieldTooltip]);\n\n  // Submit form\n  const submitForm = useCallback(() => {\n    if (state.isFormValid) {\n      dispatch({\n        type: 'SET_WIZARD_STATE',\n        payload: 'complete'\n      });\n      console.log('Form submitted successfully!');\n\n      // TODO: Implement actual form submission in Phase 7\n      alert('Form submission will be implemented in Phase 7. All fields completed!');\n    } else {\n      console.warn('Form is not valid for submission');\n    }\n  }, [state.isFormValid]);\n\n  // Jump to specific field\n  const jumpToField = useCallback(field => {\n    const fieldIndex = state.requiredFields.findIndex(f => f.name === field.name);\n    dispatch({\n      type: 'SET_CURRENT_FIELD',\n      payload: {\n        field,\n        index: fieldIndex >= 0 ? fieldIndex : 0\n      }\n    });\n\n    // Update wizard state based on field type\n    if (field.type === 'signature') {\n      dispatch({\n        type: 'SET_WIZARD_STATE',\n        payload: 'sign'\n      });\n    } else if (field.required) {\n      dispatch({\n        type: 'SET_WIZARD_STATE',\n        payload: 'next'\n      });\n    }\n    showFieldTooltip(field);\n  }, [state.requiredFields, showFieldTooltip]);\n\n  // Mark field as complete\n  const markFieldComplete = useCallback(fieldName => {\n    dispatch({\n      type: 'FIELD_COMPLETED',\n      payload: fieldName\n    });\n\n    // Update form context as well\n    formContext.markFieldComplete(fieldName);\n  }, [formContext]);\n\n  // Get current button state\n  const getCurrentButtonState = useCallback(() => {\n    switch (state.wizardState) {\n      case 'idle':\n      case 'start':\n        return {\n          text: 'Start',\n          color: 'primary',\n          // Blue\n          disabled: state.totalRequiredFields === 0,\n          action: startWizard\n        };\n      case 'next':\n        {\n          const incompleteRequired = state.requiredFields.filter(field => !state.completedFields.includes(field.name));\n          if (incompleteRequired.length > 0) {\n            return {\n              text: 'Next',\n              color: 'secondary',\n              // Orange\n              disabled: false,\n              action: nextField\n            };\n          } else {\n            // All required complete, check signatures\n            if (state.signatureFields.length > 0) {\n              return {\n                text: 'Sign',\n                color: 'info',\n                // Purple\n                disabled: false,\n                action: goToSignatures\n              };\n            } else {\n              return {\n                text: 'Submit',\n                color: 'success',\n                // Green\n                disabled: !state.isFormValid,\n                action: submitForm\n              };\n            }\n          }\n        }\n      case 'sign':\n        {\n          const incompleteSignatures = state.signatureFields.filter(field => !state.completedFields.includes(field.name));\n          if (incompleteSignatures.length > 0) {\n            return {\n              text: 'Sign',\n              color: 'info',\n              // Purple\n              disabled: false,\n              action: nextField\n            };\n          } else {\n            return {\n              text: 'Submit',\n              color: 'success',\n              // Green\n              disabled: !state.isFormValid,\n              action: submitForm\n            };\n          }\n        }\n      case 'submit':\n        return {\n          text: 'Submit',\n          color: 'success',\n          // Green\n          disabled: !state.isFormValid,\n          action: submitForm\n        };\n      case 'complete':\n        return {\n          text: 'Complete',\n          color: 'success',\n          // Green\n          disabled: true,\n          action: () => {}\n        };\n      default:\n        return {\n          text: 'Start',\n          color: 'primary',\n          disabled: true,\n          action: startWizard\n        };\n    }\n  }, [state.wizardState, state.requiredFields, state.signatureFields, state.completedFields, state.isFormValid, state.totalRequiredFields, startWizard, nextField, goToSignatures, submitForm]);\n\n  // Reset wizard\n  const resetWizard = useCallback(() => {\n    dispatch({\n      type: 'RESET_WIZARD'\n    });\n  }, []);\n\n  // Update form validity when form context changes\n  useEffect(() => {\n    const formValid = formContext.isFormValid();\n    dispatch({\n      type: 'SET_FORM_VALID',\n      payload: formValid\n    });\n  }, [formContext]);\n\n  // Update completion progress when form context changes\n  useEffect(() => {\n    const percentage = formContext.getCompletionPercentage();\n    const {\n      completed\n    } = formContext.getRequiredFieldsStatus();\n    dispatch({\n      type: 'UPDATE_PROGRESS',\n      payload: {\n        completed: Array.from(formContext.state.fields.keys()).filter(fieldName => formContext.state.completedFields.includes(fieldName)),\n        percentage\n      }\n    });\n  }, [formContext]);\n  const contextValue = {\n    state,\n    startWizard,\n    nextField,\n    goToSignatures,\n    submitForm,\n    jumpToField,\n    markFieldComplete,\n    getCurrentButtonState,\n    showFieldTooltip,\n    hideFieldTooltip,\n    resetWizard,\n    initializeWizard\n  };\n  return /*#__PURE__*/_jsxDEV(WizardContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 465,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook to use wizard context\n_s(WizardProvider, \"weYMhfcm6IXSb5Jq60WtG8B50QY=\", false, function () {\n  return [useForm, useFeatureFlag, useFeatureFlag, useFeatureFlag];\n});\n_c = WizardProvider;\nexport const useWizard = () => {\n  _s2();\n  const context = useContext(WizardContext);\n  if (context === undefined) {\n    throw new Error('useWizard must be used within a WizardProvider');\n  }\n  return context;\n};\n_s2(useWizard, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"WizardProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useCallback","useEffect","useForm","useFeatureFlag","jsxDEV","_jsxDEV","WizardContext","undefined","initialState","wizardState","currentFieldIndex","currentField","requiredFields","signatureFields","completedFields","totalRequiredFields","completionPercentage","isFormValid","showFieldTooltip","tooltipField","wizardReducer","state","action","type","payload","length","field","index","fieldName","includes","push","Math","round","max","completed","percentage","WizardProvider","children","_s","dispatch","formContext","isEnabled","enhancedWizardMode","progressiveFormFilling","smartFieldDetection","hideFieldTooltip","initializeWizard","allFields","filter","required","readOnly","name","toLowerCase","startWizard","firstIncompleteField","find","nextField","incompleteRequired","fieldIndex","findIndex","f","incompleteSignatures","firstSignature","goToSignatures","firstIncompleteSignature","submitForm","console","log","alert","warn","jumpToField","markFieldComplete","getCurrentButtonState","text","color","disabled","resetWizard","formValid","getCompletionPercentage","getRequiredFieldsStatus","Array","from","fields","keys","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useWizard","_s2","context","Error","$RefreshReg$"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/src/contexts/WizardContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, useCallback, useEffect } from 'react';\nimport { FormField } from '../types/pdf';\nimport { useForm } from './FormContext';\nimport { useFeatureFlag } from '../hooks/useFeatureFlags';\n\n// Wizard States\nexport type WizardState = 'idle' | 'start' | 'next' | 'sign' | 'submit' | 'complete';\n\n// Wizard Button States\nexport type WizardButtonState = {\n  text: string;\n  color: 'primary' | 'secondary' | 'success' | 'info' | 'warning' | 'error';\n  disabled: boolean;\n  action: () => void;\n};\n\n// Wizard Context State\ninterface WizardContextState {\n  wizardState: WizardState;\n  currentFieldIndex: number;\n  currentField: FormField | null;\n  requiredFields: FormField[];\n  signatureFields: FormField[];\n  completedFields: string[];\n  totalRequiredFields: number;\n  completionPercentage: number;\n  isFormValid: boolean;\n  showFieldTooltip: boolean;\n  tooltipField: FormField | null;\n}\n\n// Wizard Actions\ntype WizardAction =\n  | { type: 'INITIALIZE'; payload: { requiredFields: FormField[]; signatureFields: FormField[] } }\n  | { type: 'SET_WIZARD_STATE'; payload: WizardState }\n  | { type: 'SET_CURRENT_FIELD'; payload: { field: FormField | null; index: number } }\n  | { type: 'FIELD_COMPLETED'; payload: string }\n  | { type: 'UPDATE_PROGRESS'; payload: { completed: string[]; percentage: number } }\n  | { type: 'SET_FORM_VALID'; payload: boolean }\n  | { type: 'SHOW_TOOLTIP'; payload: FormField | null }\n  | { type: 'HIDE_TOOLTIP' }\n  | { type: 'RESET_WIZARD' };\n\n// Wizard Context Type\ninterface WizardContextType {\n  state: WizardContextState;\n  // Navigation\n  startWizard: () => void;\n  nextField: () => void;\n  goToSignatures: () => void;\n  submitForm: () => void;\n  jumpToField: (field: FormField) => void;\n  // Field management\n  markFieldComplete: (fieldName: string) => void;\n  getCurrentButtonState: () => WizardButtonState;\n  // Tooltip management\n  showFieldTooltip: (field: FormField) => void;\n  hideFieldTooltip: () => void;\n  // Utility\n  resetWizard: () => void;\n  initializeWizard: (allFields: FormField[]) => void;\n}\n\nconst WizardContext = createContext<WizardContextType | undefined>(undefined);\n\n// Initial state\nconst initialState: WizardContextState = {\n  wizardState: 'idle',\n  currentFieldIndex: -1,\n  currentField: null,\n  requiredFields: [],\n  signatureFields: [],\n  completedFields: [],\n  totalRequiredFields: 0,\n  completionPercentage: 0,\n  isFormValid: false,\n  showFieldTooltip: false,\n  tooltipField: null\n};\n\n// Wizard reducer\nfunction wizardReducer(state: WizardContextState, action: WizardAction): WizardContextState {\n  switch (action.type) {\n    case 'INITIALIZE': {\n      const { requiredFields, signatureFields } = action.payload;\n      return {\n        ...state,\n        requiredFields,\n        signatureFields,\n        totalRequiredFields: requiredFields.length,\n        wizardState: 'start'\n      };\n    }\n\n    case 'SET_WIZARD_STATE': {\n      return {\n        ...state,\n        wizardState: action.payload\n      };\n    }\n\n    case 'SET_CURRENT_FIELD': {\n      const { field, index } = action.payload;\n      return {\n        ...state,\n        currentField: field,\n        currentFieldIndex: index\n      };\n    }\n\n    case 'FIELD_COMPLETED': {\n      const fieldName = action.payload;\n      const completedFields = [...state.completedFields];\n      \n      if (!completedFields.includes(fieldName)) {\n        completedFields.push(fieldName);\n      }\n\n      return {\n        ...state,\n        completedFields,\n        completionPercentage: Math.round((completedFields.length / Math.max(state.totalRequiredFields, 1)) * 100)\n      };\n    }\n\n    case 'UPDATE_PROGRESS': {\n      const { completed, percentage } = action.payload;\n      return {\n        ...state,\n        completedFields: completed,\n        completionPercentage: percentage\n      };\n    }\n\n    case 'SET_FORM_VALID': {\n      return {\n        ...state,\n        isFormValid: action.payload\n      };\n    }\n\n    case 'SHOW_TOOLTIP': {\n      return {\n        ...state,\n        showFieldTooltip: true,\n        tooltipField: action.payload\n      };\n    }\n\n    case 'HIDE_TOOLTIP': {\n      return {\n        ...state,\n        showFieldTooltip: false,\n        tooltipField: null\n      };\n    }\n\n    case 'RESET_WIZARD': {\n      return {\n        ...initialState\n      };\n    }\n\n    default:\n      return state;\n  }\n}\n\n// Wizard Provider\nexport const WizardProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const [state, dispatch] = useReducer(wizardReducer, initialState);\n  const formContext = useForm();\n  \n  // Feature flags for wizard behavior\n  const { isEnabled: enhancedWizardMode } = useFeatureFlag('ENHANCED_WIZARD_MODE');\n  const { isEnabled: progressiveFormFilling } = useFeatureFlag('PROGRESSIVE_FORM_FILLING');\n  const { isEnabled: smartFieldDetection } = useFeatureFlag('SMART_FIELD_DETECTION');\n  \n  // Show field tooltip\n  const showFieldTooltip = useCallback((field: FormField) => {\n    dispatch({ type: 'SHOW_TOOLTIP', payload: field });\n  }, []);\n\n  // Hide field tooltip\n  const hideFieldTooltip = useCallback(() => {\n    dispatch({ type: 'HIDE_TOOLTIP' });\n  }, []);\n\n  // Initialize wizard with form fields\n  const initializeWizard = useCallback((allFields: FormField[]) => {\n    const requiredFields = allFields.filter(field => field.required && !field.readOnly);\n    const signatureFields = allFields.filter(field => \n      field.type === 'signature' || \n      field.name.toLowerCase().includes('signature') ||\n      field.name.toLowerCase().includes('sign')\n    );\n\n    dispatch({\n      type: 'INITIALIZE',\n      payload: { requiredFields, signatureFields }\n    });\n  }, []);\n\n  // Start the wizard\n  const startWizard = useCallback(() => {\n    const firstIncompleteField = state.requiredFields.find(field => \n      !state.completedFields.includes(field.name)\n    );\n\n    if (firstIncompleteField) {\n      dispatch({\n        type: 'SET_CURRENT_FIELD',\n        payload: { field: firstIncompleteField, index: 0 }\n      });\n      dispatch({ type: 'SET_WIZARD_STATE', payload: 'next' });\n      \n      // Show tooltip for the field\n      showFieldTooltip(firstIncompleteField);\n    } else {\n      // All required fields complete, check signatures\n      if (state.signatureFields.length > 0) {\n        dispatch({ type: 'SET_WIZARD_STATE', payload: 'sign' });\n      } else {\n        dispatch({ type: 'SET_WIZARD_STATE', payload: 'submit' });\n      }\n    }\n  }, [state.requiredFields, state.completedFields, state.signatureFields, showFieldTooltip]);\n\n  // Navigate to next field\n  const nextField = useCallback(() => {\n    const incompleteRequired = state.requiredFields.filter(field => \n      !state.completedFields.includes(field.name)\n    );\n\n    if (incompleteRequired.length > 0) {\n      const nextField = incompleteRequired[0];\n      const fieldIndex = state.requiredFields.findIndex(f => f.name === nextField.name);\n      \n      dispatch({\n        type: 'SET_CURRENT_FIELD',\n        payload: { field: nextField, index: fieldIndex }\n      });\n      \n      showFieldTooltip(nextField);\n    } else {\n      // All required fields complete\n      if (state.signatureFields.length > 0) {\n        const incompleteSignatures = state.signatureFields.filter(field =>\n          !state.completedFields.includes(field.name)\n        );\n        \n        if (incompleteSignatures.length > 0) {\n          dispatch({ type: 'SET_WIZARD_STATE', payload: 'sign' });\n          const firstSignature = incompleteSignatures[0];\n          dispatch({\n            type: 'SET_CURRENT_FIELD',\n            payload: { field: firstSignature, index: 0 }\n          });\n          showFieldTooltip(firstSignature);\n        } else {\n          dispatch({ type: 'SET_WIZARD_STATE', payload: 'submit' });\n        }\n      } else {\n        dispatch({ type: 'SET_WIZARD_STATE', payload: 'submit' });\n      }\n    }\n  }, [state.requiredFields, state.signatureFields, state.completedFields, showFieldTooltip]);\n\n  // Go to signature fields\n  const goToSignatures = useCallback(() => {\n    if (state.signatureFields.length > 0) {\n      const firstIncompleteSignature = state.signatureFields.find(field =>\n        !state.completedFields.includes(field.name)\n      );\n\n      if (firstIncompleteSignature) {\n        dispatch({\n          type: 'SET_CURRENT_FIELD',\n          payload: { field: firstIncompleteSignature, index: 0 }\n        });\n        dispatch({ type: 'SET_WIZARD_STATE', payload: 'sign' });\n        showFieldTooltip(firstIncompleteSignature);\n      } else {\n        // All signatures complete\n        dispatch({ type: 'SET_WIZARD_STATE', payload: 'submit' });\n      }\n    }\n  }, [state.signatureFields, state.completedFields, showFieldTooltip]);\n\n  // Submit form\n  const submitForm = useCallback(() => {\n    if (state.isFormValid) {\n      dispatch({ type: 'SET_WIZARD_STATE', payload: 'complete' });\n      console.log('Form submitted successfully!');\n      \n      // TODO: Implement actual form submission in Phase 7\n      alert('Form submission will be implemented in Phase 7. All fields completed!');\n    } else {\n      console.warn('Form is not valid for submission');\n    }\n  }, [state.isFormValid]);\n\n  // Jump to specific field\n  const jumpToField = useCallback((field: FormField) => {\n    const fieldIndex = state.requiredFields.findIndex(f => f.name === field.name);\n    \n    dispatch({\n      type: 'SET_CURRENT_FIELD',\n      payload: { field, index: fieldIndex >= 0 ? fieldIndex : 0 }\n    });\n\n    // Update wizard state based on field type\n    if (field.type === 'signature') {\n      dispatch({ type: 'SET_WIZARD_STATE', payload: 'sign' });\n    } else if (field.required) {\n      dispatch({ type: 'SET_WIZARD_STATE', payload: 'next' });\n    }\n\n    showFieldTooltip(field);\n  }, [state.requiredFields, showFieldTooltip]);\n\n  // Mark field as complete\n  const markFieldComplete = useCallback((fieldName: string) => {\n    dispatch({ type: 'FIELD_COMPLETED', payload: fieldName });\n    \n    // Update form context as well\n    formContext.markFieldComplete(fieldName);\n  }, [formContext]);\n\n  // Get current button state\n  const getCurrentButtonState = useCallback((): WizardButtonState => {\n    switch (state.wizardState) {\n      case 'idle':\n      case 'start':\n        return {\n          text: 'Start',\n          color: 'primary', // Blue\n          disabled: state.totalRequiredFields === 0,\n          action: startWizard\n        };\n\n      case 'next': {\n        const incompleteRequired = state.requiredFields.filter(field => \n          !state.completedFields.includes(field.name)\n        );\n        \n        if (incompleteRequired.length > 0) {\n          return {\n            text: 'Next',\n            color: 'secondary', // Orange\n            disabled: false,\n            action: nextField\n          };\n        } else {\n          // All required complete, check signatures\n          if (state.signatureFields.length > 0) {\n            return {\n              text: 'Sign',\n              color: 'info', // Purple\n              disabled: false,\n              action: goToSignatures\n            };\n          } else {\n            return {\n              text: 'Submit',\n              color: 'success', // Green\n              disabled: !state.isFormValid,\n              action: submitForm\n            };\n          }\n        }\n      }\n\n      case 'sign': {\n        const incompleteSignatures = state.signatureFields.filter(field =>\n          !state.completedFields.includes(field.name)\n        );\n        \n        if (incompleteSignatures.length > 0) {\n          return {\n            text: 'Sign',\n            color: 'info', // Purple\n            disabled: false,\n            action: nextField\n          };\n        } else {\n          return {\n            text: 'Submit',\n            color: 'success', // Green\n            disabled: !state.isFormValid,\n            action: submitForm\n          };\n        }\n      }\n\n      case 'submit':\n        return {\n          text: 'Submit',\n          color: 'success', // Green\n          disabled: !state.isFormValid,\n          action: submitForm\n        };\n\n      case 'complete':\n        return {\n          text: 'Complete',\n          color: 'success', // Green\n          disabled: true,\n          action: () => {}\n        };\n\n      default:\n        return {\n          text: 'Start',\n          color: 'primary',\n          disabled: true,\n          action: startWizard\n        };\n    }\n  }, [state.wizardState, state.requiredFields, state.signatureFields, state.completedFields, state.isFormValid, state.totalRequiredFields, startWizard, nextField, goToSignatures, submitForm]);\n\n  // Reset wizard\n  const resetWizard = useCallback(() => {\n    dispatch({ type: 'RESET_WIZARD' });\n  }, []);\n\n  // Update form validity when form context changes\n  useEffect(() => {\n    const formValid = formContext.isFormValid();\n    dispatch({ type: 'SET_FORM_VALID', payload: formValid });\n  }, [formContext]);\n\n  // Update completion progress when form context changes\n  useEffect(() => {\n    const percentage = formContext.getCompletionPercentage();\n    const { completed } = formContext.getRequiredFieldsStatus();\n    \n    dispatch({\n      type: 'UPDATE_PROGRESS',\n      payload: {\n        completed: Array.from(formContext.state.fields.keys()).filter(fieldName =>\n          formContext.state.completedFields.includes(fieldName)\n        ),\n        percentage\n      }\n    });\n  }, [formContext]);\n\n  const contextValue: WizardContextType = {\n    state,\n    startWizard,\n    nextField,\n    goToSignatures,\n    submitForm,\n    jumpToField,\n    markFieldComplete,\n    getCurrentButtonState,\n    showFieldTooltip,\n    hideFieldTooltip,\n    resetWizard,\n    initializeWizard\n  };\n\n  return (\n    <WizardContext.Provider value={contextValue}>\n      {children}\n    </WizardContext.Provider>\n  );\n};\n\n// Hook to use wizard context\nexport const useWizard = () => {\n  const context = useContext(WizardContext);\n  if (context === undefined) {\n    throw new Error('useWizard must be used within a WizardProvider');\n  }\n  return context;\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}