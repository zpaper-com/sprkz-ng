{"ast":null,"code":"/** A simple Least Recently Used map */\nclass LRUMap {\n  constructor(_maxSize) {\n    this._maxSize = _maxSize;\n    this._cache = new Map();\n  }\n\n  /** Get the current size of the cache */\n  get size() {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  get(key) {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  set(key, value) {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  remove(key) {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  clear() {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  keys() {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  values() {\n    const values = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\nexport { LRUMap };","map":{"version":3,"names":["LRUMap","constructor","_maxSize","_cache","Map","size","get","key","value","undefined","delete","set","keys","next","remove","clear","Array","from","values","forEach","push"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/lru.ts"],"sourcesContent":["/** A simple Least Recently Used map */\nexport class LRUMap<K, V> {\n  private readonly _cache: Map<K, V>;\n\n  public constructor(private readonly _maxSize: number) {\n    this._cache = new Map<K, V>();\n  }\n\n  /** Get the current size of the cache */\n  public get size(): number {\n    return this._cache.size;\n  }\n\n  /** Get an entry or undefined if it was not in the cache. Re-inserts to update the recently used order */\n  public get(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value === undefined) {\n      return undefined;\n    }\n    // Remove and re-insert to update the order\n    this._cache.delete(key);\n    this._cache.set(key, value);\n    return value;\n  }\n\n  /** Insert an entry and evict an older entry if we've reached maxSize */\n  public set(key: K, value: V): void {\n    if (this._cache.size >= this._maxSize) {\n      // keys() returns an iterator in insertion order so keys().next() gives us the oldest key\n      this._cache.delete(this._cache.keys().next().value);\n    }\n    this._cache.set(key, value);\n  }\n\n  /** Remove an entry and return the entry if it was in the cache */\n  public remove(key: K): V | undefined {\n    const value = this._cache.get(key);\n    if (value) {\n      this._cache.delete(key);\n    }\n    return value;\n  }\n\n  /** Clear all entries */\n  public clear(): void {\n    this._cache.clear();\n  }\n\n  /** Get all the keys */\n  public keys(): Array<K> {\n    return Array.from(this._cache.keys());\n  }\n\n  /** Get all the values */\n  public values(): Array<V> {\n    const values: V[] = [];\n    this._cache.forEach(value => values.push(value));\n    return values;\n  }\n}\n"],"mappings":"AAAA;AACO,MAAMA,MAAM,CAAO;EAGjBC,WAAWA,CAAkBC,QAAQ,EAAU;IAAA,KAAAA,QAAA,GAAAA,QAAA;IACpD,IAAI,CAACC,MAAA,GAAS,IAAIC,GAAG,EAAQ;EACjC;;EAEA;EACS,IAAIC,IAAIA,CAAA,EAAW;IACxB,OAAO,IAAI,CAACF,MAAM,CAACE,IAAI;EAC3B;;EAEA;EACSC,GAAGA,CAACC,GAAG,EAAoB;IAChC,MAAMC,KAAA,GAAQ,IAAI,CAACL,MAAM,CAACG,GAAG,CAACC,GAAG,CAAC;IAClC,IAAIC,KAAA,KAAUC,SAAS,EAAE;MACvB,OAAOA,SAAS;IACtB;IACA;IACI,IAAI,CAACN,MAAM,CAACO,MAAM,CAACH,GAAG,CAAC;IACvB,IAAI,CAACJ,MAAM,CAACQ,GAAG,CAACJ,GAAG,EAAEC,KAAK,CAAC;IAC3B,OAAOA,KAAK;EAChB;;EAEA;EACSG,GAAGA,CAACJ,GAAG,EAAKC,KAAK,EAAW;IACjC,IAAI,IAAI,CAACL,MAAM,CAACE,IAAA,IAAQ,IAAI,CAACH,QAAQ,EAAE;MAC3C;MACM,IAAI,CAACC,MAAM,CAACO,MAAM,CAAC,IAAI,CAACP,MAAM,CAACS,IAAI,EAAE,CAACC,IAAI,EAAE,CAACL,KAAK,CAAC;IACzD;IACI,IAAI,CAACL,MAAM,CAACQ,GAAG,CAACJ,GAAG,EAAEC,KAAK,CAAC;EAC/B;;EAEA;EACSM,MAAMA,CAACP,GAAG,EAAoB;IACnC,MAAMC,KAAA,GAAQ,IAAI,CAACL,MAAM,CAACG,GAAG,CAACC,GAAG,CAAC;IAClC,IAAIC,KAAK,EAAE;MACT,IAAI,CAACL,MAAM,CAACO,MAAM,CAACH,GAAG,CAAC;IAC7B;IACI,OAAOC,KAAK;EAChB;;EAEA;EACSO,KAAKA,CAAA,EAAS;IACnB,IAAI,CAACZ,MAAM,CAACY,KAAK,EAAE;EACvB;;EAEA;EACSH,IAAIA,CAAA,EAAa;IACtB,OAAOI,KAAK,CAACC,IAAI,CAAC,IAAI,CAACd,MAAM,CAACS,IAAI,EAAE,CAAC;EACzC;;EAEA;EACSM,MAAMA,CAAA,EAAa;IACxB,MAAMA,MAAM,GAAQ,EAAE;IACtB,IAAI,CAACf,MAAM,CAACgB,OAAO,CAACX,KAAA,IAASU,MAAM,CAACE,IAAI,CAACZ,KAAK,CAAC,CAAC;IAChD,OAAOU,MAAM;EACjB;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}