{"ast":null,"code":"import { bindReporter } from './lib/bindReporter.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * // Sentry: web-vitals removed FID reporting from v5. We're keeping it around\n * for the time being.\n * // TODO(v10): Remove FID reporting!\n */\n\n/** Thresholds for FID. See https://web.dev/articles/fid#what_is_a_good_fid_score */\nconst FIDThresholds = [100, 300];\n\n/**\n * Calculates the [FID](https://web.dev/articles/fid) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nconst onFID = function (onReport) {\n  let opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FID');\n    // eslint-disable-next-line prefer-const\n    let report;\n    const handleEntry = entry => {\n      // Only report if the page wasn't hidden prior to the first input.\n      if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n        metric.value = entry.processingStart - entry.startTime;\n        metric.entries.push(entry);\n        report(true);\n      }\n    };\n    const handleEntries = entries => {\n      entries.forEach(handleEntry);\n    };\n    const po = observe('first-input', handleEntries);\n    report = bindReporter(onReport, metric, FIDThresholds, opts.reportAllChanges);\n    if (po) {\n      // sentry: TODO: Figure out if we can use new whinIdleOrHidden insteard of onHidden\n      onHidden(runOnce(() => {\n        handleEntries(po.takeRecords());\n        po.disconnect();\n      }));\n    }\n  });\n};\nexport { FIDThresholds, onFID };\n//# sourceMappingURL=getFID.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}