{"ast":null,"code":"const SPAN_STATUS_UNSET = 0;\nconst SPAN_STATUS_OK = 1;\nconst SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nfunction getSpanStatusFromHttpCode(httpStatus) {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return {\n      code: SPAN_STATUS_OK\n    };\n  }\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'unauthenticated'\n        };\n      case 403:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'permission_denied'\n        };\n      case 404:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'not_found'\n        };\n      case 409:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'already_exists'\n        };\n      case 413:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'failed_precondition'\n        };\n      case 429:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'resource_exhausted'\n        };\n      case 499:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'cancelled'\n        };\n      default:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'invalid_argument'\n        };\n    }\n  }\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'unimplemented'\n        };\n      case 503:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'unavailable'\n        };\n      case 504:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'deadline_exceeded'\n        };\n      default:\n        return {\n          code: SPAN_STATUS_ERROR,\n          message: 'internal_error'\n        };\n    }\n  }\n  return {\n    code: SPAN_STATUS_ERROR,\n    message: 'unknown_error'\n  };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nfunction setHttpStatus(span, httpStatus) {\n  span.setAttribute('http.response.status_code', httpStatus);\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\nexport { SPAN_STATUS_ERROR, SPAN_STATUS_OK, SPAN_STATUS_UNSET, getSpanStatusFromHttpCode, setHttpStatus };","map":{"version":3,"names":["SPAN_STATUS_UNSET","SPAN_STATUS_OK","SPAN_STATUS_ERROR","getSpanStatusFromHttpCode","httpStatus","code","message","setHttpStatus","span","setAttribute","spanStatus","setStatus"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/tracing/spanstatus.ts"],"sourcesContent":["import type { Span } from '../types-hoist/span';\nimport type { SpanStatus } from '../types-hoist/spanStatus';\n\nexport const SPAN_STATUS_UNSET = 0;\nexport const SPAN_STATUS_OK = 1;\nexport const SPAN_STATUS_ERROR = 2;\n\n/**\n * Converts a HTTP status code into a sentry status with a message.\n *\n * @param httpStatus The HTTP response status code.\n * @returns The span status or unknown_error.\n */\n// https://develop.sentry.dev/sdk/event-payloads/span/\nexport function getSpanStatusFromHttpCode(httpStatus: number): SpanStatus {\n  if (httpStatus < 400 && httpStatus >= 100) {\n    return { code: SPAN_STATUS_OK };\n  }\n\n  if (httpStatus >= 400 && httpStatus < 500) {\n    switch (httpStatus) {\n      case 401:\n        return { code: SPAN_STATUS_ERROR, message: 'unauthenticated' };\n      case 403:\n        return { code: SPAN_STATUS_ERROR, message: 'permission_denied' };\n      case 404:\n        return { code: SPAN_STATUS_ERROR, message: 'not_found' };\n      case 409:\n        return { code: SPAN_STATUS_ERROR, message: 'already_exists' };\n      case 413:\n        return { code: SPAN_STATUS_ERROR, message: 'failed_precondition' };\n      case 429:\n        return { code: SPAN_STATUS_ERROR, message: 'resource_exhausted' };\n      case 499:\n        return { code: SPAN_STATUS_ERROR, message: 'cancelled' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'invalid_argument' };\n    }\n  }\n\n  if (httpStatus >= 500 && httpStatus < 600) {\n    switch (httpStatus) {\n      case 501:\n        return { code: SPAN_STATUS_ERROR, message: 'unimplemented' };\n      case 503:\n        return { code: SPAN_STATUS_ERROR, message: 'unavailable' };\n      case 504:\n        return { code: SPAN_STATUS_ERROR, message: 'deadline_exceeded' };\n      default:\n        return { code: SPAN_STATUS_ERROR, message: 'internal_error' };\n    }\n  }\n\n  return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n}\n\n/**\n * Sets the Http status attributes on the current span based on the http code.\n * Additionally, the span's status is updated, depending on the http code.\n */\nexport function setHttpStatus(span: Span, httpStatus: number): void {\n  span.setAttribute('http.response.status_code', httpStatus);\n\n  const spanStatus = getSpanStatusFromHttpCode(httpStatus);\n  if (spanStatus.message !== 'unknown_error') {\n    span.setStatus(spanStatus);\n  }\n}\n"],"mappings":"AAGO,MAAMA,iBAAA,GAAoB;AAC1B,MAAMC,cAAA,GAAiB;AACvB,MAAMC,iBAAA,GAAoB;;AAEjC;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,yBAAyBA,CAACC,UAAU,EAAsB;EACxE,IAAIA,UAAA,GAAa,OAAOA,UAAA,IAAc,GAAG,EAAE;IACzC,OAAO;MAAEC,IAAI,EAAEJ;IAAA,CAAgB;EACnC;EAEE,IAAIG,UAAA,IAAc,OAAOA,UAAA,GAAa,GAAG,EAAE;IACzC,QAAQA,UAAU;MAChB,KAAK,GAAG;QACN,OAAO;UAAEC,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAmB;MAChE,KAAK,GAAG;QACN,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAqB;MAClE,KAAK,GAAG;QACN,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAa;MAC1D,KAAK,GAAG;QACN,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAkB;MAC/D,KAAK,GAAG;QACN,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAuB;MACpE,KAAK,GAAG;QACN,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAsB;MACnE,KAAK,GAAG;QACN,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAa;MAC1D;QACE,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAoB;IACvE;EACA;EAEE,IAAIF,UAAA,IAAc,OAAOA,UAAA,GAAa,GAAG,EAAE;IACzC,QAAQA,UAAU;MAChB,KAAK,GAAG;QACN,OAAO;UAAEC,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAiB;MAC9D,KAAK,GAAG;QACN,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAe;MAC5D,KAAK,GAAG;QACN,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAqB;MAClE;QACE,OAAO;UAAED,IAAI,EAAEH,iBAAiB;UAAEI,OAAO,EAAE;QAAA,CAAkB;IACrE;EACA;EAEE,OAAO;IAAED,IAAI,EAAEH,iBAAiB;IAAEI,OAAO,EAAE;EAAA,CAAiB;AAC9D;;AAEA;AACA;AACA;AACA;AACO,SAASC,aAAaA,CAACC,IAAI,EAAQJ,UAAU,EAAgB;EAClEI,IAAI,CAACC,YAAY,CAAC,2BAA2B,EAAEL,UAAU,CAAC;EAE1D,MAAMM,UAAA,GAAaP,yBAAyB,CAACC,UAAU,CAAC;EACxD,IAAIM,UAAU,CAACJ,OAAA,KAAY,eAAe,EAAE;IAC1CE,IAAI,CAACG,SAAS,CAACD,UAAU,CAAC;EAC9B;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}