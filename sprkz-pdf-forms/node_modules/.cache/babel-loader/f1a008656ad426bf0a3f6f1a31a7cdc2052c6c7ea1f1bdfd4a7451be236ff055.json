{"ast":null,"code":"import { bindReporter } from './lib/bindReporter.js';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher.js';\nimport { initMetric } from './lib/initMetric.js';\nimport { observe } from './lib/observe.js';\nimport { onHidden } from './lib/onHidden.js';\nimport { runOnce } from './lib/runOnce.js';\nimport { whenActivated } from './lib/whenActivated.js';\n\n/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * // Sentry: web-vitals removed FID reporting from v5. We're keeping it around\n * for the time being.\n * // TODO(v10): Remove FID reporting!\n */\n\n/** Thresholds for FID. See https://web.dev/articles/fid#what_is_a_good_fid_score */\nconst FIDThresholds = [100, 300];\n\n/**\n * Calculates the [FID](https://web.dev/articles/fid) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nconst onFID = (onReport, opts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FID');\n    // eslint-disable-next-line prefer-const\n    let report;\n    const handleEntry = entry => {\n      // Only report if the page wasn't hidden prior to the first input.\n      if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n        metric.value = entry.processingStart - entry.startTime;\n        metric.entries.push(entry);\n        report(true);\n      }\n    };\n    const handleEntries = entries => {\n      entries.forEach(handleEntry);\n    };\n    const po = observe('first-input', handleEntries);\n    report = bindReporter(onReport, metric, FIDThresholds, opts.reportAllChanges);\n    if (po) {\n      // sentry: TODO: Figure out if we can use new whinIdleOrHidden insteard of onHidden\n      onHidden(runOnce(() => {\n        handleEntries(po.takeRecords());\n        po.disconnect();\n      }));\n    }\n  });\n};\nexport { FIDThresholds, onFID };","map":{"version":3,"names":["FIDThresholds","onFID","onReport","opts","whenActivated","visibilityWatcher","getVisibilityWatcher","metric","initMetric","report","handleEntry","entry","startTime","firstHiddenTime","value","processingStart","entries","push","handleEntries","forEach","po","observe","bindReporter","reportAllChanges","onHidden","runOnce","takeRecords","disconnect"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/getFID.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * // Sentry: web-vitals removed FID reporting from v5. We're keeping it around\n * for the time being.\n * // TODO(v10): Remove FID reporting!\n */\n\nimport { bindReporter } from './lib/bindReporter';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { observe } from './lib/observe';\nimport { onHidden } from './lib/onHidden';\nimport { runOnce } from './lib/runOnce';\nimport { whenActivated } from './lib/whenActivated';\nimport type { FIDMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for FID. See https://web.dev/articles/fid#what_is_a_good_fid_score */\nexport const FIDThresholds: MetricRatingThresholds = [100, 300];\n\n/**\n * Calculates the [FID](https://web.dev/articles/fid) value for the current page and\n * calls the `callback` function once the value is ready, along with the\n * relevant `first-input` performance entry used to determine the value. The\n * reported value is a `DOMHighResTimeStamp`.\n *\n * _**Important:** since FID is only reported after the user interacts with the\n * page, it's possible that it will not be reported for some page loads._\n */\nexport const onFID = (onReport: (metric: FIDMetric) => void, opts: ReportOpts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('FID');\n    // eslint-disable-next-line prefer-const\n    let report: ReturnType<typeof bindReporter>;\n\n    const handleEntry = (entry: PerformanceEventTiming): void => {\n      // Only report if the page wasn't hidden prior to the first input.\n      if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n        metric.value = entry.processingStart - entry.startTime;\n        metric.entries.push(entry);\n        report(true);\n      }\n    };\n\n    const handleEntries = (entries: FIDMetric['entries']) => {\n      (entries as PerformanceEventTiming[]).forEach(handleEntry);\n    };\n\n    const po = observe('first-input', handleEntries);\n\n    report = bindReporter(onReport, metric, FIDThresholds, opts.reportAllChanges);\n\n    if (po) {\n      // sentry: TODO: Figure out if we can use new whinIdleOrHidden insteard of onHidden\n      onHidden(\n        runOnce(() => {\n          handleEntries(po.takeRecords() as FIDMetric['entries']);\n          po.disconnect();\n        }),\n      );\n    }\n  });\n};\n"],"mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAWA;AACO,MAAMA,aAAa,GAA2B,CAAC,GAAG,EAAE,GAAG;;AAE9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMC,KAAA,GAAQA,CAACC,QAAQ,EAA+BC,IAAI,GAAe,EAAE,KAAK;EACrFC,aAAa,CAAC,MAAM;IAClB,MAAMC,iBAAA,GAAoBC,oBAAoB,EAAE;IAChD,MAAMC,MAAA,GAASC,UAAU,CAAC,KAAK,CAAC;IACpC;IACI,IAAIC,MAAM;IAEV,MAAMC,WAAA,GAAeC,KAAK,IAAmC;MACjE;MACM,IAAIA,KAAK,CAACC,SAAA,GAAYP,iBAAiB,CAACQ,eAAe,EAAE;QACvDN,MAAM,CAACO,KAAA,GAAQH,KAAK,CAACI,eAAA,GAAkBJ,KAAK,CAACC,SAAS;QACtDL,MAAM,CAACS,OAAO,CAACC,IAAI,CAACN,KAAK,CAAC;QAC1BF,MAAM,CAAC,IAAI,CAAC;MACpB;IACA,CAAK;IAED,MAAMS,aAAA,GAAiBF,OAAO,IAA2B;MACtDA,OAAA,CAAqCG,OAAO,CAACT,WAAW,CAAC;IAChE,CAAK;IAED,MAAMU,EAAA,GAAKC,OAAO,CAAC,aAAa,EAAEH,aAAa,CAAC;IAEhDT,MAAA,GAASa,YAAY,CAACpB,QAAQ,EAAEK,MAAM,EAAEP,aAAa,EAAEG,IAAI,CAACoB,gBAAgB,CAAC;IAE7E,IAAIH,EAAE,EAAE;MACZ;MACMI,QAAQ,CACNC,OAAO,CAAC,MAAM;QACZP,aAAa,CAACE,EAAE,CAACM,WAAW,GAA2B;QACvDN,EAAE,CAACO,UAAU,EAAE;MACzB,CAAS,CACT,CAAO;IACP;EACA,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}