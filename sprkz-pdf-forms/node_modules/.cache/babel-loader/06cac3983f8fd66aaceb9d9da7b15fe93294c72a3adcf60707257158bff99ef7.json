{"ast":null,"code":"import { defineIntegration, getActiveSpan, getRootSpan, debug } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { startProfileForSpan } from './startProfileForSpan.js';\nimport { isAutomatedPageLoadSpan, shouldProfileSpan, getActiveProfilesCount, findProfiledTransactionsFromEnvelope, takeProfileFromGlobalCache, createProfilingEvent, addProfilesToEnvelope } from './utils.js';\nconst INTEGRATION_NAME = 'BrowserProfiling';\nconst _browserProfilingIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const activeSpan = getActiveSpan();\n      const rootSpan = activeSpan && getRootSpan(activeSpan);\n      if (rootSpan && isAutomatedPageLoadSpan(rootSpan)) {\n        if (shouldProfileSpan(rootSpan)) {\n          startProfileForSpan(rootSpan);\n        }\n      }\n      client.on('spanStart', span => {\n        if (span === getRootSpan(span) && shouldProfileSpan(span)) {\n          startProfileForSpan(span);\n        }\n      });\n      client.on('beforeEnvelope', envelope => {\n        // if not profiles are in queue, there is nothing to add to the envelope.\n        if (!getActiveProfilesCount()) {\n          return;\n        }\n        const profiledTransactionEvents = findProfiledTransactionsFromEnvelope(envelope);\n        if (!profiledTransactionEvents.length) {\n          return;\n        }\n        const profilesToAddToEnvelope = [];\n        for (const profiledTransaction of profiledTransactionEvents) {\n          const context = profiledTransaction?.contexts;\n          const profile_id = context?.profile?.['profile_id'];\n          const start_timestamp = context?.profile?.['start_timestamp'];\n          if (typeof profile_id !== 'string') {\n            DEBUG_BUILD && debug.log('[Profiling] cannot find profile for a span without a profile context');\n            continue;\n          }\n          if (!profile_id) {\n            DEBUG_BUILD && debug.log('[Profiling] cannot find profile for a span without a profile context');\n            continue;\n          }\n\n          // Remove the profile from the span context before sending, relay will take care of the rest.\n          if (context?.profile) {\n            delete context.profile;\n          }\n          const profile = takeProfileFromGlobalCache(profile_id);\n          if (!profile) {\n            DEBUG_BUILD && debug.log(`[Profiling] Could not retrieve profile for span: ${profile_id}`);\n            continue;\n          }\n          const profileEvent = createProfilingEvent(profile_id, start_timestamp, profile, profiledTransaction);\n          if (profileEvent) {\n            profilesToAddToEnvelope.push(profileEvent);\n          }\n        }\n        addProfilesToEnvelope(envelope, profilesToAddToEnvelope);\n      });\n    }\n  };\n};\nconst browserProfilingIntegration = defineIntegration(_browserProfilingIntegration);\nexport { browserProfilingIntegration };\n//# sourceMappingURL=integration.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}