{"ast":null,"code":"import { debug, getCurrentScope, getClient, lastEventId, getReportDialogEndpoint } from '@sentry/core';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { WINDOW } from './helpers.js';\n\n/**\n * Present the user with a report dialog.\n *\n * @param options Everything is optional, we try to fetch all info need from the current scope.\n */\nfunction showReportDialog(options = {}) {\n  const optionalDocument = WINDOW.document;\n  const injectionPoint = optionalDocument?.head || optionalDocument?.body;\n\n  // doesn't work without a document (React Native)\n  if (!injectionPoint) {\n    DEBUG_BUILD && debug.error('[showReportDialog] Global document not defined');\n    return;\n  }\n  const scope = getCurrentScope();\n  const client = getClient();\n  const dsn = client?.getDsn();\n  if (!dsn) {\n    DEBUG_BUILD && debug.error('[showReportDialog] DSN not configured');\n    return;\n  }\n  const mergedOptions = {\n    ...options,\n    user: {\n      ...scope.getUser(),\n      ...options.user\n    },\n    eventId: options.eventId || lastEventId()\n  };\n  const script = WINDOW.document.createElement('script');\n  script.async = true;\n  script.crossOrigin = 'anonymous';\n  script.src = getReportDialogEndpoint(dsn, mergedOptions);\n  const {\n    onLoad,\n    onClose\n  } = mergedOptions;\n  if (onLoad) {\n    script.onload = onLoad;\n  }\n  if (onClose) {\n    const reportDialogClosedMessageHandler = event => {\n      if (event.data === '__sentry_reportdialog_closed__') {\n        try {\n          onClose();\n        } finally {\n          WINDOW.removeEventListener('message', reportDialogClosedMessageHandler);\n        }\n      }\n    };\n    WINDOW.addEventListener('message', reportDialogClosedMessageHandler);\n  }\n  injectionPoint.appendChild(script);\n}\nexport { showReportDialog };\n//# sourceMappingURL=report-dialog.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}