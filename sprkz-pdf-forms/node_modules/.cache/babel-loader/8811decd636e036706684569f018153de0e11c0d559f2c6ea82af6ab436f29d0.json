{"ast":null,"code":"import { addBreadcrumb } from '../breadcrumbs.js';\nimport { getClient } from '../currentScopes.js';\nimport { addConsoleInstrumentationHandler } from '../instrument/console.js';\nimport { defineIntegration } from '../integration.js';\nimport { CONSOLE_LEVELS } from '../utils/debug-logger.js';\nimport { severityLevelFromString } from '../utils/severity.js';\nimport { safeJoin } from '../utils/string.js';\nimport { GLOBAL_OBJ } from '../utils/worldwide.js';\nconst INTEGRATION_NAME = 'Console';\n\n/**\n * Captures calls to the `console` API as breadcrumbs in Sentry.\n *\n * By default the integration instruments `console.debug`, `console.info`, `console.warn`, `console.error`,\n * `console.log`, `console.trace`, and `console.assert`. You can use the `levels` option to customize which\n * levels are captured.\n *\n * @example\n *\n * ```js\n * Sentry.init({\n *   integrations: [Sentry.consoleIntegration({ levels: ['error', 'warn'] })],\n * });\n * ```\n */\nconst consoleIntegration = defineIntegration((options = {}) => {\n  const levels = new Set(options.levels || CONSOLE_LEVELS);\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      addConsoleInstrumentationHandler(({\n        args,\n        level\n      }) => {\n        if (getClient() !== client || !levels.has(level)) {\n          return;\n        }\n        addConsoleBreadcrumb(level, args);\n      });\n    }\n  };\n});\n\n/**\n * Capture a console breadcrumb.\n *\n * Exported just for tests.\n */\nfunction addConsoleBreadcrumb(level, args) {\n  const breadcrumb = {\n    category: 'console',\n    data: {\n      arguments: args,\n      logger: 'console'\n    },\n    level: severityLevelFromString(level),\n    message: formatConsoleArgs(args)\n  };\n  if (level === 'assert') {\n    if (args[0] === false) {\n      const assertionArgs = args.slice(1);\n      breadcrumb.message = assertionArgs.length > 0 ? `Assertion failed: ${formatConsoleArgs(assertionArgs)}` : 'Assertion failed';\n      breadcrumb.data.arguments = assertionArgs;\n    } else {\n      // Don't capture a breadcrumb for passed assertions\n      return;\n    }\n  }\n  addBreadcrumb(breadcrumb, {\n    input: args,\n    level\n  });\n}\nfunction formatConsoleArgs(values) {\n  return 'util' in GLOBAL_OBJ && typeof GLOBAL_OBJ.util.format === 'function' ? GLOBAL_OBJ.util.format(...values) : safeJoin(values, ' ');\n}\nexport { addConsoleBreadcrumb, consoleIntegration };\n//# sourceMappingURL=console.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}