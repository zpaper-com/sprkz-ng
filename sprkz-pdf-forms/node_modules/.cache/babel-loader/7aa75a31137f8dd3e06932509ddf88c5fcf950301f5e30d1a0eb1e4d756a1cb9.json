{"ast":null,"code":"/**\n * @license React\n * react-jsx-runtime.development.js\n *\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n\"use strict\";\n\n\"production\" !== process.env.NODE_ENV && function () {\n  function getComponentNameFromType(type) {\n    if (null == type) return null;\n    if (\"function\" === typeof type) return type.$$typeof === REACT_CLIENT_REFERENCE ? null : type.displayName || type.name || null;\n    if (\"string\" === typeof type) return type;\n    switch (type) {\n      case REACT_FRAGMENT_TYPE:\n        return \"Fragment\";\n      case REACT_PROFILER_TYPE:\n        return \"Profiler\";\n      case REACT_STRICT_MODE_TYPE:\n        return \"StrictMode\";\n      case REACT_SUSPENSE_TYPE:\n        return \"Suspense\";\n      case REACT_SUSPENSE_LIST_TYPE:\n        return \"SuspenseList\";\n      case REACT_ACTIVITY_TYPE:\n        return \"Activity\";\n    }\n    if (\"object\" === typeof type) switch (\"number\" === typeof type.tag && console.error(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"), type.$$typeof) {\n      case REACT_PORTAL_TYPE:\n        return \"Portal\";\n      case REACT_CONTEXT_TYPE:\n        return (type.displayName || \"Context\") + \".Provider\";\n      case REACT_CONSUMER_TYPE:\n        return (type._context.displayName || \"Context\") + \".Consumer\";\n      case REACT_FORWARD_REF_TYPE:\n        var innerType = type.render;\n        type = type.displayName;\n        type || (type = innerType.displayName || innerType.name || \"\", type = \"\" !== type ? \"ForwardRef(\" + type + \")\" : \"ForwardRef\");\n        return type;\n      case REACT_MEMO_TYPE:\n        return innerType = type.displayName || null, null !== innerType ? innerType : getComponentNameFromType(type.type) || \"Memo\";\n      case REACT_LAZY_TYPE:\n        innerType = type._payload;\n        type = type._init;\n        try {\n          return getComponentNameFromType(type(innerType));\n        } catch (x) {}\n    }\n    return null;\n  }\n  function testStringCoercion(value) {\n    return \"\" + value;\n  }\n  function checkKeyStringCoercion(value) {\n    try {\n      testStringCoercion(value);\n      var JSCompiler_inline_result = !1;\n    } catch (e) {\n      JSCompiler_inline_result = !0;\n    }\n    if (JSCompiler_inline_result) {\n      JSCompiler_inline_result = console;\n      var JSCompiler_temp_const = JSCompiler_inline_result.error;\n      var JSCompiler_inline_result$jscomp$0 = \"function\" === typeof Symbol && Symbol.toStringTag && value[Symbol.toStringTag] || value.constructor.name || \"Object\";\n      JSCompiler_temp_const.call(JSCompiler_inline_result, \"The provided key is an unsupported type %s. This value must be coerced to a string before using it here.\", JSCompiler_inline_result$jscomp$0);\n      return testStringCoercion(value);\n    }\n  }\n  function getTaskName(type) {\n    if (type === REACT_FRAGMENT_TYPE) return \"<>\";\n    if (\"object\" === typeof type && null !== type && type.$$typeof === REACT_LAZY_TYPE) return \"<...>\";\n    try {\n      var name = getComponentNameFromType(type);\n      return name ? \"<\" + name + \">\" : \"<...>\";\n    } catch (x) {\n      return \"<...>\";\n    }\n  }\n  function getOwner() {\n    var dispatcher = ReactSharedInternals.A;\n    return null === dispatcher ? null : dispatcher.getOwner();\n  }\n  function UnknownOwner() {\n    return Error(\"react-stack-top-frame\");\n  }\n  function hasValidKey(config) {\n    if (hasOwnProperty.call(config, \"key\")) {\n      var getter = Object.getOwnPropertyDescriptor(config, \"key\").get;\n      if (getter && getter.isReactWarning) return !1;\n    }\n    return void 0 !== config.key;\n  }\n  function defineKeyPropWarningGetter(props, displayName) {\n    function warnAboutAccessingKey() {\n      specialPropKeyWarningShown || (specialPropKeyWarningShown = !0, console.error(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://react.dev/link/special-props)\", displayName));\n    }\n    warnAboutAccessingKey.isReactWarning = !0;\n    Object.defineProperty(props, \"key\", {\n      get: warnAboutAccessingKey,\n      configurable: !0\n    });\n  }\n  function elementRefGetterWithDeprecationWarning() {\n    var componentName = getComponentNameFromType(this.type);\n    didWarnAboutElementRef[componentName] || (didWarnAboutElementRef[componentName] = !0, console.error(\"Accessing element.ref was removed in React 19. ref is now a regular prop. It will be removed from the JSX Element type in a future release.\"));\n    componentName = this.props.ref;\n    return void 0 !== componentName ? componentName : null;\n  }\n  function ReactElement(type, key, self, source, owner, props, debugStack, debugTask) {\n    self = props.ref;\n    type = {\n      $$typeof: REACT_ELEMENT_TYPE,\n      type: type,\n      key: key,\n      props: props,\n      _owner: owner\n    };\n    null !== (void 0 !== self ? self : null) ? Object.defineProperty(type, \"ref\", {\n      enumerable: !1,\n      get: elementRefGetterWithDeprecationWarning\n    }) : Object.defineProperty(type, \"ref\", {\n      enumerable: !1,\n      value: null\n    });\n    type._store = {};\n    Object.defineProperty(type._store, \"validated\", {\n      configurable: !1,\n      enumerable: !1,\n      writable: !0,\n      value: 0\n    });\n    Object.defineProperty(type, \"_debugInfo\", {\n      configurable: !1,\n      enumerable: !1,\n      writable: !0,\n      value: null\n    });\n    Object.defineProperty(type, \"_debugStack\", {\n      configurable: !1,\n      enumerable: !1,\n      writable: !0,\n      value: debugStack\n    });\n    Object.defineProperty(type, \"_debugTask\", {\n      configurable: !1,\n      enumerable: !1,\n      writable: !0,\n      value: debugTask\n    });\n    Object.freeze && (Object.freeze(type.props), Object.freeze(type));\n    return type;\n  }\n  function jsxDEVImpl(type, config, maybeKey, isStaticChildren, source, self, debugStack, debugTask) {\n    var children = config.children;\n    if (void 0 !== children) if (isStaticChildren) {\n      if (isArrayImpl(children)) {\n        for (isStaticChildren = 0; isStaticChildren < children.length; isStaticChildren++) validateChildKeys(children[isStaticChildren]);\n        Object.freeze && Object.freeze(children);\n      } else console.error(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");\n    } else validateChildKeys(children);\n    if (hasOwnProperty.call(config, \"key\")) {\n      children = getComponentNameFromType(type);\n      var keys = Object.keys(config).filter(function (k) {\n        return \"key\" !== k;\n      });\n      isStaticChildren = 0 < keys.length ? \"{key: someKey, \" + keys.join(\": ..., \") + \": ...}\" : \"{key: someKey}\";\n      didWarnAboutKeySpread[children + isStaticChildren] || (keys = 0 < keys.length ? \"{\" + keys.join(\": ..., \") + \": ...}\" : \"{}\", console.error('A props object containing a \"key\" prop is being spread into JSX:\\n  let props = %s;\\n  <%s {...props} />\\nReact keys must be passed directly to JSX without using spread:\\n  let props = %s;\\n  <%s key={someKey} {...props} />', isStaticChildren, children, keys, children), didWarnAboutKeySpread[children + isStaticChildren] = !0);\n    }\n    children = null;\n    void 0 !== maybeKey && (checkKeyStringCoercion(maybeKey), children = \"\" + maybeKey);\n    hasValidKey(config) && (checkKeyStringCoercion(config.key), children = \"\" + config.key);\n    if (\"key\" in config) {\n      maybeKey = {};\n      for (var propName in config) \"key\" !== propName && (maybeKey[propName] = config[propName]);\n    } else maybeKey = config;\n    children && defineKeyPropWarningGetter(maybeKey, \"function\" === typeof type ? type.displayName || type.name || \"Unknown\" : type);\n    return ReactElement(type, children, self, source, getOwner(), maybeKey, debugStack, debugTask);\n  }\n  function validateChildKeys(node) {\n    \"object\" === typeof node && null !== node && node.$$typeof === REACT_ELEMENT_TYPE && node._store && (node._store.validated = 1);\n  }\n  var React = require(\"react\"),\n    REACT_ELEMENT_TYPE = Symbol.for(\"react.transitional.element\"),\n    REACT_PORTAL_TYPE = Symbol.for(\"react.portal\"),\n    REACT_FRAGMENT_TYPE = Symbol.for(\"react.fragment\"),\n    REACT_STRICT_MODE_TYPE = Symbol.for(\"react.strict_mode\"),\n    REACT_PROFILER_TYPE = Symbol.for(\"react.profiler\");\n  Symbol.for(\"react.provider\");\n  var REACT_CONSUMER_TYPE = Symbol.for(\"react.consumer\"),\n    REACT_CONTEXT_TYPE = Symbol.for(\"react.context\"),\n    REACT_FORWARD_REF_TYPE = Symbol.for(\"react.forward_ref\"),\n    REACT_SUSPENSE_TYPE = Symbol.for(\"react.suspense\"),\n    REACT_SUSPENSE_LIST_TYPE = Symbol.for(\"react.suspense_list\"),\n    REACT_MEMO_TYPE = Symbol.for(\"react.memo\"),\n    REACT_LAZY_TYPE = Symbol.for(\"react.lazy\"),\n    REACT_ACTIVITY_TYPE = Symbol.for(\"react.activity\"),\n    REACT_CLIENT_REFERENCE = Symbol.for(\"react.client.reference\"),\n    ReactSharedInternals = React.__CLIENT_INTERNALS_DO_NOT_USE_OR_WARN_USERS_THEY_CANNOT_UPGRADE,\n    hasOwnProperty = Object.prototype.hasOwnProperty,\n    isArrayImpl = Array.isArray,\n    createTask = console.createTask ? console.createTask : function () {\n      return null;\n    };\n  React = {\n    \"react-stack-bottom-frame\": function (callStackForError) {\n      return callStackForError();\n    }\n  };\n  var specialPropKeyWarningShown;\n  var didWarnAboutElementRef = {};\n  var unknownOwnerDebugStack = React[\"react-stack-bottom-frame\"].bind(React, UnknownOwner)();\n  var unknownOwnerDebugTask = createTask(getTaskName(UnknownOwner));\n  var didWarnAboutKeySpread = {};\n  exports.Fragment = REACT_FRAGMENT_TYPE;\n  exports.jsx = function (type, config, maybeKey, source, self) {\n    var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n    return jsxDEVImpl(type, config, maybeKey, !1, source, self, trackActualOwner ? Error(\"react-stack-top-frame\") : unknownOwnerDebugStack, trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask);\n  };\n  exports.jsxs = function (type, config, maybeKey, source, self) {\n    var trackActualOwner = 1e4 > ReactSharedInternals.recentlyCreatedOwnerStacks++;\n    return jsxDEVImpl(type, config, maybeKey, !0, source, self, trackActualOwner ? Error(\"react-stack-top-frame\") : unknownOwnerDebugStack, trackActualOwner ? createTask(getTaskName(type)) : unknownOwnerDebugTask);\n  };\n}();","map":null,"metadata":{},"sourceType":"script","externalDependencies":[]}