{"ast":null,"code":"var _jsxFileName = \"/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/src/contexts/WizardContext.tsx\";\nimport React, { createContext, useContext, useReducer, useCallback, useEffect } from 'react';\nimport { useForm } from './FormContext';\nimport { useFeatureFlag } from '../hooks/useFeatureFlags';\n\n// Wizard States\n\n// Wizard Button States\n\n// Wizard Context State\n\n// Wizard Actions\n\n// Wizard Context Type\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WizardContext = /*#__PURE__*/createContext(undefined);\n\n// Initial state\nconst initialState = {\n  wizardState: 'idle',\n  currentFieldIndex: -1,\n  currentField: null,\n  requiredFields: [],\n  signatureFields: [],\n  completedFields: [],\n  totalRequiredFields: 0,\n  completionPercentage: 0,\n  isFormValid: false,\n  showFieldTooltip: false,\n  tooltipField: null\n};\n\n// Wizard reducer\nfunction wizardReducer(state, action) {\n  switch (action.type) {\n    case 'INITIALIZE':\n      {\n        const {\n          requiredFields,\n          signatureFields\n        } = action.payload;\n        return {\n          ...state,\n          requiredFields,\n          signatureFields,\n          totalRequiredFields: requiredFields.length,\n          wizardState: 'start'\n        };\n      }\n    case 'SET_WIZARD_STATE':\n      {\n        return {\n          ...state,\n          wizardState: action.payload\n        };\n      }\n    case 'SET_CURRENT_FIELD':\n      {\n        const {\n          field,\n          index\n        } = action.payload;\n        return {\n          ...state,\n          currentField: field,\n          currentFieldIndex: index\n        };\n      }\n    case 'FIELD_COMPLETED':\n      {\n        const fieldName = action.payload;\n        const completedFields = [...state.completedFields];\n        if (!completedFields.includes(fieldName)) {\n          completedFields.push(fieldName);\n        }\n        return {\n          ...state,\n          completedFields,\n          completionPercentage: Math.round(completedFields.length / Math.max(state.totalRequiredFields, 1) * 100)\n        };\n      }\n    case 'UPDATE_PROGRESS':\n      {\n        const {\n          completed,\n          percentage\n        } = action.payload;\n        return {\n          ...state,\n          completedFields: completed,\n          completionPercentage: percentage\n        };\n      }\n    case 'SET_FORM_VALID':\n      {\n        return {\n          ...state,\n          isFormValid: action.payload\n        };\n      }\n    case 'SHOW_TOOLTIP':\n      {\n        return {\n          ...state,\n          showFieldTooltip: true,\n          tooltipField: action.payload\n        };\n      }\n    case 'HIDE_TOOLTIP':\n      {\n        return {\n          ...state,\n          showFieldTooltip: false,\n          tooltipField: null\n        };\n      }\n    case 'RESET_WIZARD':\n      {\n        return {\n          ...initialState\n        };\n      }\n    default:\n      return state;\n  }\n}\n\n// Wizard Provider\nexport const WizardProvider = ({\n  children\n}) => {\n  const [state, dispatch] = useReducer(wizardReducer, initialState);\n  const formContext = useForm();\n\n  // Feature flags for wizard behavior\n  const {\n    isEnabled: enhancedWizardMode\n  } = useFeatureFlag('ENHANCED_WIZARD_MODE');\n  const {\n    isEnabled: progressiveFormFilling\n  } = useFeatureFlag('PROGRESSIVE_FORM_FILLING');\n  const {\n    isEnabled: smartFieldDetection\n  } = useFeatureFlag('SMART_FIELD_DETECTION');\n\n  // Show field tooltip\n  const showFieldTooltip = useCallback(field => {\n    dispatch({\n      type: 'SHOW_TOOLTIP',\n      payload: field\n    });\n  }, []);\n\n  // Hide field tooltip\n  const hideFieldTooltip = useCallback(() => {\n    dispatch({\n      type: 'HIDE_TOOLTIP'\n    });\n  }, []);\n\n  // Initialize wizard with form fields\n  const initializeWizard = useCallback(allFields => {\n    const requiredFields = allFields.filter(field => field.required && !field.readOnly);\n    const signatureFields = allFields.filter(field => field.type === 'signature' || field.name.toLowerCase().includes('signature') || field.name.toLowerCase().includes('sign'));\n    dispatch({\n      type: 'INITIALIZE',\n      payload: {\n        requiredFields,\n        signatureFields\n      }\n    });\n  }, []);\n\n  // Start the wizard\n  const startWizard = useCallback(() => {\n    const firstIncompleteField = state.requiredFields.find(field => !state.completedFields.includes(field.name));\n    if (firstIncompleteField) {\n      dispatch({\n        type: 'SET_CURRENT_FIELD',\n        payload: {\n          field: firstIncompleteField,\n          index: 0\n        }\n      });\n      dispatch({\n        type: 'SET_WIZARD_STATE',\n        payload: 'next'\n      });\n\n      // Show tooltip for the field\n      showFieldTooltip(firstIncompleteField);\n    } else {\n      // All required fields complete, check signatures\n      if (state.signatureFields.length > 0) {\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'sign'\n        });\n      } else {\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'submit'\n        });\n      }\n    }\n  }, [state.requiredFields, state.completedFields, state.signatureFields, showFieldTooltip]);\n\n  // Navigate to next field\n  const nextField = useCallback(() => {\n    const incompleteRequired = state.requiredFields.filter(field => !state.completedFields.includes(field.name));\n    if (incompleteRequired.length > 0) {\n      const nextField = incompleteRequired[0];\n      const fieldIndex = state.requiredFields.findIndex(f => f.name === nextField.name);\n      dispatch({\n        type: 'SET_CURRENT_FIELD',\n        payload: {\n          field: nextField,\n          index: fieldIndex\n        }\n      });\n      showFieldTooltip(nextField);\n    } else {\n      // All required fields complete\n      if (state.signatureFields.length > 0) {\n        const incompleteSignatures = state.signatureFields.filter(field => !state.completedFields.includes(field.name));\n        if (incompleteSignatures.length > 0) {\n          dispatch({\n            type: 'SET_WIZARD_STATE',\n            payload: 'sign'\n          });\n          const firstSignature = incompleteSignatures[0];\n          dispatch({\n            type: 'SET_CURRENT_FIELD',\n            payload: {\n              field: firstSignature,\n              index: 0\n            }\n          });\n          showFieldTooltip(firstSignature);\n        } else {\n          dispatch({\n            type: 'SET_WIZARD_STATE',\n            payload: 'submit'\n          });\n        }\n      } else {\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'submit'\n        });\n      }\n    }\n  }, [state.requiredFields, state.signatureFields, state.completedFields, showFieldTooltip]);\n\n  // Go to signature fields\n  const goToSignatures = useCallback(() => {\n    if (state.signatureFields.length > 0) {\n      const firstIncompleteSignature = state.signatureFields.find(field => !state.completedFields.includes(field.name));\n      if (firstIncompleteSignature) {\n        dispatch({\n          type: 'SET_CURRENT_FIELD',\n          payload: {\n            field: firstIncompleteSignature,\n            index: 0\n          }\n        });\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'sign'\n        });\n        showFieldTooltip(firstIncompleteSignature);\n      } else {\n        // All signatures complete\n        dispatch({\n          type: 'SET_WIZARD_STATE',\n          payload: 'submit'\n        });\n      }\n    }\n  }, [state.signatureFields, state.completedFields, showFieldTooltip]);\n\n  // Submit form\n  const submitForm = useCallback(() => {\n    if (state.isFormValid) {\n      dispatch({\n        type: 'SET_WIZARD_STATE',\n        payload: 'complete'\n      });\n      console.log('Form submitted successfully!');\n\n      // TODO: Implement actual form submission in Phase 7\n      alert('Form submission will be implemented in Phase 7. All fields completed!');\n    } else {\n      console.warn('Form is not valid for submission');\n    }\n  }, [state.isFormValid]);\n\n  // Jump to specific field\n  const jumpToField = useCallback(field => {\n    const fieldIndex = state.requiredFields.findIndex(f => f.name === field.name);\n    dispatch({\n      type: 'SET_CURRENT_FIELD',\n      payload: {\n        field,\n        index: fieldIndex >= 0 ? fieldIndex : 0\n      }\n    });\n\n    // Update wizard state based on field type\n    if (field.type === 'signature') {\n      dispatch({\n        type: 'SET_WIZARD_STATE',\n        payload: 'sign'\n      });\n    } else if (field.required) {\n      dispatch({\n        type: 'SET_WIZARD_STATE',\n        payload: 'next'\n      });\n    }\n    showFieldTooltip(field);\n  }, [state.requiredFields, showFieldTooltip]);\n\n  // Mark field as complete\n  const markFieldComplete = useCallback(fieldName => {\n    dispatch({\n      type: 'FIELD_COMPLETED',\n      payload: fieldName\n    });\n\n    // Update form context as well\n    formContext.markFieldComplete(fieldName);\n  }, [formContext]);\n\n  // Get current button state\n  const getCurrentButtonState = useCallback(() => {\n    switch (state.wizardState) {\n      case 'idle':\n      case 'start':\n        return {\n          text: 'Start',\n          color: 'primary',\n          // Blue\n          disabled: state.totalRequiredFields === 0,\n          action: startWizard\n        };\n      case 'next':\n        {\n          const incompleteRequired = state.requiredFields.filter(field => !state.completedFields.includes(field.name));\n          if (incompleteRequired.length > 0) {\n            return {\n              text: 'Next',\n              color: 'secondary',\n              // Orange\n              disabled: false,\n              action: nextField\n            };\n          } else {\n            // All required complete, check signatures\n            if (state.signatureFields.length > 0) {\n              return {\n                text: 'Sign',\n                color: 'info',\n                // Purple\n                disabled: false,\n                action: goToSignatures\n              };\n            } else {\n              return {\n                text: 'Submit',\n                color: 'success',\n                // Green\n                disabled: !state.isFormValid,\n                action: submitForm\n              };\n            }\n          }\n        }\n      case 'sign':\n        {\n          const incompleteSignatures = state.signatureFields.filter(field => !state.completedFields.includes(field.name));\n          if (incompleteSignatures.length > 0) {\n            return {\n              text: 'Sign',\n              color: 'info',\n              // Purple\n              disabled: false,\n              action: nextField\n            };\n          } else {\n            return {\n              text: 'Submit',\n              color: 'success',\n              // Green\n              disabled: !state.isFormValid,\n              action: submitForm\n            };\n          }\n        }\n      case 'submit':\n        return {\n          text: 'Submit',\n          color: 'success',\n          // Green\n          disabled: !state.isFormValid,\n          action: submitForm\n        };\n      case 'complete':\n        return {\n          text: 'Complete',\n          color: 'success',\n          // Green\n          disabled: true,\n          action: () => {}\n        };\n      default:\n        return {\n          text: 'Start',\n          color: 'primary',\n          disabled: true,\n          action: startWizard\n        };\n    }\n  }, [state.wizardState, state.requiredFields, state.signatureFields, state.completedFields, state.isFormValid, state.totalRequiredFields, startWizard, nextField, goToSignatures, submitForm]);\n\n  // Reset wizard\n  const resetWizard = useCallback(() => {\n    dispatch({\n      type: 'RESET_WIZARD'\n    });\n  }, []);\n\n  // Update form validity when form context changes\n  useEffect(() => {\n    const formValid = formContext.isFormValid();\n    dispatch({\n      type: 'SET_FORM_VALID',\n      payload: formValid\n    });\n  }, [formContext]);\n\n  // Update completion progress when form context changes\n  useEffect(() => {\n    const percentage = formContext.getCompletionPercentage();\n    const {\n      completed\n    } = formContext.getRequiredFieldsStatus();\n    dispatch({\n      type: 'UPDATE_PROGRESS',\n      payload: {\n        completed: Array.from(formContext.state.fields.keys()).filter(fieldName => formContext.state.completedFields.includes(fieldName)),\n        percentage\n      }\n    });\n  }, [formContext]);\n  const contextValue = {\n    state,\n    startWizard,\n    nextField,\n    goToSignatures,\n    submitForm,\n    jumpToField,\n    markFieldComplete,\n    getCurrentButtonState,\n    showFieldTooltip,\n    hideFieldTooltip,\n    resetWizard,\n    initializeWizard\n  };\n  return /*#__PURE__*/_jsxDEV(WizardContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 465,\n    columnNumber: 5\n  }, this);\n};\n\n// Hook to use wizard context\nexport const useWizard = () => {\n  const context = useContext(WizardContext);\n  if (context === undefined) {\n    throw new Error('useWizard must be used within a WizardProvider');\n  }\n  return context;\n};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}