{"ast":null,"code":"import { defineIntegration, getActiveSpan, getRootSpan, debug } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { startProfileForSpan } from './startProfileForSpan.js';\nimport { isAutomatedPageLoadSpan, shouldProfileSpan, getActiveProfilesCount, findProfiledTransactionsFromEnvelope, takeProfileFromGlobalCache, createProfilingEvent, addProfilesToEnvelope } from './utils.js';\nconst INTEGRATION_NAME = 'BrowserProfiling';\nconst _browserProfilingIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const activeSpan = getActiveSpan();\n      const rootSpan = activeSpan && getRootSpan(activeSpan);\n      if (rootSpan && isAutomatedPageLoadSpan(rootSpan)) {\n        if (shouldProfileSpan(rootSpan)) {\n          startProfileForSpan(rootSpan);\n        }\n      }\n      client.on('spanStart', span => {\n        if (span === getRootSpan(span) && shouldProfileSpan(span)) {\n          startProfileForSpan(span);\n        }\n      });\n      client.on('beforeEnvelope', envelope => {\n        // if not profiles are in queue, there is nothing to add to the envelope.\n        if (!getActiveProfilesCount()) {\n          return;\n        }\n        const profiledTransactionEvents = findProfiledTransactionsFromEnvelope(envelope);\n        if (!profiledTransactionEvents.length) {\n          return;\n        }\n        const profilesToAddToEnvelope = [];\n        for (const profiledTransaction of profiledTransactionEvents) {\n          const context = profiledTransaction?.contexts;\n          const profile_id = context?.profile?.['profile_id'];\n          const start_timestamp = context?.profile?.['start_timestamp'];\n          if (typeof profile_id !== 'string') {\n            DEBUG_BUILD && debug.log('[Profiling] cannot find profile for a span without a profile context');\n            continue;\n          }\n          if (!profile_id) {\n            DEBUG_BUILD && debug.log('[Profiling] cannot find profile for a span without a profile context');\n            continue;\n          }\n\n          // Remove the profile from the span context before sending, relay will take care of the rest.\n          if (context?.profile) {\n            delete context.profile;\n          }\n          const profile = takeProfileFromGlobalCache(profile_id);\n          if (!profile) {\n            DEBUG_BUILD && debug.log(`[Profiling] Could not retrieve profile for span: ${profile_id}`);\n            continue;\n          }\n          const profileEvent = createProfilingEvent(profile_id, start_timestamp, profile, profiledTransaction);\n          if (profileEvent) {\n            profilesToAddToEnvelope.push(profileEvent);\n          }\n        }\n        addProfilesToEnvelope(envelope, profilesToAddToEnvelope);\n      });\n    }\n  };\n};\nconst browserProfilingIntegration = defineIntegration(_browserProfilingIntegration);\nexport { browserProfilingIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_browserProfilingIntegration","name","setup","client","activeSpan","getActiveSpan","rootSpan","getRootSpan","isAutomatedPageLoadSpan","shouldProfileSpan","startProfileForSpan","on","span","envelope","getActiveProfilesCount","profiledTransactionEvents","findProfiledTransactionsFromEnvelope","length","profilesToAddToEnvelope","profiledTransaction","context","contexts","profile_id","profile","start_timestamp","DEBUG_BUILD","debug","log","takeProfileFromGlobalCache","profileEvent","createProfilingEvent","push","addProfilesToEnvelope","browserProfilingIntegration","defineIntegration"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/profiling/integration.ts"],"sourcesContent":["import type { EventEnvelope, IntegrationFn, Profile, Span } from '@sentry/core';\nimport { debug, defineIntegration, getActiveSpan, getRootSpan } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { startProfileForSpan } from './startProfileForSpan';\nimport type { ProfiledEvent } from './utils';\nimport {\n  addProfilesToEnvelope,\n  createProfilingEvent,\n  findProfiledTransactionsFromEnvelope,\n  getActiveProfilesCount,\n  isAutomatedPageLoadSpan,\n  shouldProfileSpan,\n  takeProfileFromGlobalCache,\n} from './utils';\n\nconst INTEGRATION_NAME = 'BrowserProfiling';\n\nconst _browserProfilingIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      const activeSpan = getActiveSpan();\n      const rootSpan = activeSpan && getRootSpan(activeSpan);\n\n      if (rootSpan && isAutomatedPageLoadSpan(rootSpan)) {\n        if (shouldProfileSpan(rootSpan)) {\n          startProfileForSpan(rootSpan);\n        }\n      }\n\n      client.on('spanStart', (span: Span) => {\n        if (span === getRootSpan(span) && shouldProfileSpan(span)) {\n          startProfileForSpan(span);\n        }\n      });\n\n      client.on('beforeEnvelope', (envelope): void => {\n        // if not profiles are in queue, there is nothing to add to the envelope.\n        if (!getActiveProfilesCount()) {\n          return;\n        }\n\n        const profiledTransactionEvents = findProfiledTransactionsFromEnvelope(envelope);\n        if (!profiledTransactionEvents.length) {\n          return;\n        }\n\n        const profilesToAddToEnvelope: Profile[] = [];\n\n        for (const profiledTransaction of profiledTransactionEvents) {\n          const context = profiledTransaction?.contexts;\n          const profile_id = context?.profile?.['profile_id'];\n          const start_timestamp = context?.profile?.['start_timestamp'];\n\n          if (typeof profile_id !== 'string') {\n            DEBUG_BUILD && debug.log('[Profiling] cannot find profile for a span without a profile context');\n            continue;\n          }\n\n          if (!profile_id) {\n            DEBUG_BUILD && debug.log('[Profiling] cannot find profile for a span without a profile context');\n            continue;\n          }\n\n          // Remove the profile from the span context before sending, relay will take care of the rest.\n          if (context?.profile) {\n            delete context.profile;\n          }\n\n          const profile = takeProfileFromGlobalCache(profile_id);\n          if (!profile) {\n            DEBUG_BUILD && debug.log(`[Profiling] Could not retrieve profile for span: ${profile_id}`);\n            continue;\n          }\n\n          const profileEvent = createProfilingEvent(\n            profile_id,\n            start_timestamp as number | undefined,\n            profile,\n            profiledTransaction as ProfiledEvent,\n          );\n          if (profileEvent) {\n            profilesToAddToEnvelope.push(profileEvent);\n          }\n        }\n\n        addProfilesToEnvelope(envelope as EventEnvelope, profilesToAddToEnvelope);\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const browserProfilingIntegration = defineIntegration(_browserProfilingIntegration);\n"],"mappings":";;;;AAeA,MAAMA,gBAAA,GAAmB,kBAAkB;AAE3C,MAAMC,4BAAA,GAAgCA,CAAA,KAAM;EAC1C,OAAO;IACLC,IAAI,EAAEF,gBAAgB;IACtBG,KAAKA,CAACC,MAAM,EAAE;MACZ,MAAMC,UAAA,GAAaC,aAAa,EAAE;MAClC,MAAMC,QAAA,GAAWF,UAAA,IAAcG,WAAW,CAACH,UAAU,CAAC;MAEtD,IAAIE,QAAA,IAAYE,uBAAuB,CAACF,QAAQ,CAAC,EAAE;QACjD,IAAIG,iBAAiB,CAACH,QAAQ,CAAC,EAAE;UAC/BI,mBAAmB,CAACJ,QAAQ,CAAC;QACvC;MACA;MAEMH,MAAM,CAACQ,EAAE,CAAC,WAAW,EAAGC,IAAI,IAAW;QACrC,IAAIA,IAAA,KAASL,WAAW,CAACK,IAAI,KAAKH,iBAAiB,CAACG,IAAI,CAAC,EAAE;UACzDF,mBAAmB,CAACE,IAAI,CAAC;QACnC;MACA,CAAO,CAAC;MAEFT,MAAM,CAACQ,EAAE,CAAC,gBAAgB,EAAGE,QAAQ,IAAW;QACtD;QACQ,IAAI,CAACC,sBAAsB,EAAE,EAAE;UAC7B;QACV;QAEQ,MAAMC,yBAAA,GAA4BC,oCAAoC,CAACH,QAAQ,CAAC;QAChF,IAAI,CAACE,yBAAyB,CAACE,MAAM,EAAE;UACrC;QACV;QAEQ,MAAMC,uBAAuB,GAAc,EAAE;QAE7C,KAAK,MAAMC,mBAAA,IAAuBJ,yBAAyB,EAAE;UAC3D,MAAMK,OAAA,GAAUD,mBAAmB,EAAEE,QAAQ;UAC7C,MAAMC,UAAA,GAAaF,OAAO,EAAEG,OAAO,GAAG,YAAY,CAAC;UACnD,MAAMC,eAAA,GAAkBJ,OAAO,EAAEG,OAAO,GAAG,iBAAiB,CAAC;UAE7D,IAAI,OAAOD,UAAA,KAAe,QAAQ,EAAE;YAClCG,WAAA,IAAeC,KAAK,CAACC,GAAG,CAAC,sEAAsE,CAAC;YAChG;UACZ;UAEU,IAAI,CAACL,UAAU,EAAE;YACfG,WAAA,IAAeC,KAAK,CAACC,GAAG,CAAC,sEAAsE,CAAC;YAChG;UACZ;;UAEA;UACU,IAAIP,OAAO,EAAEG,OAAO,EAAE;YACpB,OAAOH,OAAO,CAACG,OAAO;UAClC;UAEU,MAAMA,OAAA,GAAUK,0BAA0B,CAACN,UAAU,CAAC;UACtD,IAAI,CAACC,OAAO,EAAE;YACZE,WAAA,IAAeC,KAAK,CAACC,GAAG,CAAC,oDAAoDL,UAAU,EAAC;YACA;UACA;UAEA,MAAAO,YAAA,GAAAC,oBAAA,CACAR,UAAA,EACAE,eAAA,EACAD,OAAA,EACAJ,mBACA;UACA,IAAAU,YAAA;YACAX,uBAAA,CAAAa,IAAA,CAAAF,YAAA;UACA;QACA;QAEAG,qBAAA,CAAAnB,QAAA,EAAAK,uBAAA;MACA;IACA;EACA;AACA;AAEA,MAAAe,2BAAA,GAAAC,iBAAA,CAAAlC,4BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}