{"ast":null,"code":"import { browserPerformanceTimeOrigin, getActiveSpan, getRootSpan, spanToJSON, getCurrentScope, timestampInSeconds, startSpan, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\nimport { addPerformanceInstrumentationHandler } from './instrument.js';\nimport { getBrowserPerformanceAPI, msToSec } from './utils.js';\n\n// ElementTiming interface based on the W3C spec\n\n/**\n * Start tracking ElementTiming performance entries.\n */\nfunction startTrackingElementTiming() {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin()) {\n    return addPerformanceInstrumentationHandler('element', _onElementTiming);\n  }\n  return () => undefined;\n}\n\n/**\n * exported only for testing\n */\nconst _onElementTiming = ({\n  entries\n}) => {\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n  const transactionName = rootSpan ? spanToJSON(rootSpan).description : getCurrentScope().getScopeData().transactionName;\n  entries.forEach(entry => {\n    const elementEntry = entry;\n\n    // Skip entries without identifier (elementtiming attribute)\n    if (!elementEntry.identifier) {\n      return;\n    }\n\n    // `name` contains the type of the element paint. Can be `'image-paint'` or `'text-paint'`.\n    // https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming#instance_properties\n    const paintType = elementEntry.name;\n    const renderTime = elementEntry.renderTime;\n    const loadTime = elementEntry.loadTime;\n\n    // starting the span at:\n    // - `loadTime` if available (should be available for all \"image-paint\" entries, 0 otherwise)\n    // - `renderTime` if available (available for all entries, except 3rd party images, but these should be covered by `loadTime`, 0 otherwise)\n    // - `timestampInSeconds()` as a safeguard\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming/renderTime#cross-origin_image_render_time\n    const [spanStartTime, spanStartTimeSource] = loadTime ? [msToSec(loadTime), 'load-time'] : renderTime ? [msToSec(renderTime), 'render-time'] : [timestampInSeconds(), 'entry-emission'];\n    const duration = paintType === 'image-paint' ?\n    // for image paints, we can acually get a duration because image-paint entries also have a `loadTime`\n    // and `renderTime`. `loadTime` is the time when the image finished loading and `renderTime` is the\n    // time when the image finished rendering.\n    msToSec(Math.max(0, (renderTime ?? 0) - (loadTime ?? 0))) :\n    // for `'text-paint'` entries, we can't get a duration because the `loadTime` is always zero.\n    0;\n    const attributes = {\n      [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.ui.browser.elementtiming',\n      [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.elementtiming',\n      // name must be user-entered, so we can assume low cardinality\n      [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'component',\n      // recording the source of the span start time, as it varies depending on available data\n      'sentry.span_start_time_source': spanStartTimeSource,\n      'sentry.transaction_name': transactionName,\n      'element.id': elementEntry.id,\n      'element.type': elementEntry.element?.tagName?.toLowerCase() || 'unknown',\n      'element.size': elementEntry.naturalWidth && elementEntry.naturalHeight ? `${elementEntry.naturalWidth}x${elementEntry.naturalHeight}` : undefined,\n      'element.render_time': renderTime,\n      'element.load_time': loadTime,\n      // `url` is `0`(number) for text paints (hence we fall back to undefined)\n      'element.url': elementEntry.url || undefined,\n      'element.identifier': elementEntry.identifier,\n      'element.paint_type': paintType\n    };\n    startSpan({\n      name: `element[${elementEntry.identifier}]`,\n      attributes,\n      startTime: spanStartTime,\n      onlyIfParent: true\n    }, span => {\n      span.end(spanStartTime + duration);\n    });\n  });\n};\nexport { _onElementTiming, startTrackingElementTiming };\n//# sourceMappingURL=elementTiming.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}