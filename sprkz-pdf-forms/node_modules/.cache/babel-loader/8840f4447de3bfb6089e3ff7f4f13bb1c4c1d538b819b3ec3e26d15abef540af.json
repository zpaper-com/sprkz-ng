{"ast":null,"code":"import { getClient } from './currentScopes.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { debug } from './utils/debug-logger.js';\nfunction isProfilingIntegrationWithProfiler(integration) {\n  return !!integration && typeof integration['_profiler'] !== 'undefined' && typeof integration['_profiler']['start'] === 'function' && typeof integration['_profiler']['stop'] === 'function';\n}\n/**\n * Starts the Sentry continuous profiler.\n * This mode is exclusive with the transaction profiler and will only work if the profilesSampleRate is set to a falsy value.\n * In continuous profiling mode, the profiler will keep reporting profile chunks to Sentry until it is stopped, which allows for continuous profiling of the application.\n */\nfunction startProfiler() {\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && debug.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n  if (!integration) {\n    DEBUG_BUILD && debug.warn('ProfilingIntegration is not available');\n    return;\n  }\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    DEBUG_BUILD && debug.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n  integration._profiler.start();\n}\n\n/**\n * Stops the Sentry continuous profiler.\n * Calls to stop will stop the profiler and flush the currently collected profile data to Sentry.\n */\nfunction stopProfiler() {\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && debug.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n  const integration = client.getIntegrationByName('ProfilingIntegration');\n  if (!integration) {\n    DEBUG_BUILD && debug.warn('ProfilingIntegration is not available');\n    return;\n  }\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    DEBUG_BUILD && debug.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n  integration._profiler.stop();\n}\nconst profiler = {\n  startProfiler,\n  stopProfiler\n};\nexport { profiler };","map":{"version":3,"names":["isProfilingIntegrationWithProfiler","integration","startProfiler","client","getClient","DEBUG_BUILD","debug","warn","getIntegrationByName","_profiler","start","stopProfiler","stop","profiler"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/profiling.ts"],"sourcesContent":["import { getClient } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport type { Profiler, ProfilingIntegration } from './types-hoist/profiling';\nimport { debug } from './utils/debug-logger';\n\nfunction isProfilingIntegrationWithProfiler(\n  integration: ProfilingIntegration<any> | undefined,\n): integration is ProfilingIntegration<any> {\n  return (\n    !!integration &&\n    typeof integration['_profiler'] !== 'undefined' &&\n    typeof integration['_profiler']['start'] === 'function' &&\n    typeof integration['_profiler']['stop'] === 'function'\n  );\n}\n/**\n * Starts the Sentry continuous profiler.\n * This mode is exclusive with the transaction profiler and will only work if the profilesSampleRate is set to a falsy value.\n * In continuous profiling mode, the profiler will keep reporting profile chunks to Sentry until it is stopped, which allows for continuous profiling of the application.\n */\nfunction startProfiler(): void {\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && debug.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n\n  const integration = client.getIntegrationByName<ProfilingIntegration<any>>('ProfilingIntegration');\n\n  if (!integration) {\n    DEBUG_BUILD && debug.warn('ProfilingIntegration is not available');\n    return;\n  }\n\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    DEBUG_BUILD && debug.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n\n  integration._profiler.start();\n}\n\n/**\n * Stops the Sentry continuous profiler.\n * Calls to stop will stop the profiler and flush the currently collected profile data to Sentry.\n */\nfunction stopProfiler(): void {\n  const client = getClient();\n  if (!client) {\n    DEBUG_BUILD && debug.warn('No Sentry client available, profiling is not started');\n    return;\n  }\n\n  const integration = client.getIntegrationByName<ProfilingIntegration<any>>('ProfilingIntegration');\n  if (!integration) {\n    DEBUG_BUILD && debug.warn('ProfilingIntegration is not available');\n    return;\n  }\n\n  if (!isProfilingIntegrationWithProfiler(integration)) {\n    DEBUG_BUILD && debug.warn('Profiler is not available on profiling integration.');\n    return;\n  }\n\n  integration._profiler.stop();\n}\n\nexport const profiler: Profiler = {\n  startProfiler,\n  stopProfiler,\n};\n"],"mappings":";;;AAKA,SAASA,kCAAkCA,CACzCC,WAAW,EAC+B;EAC1C,OACE,CAAC,CAACA,WAAA,IACF,OAAOA,WAAW,CAAC,WAAW,MAAM,eACpC,OAAOA,WAAW,CAAC,WAAW,CAAC,CAAC,OAAO,MAAM,cAC7C,OAAOA,WAAW,CAAC,WAAW,CAAC,CAAC,MAAM,MAAM;AAEhD;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,aAAaA,CAAA,EAAS;EAC7B,MAAMC,MAAA,GAASC,SAAS,EAAE;EAC1B,IAAI,CAACD,MAAM,EAAE;IACXE,WAAA,IAAeC,KAAK,CAACC,IAAI,CAAC,sDAAsD,CAAC;IACjF;EACJ;EAEE,MAAMN,WAAA,GAAcE,MAAM,CAACK,oBAAoB,CAA4B,sBAAsB,CAAC;EAElG,IAAI,CAACP,WAAW,EAAE;IAChBI,WAAA,IAAeC,KAAK,CAACC,IAAI,CAAC,uCAAuC,CAAC;IAClE;EACJ;EAEE,IAAI,CAACP,kCAAkC,CAACC,WAAW,CAAC,EAAE;IACpDI,WAAA,IAAeC,KAAK,CAACC,IAAI,CAAC,qDAAqD,CAAC;IAChF;EACJ;EAEEN,WAAW,CAACQ,SAAS,CAACC,KAAK,EAAE;AAC/B;;AAEA;AACA;AACA;AACA;AACA,SAASC,YAAYA,CAAA,EAAS;EAC5B,MAAMR,MAAA,GAASC,SAAS,EAAE;EAC1B,IAAI,CAACD,MAAM,EAAE;IACXE,WAAA,IAAeC,KAAK,CAACC,IAAI,CAAC,sDAAsD,CAAC;IACjF;EACJ;EAEE,MAAMN,WAAA,GAAcE,MAAM,CAACK,oBAAoB,CAA4B,sBAAsB,CAAC;EAClG,IAAI,CAACP,WAAW,EAAE;IAChBI,WAAA,IAAeC,KAAK,CAACC,IAAI,CAAC,uCAAuC,CAAC;IAClE;EACJ;EAEE,IAAI,CAACP,kCAAkC,CAACC,WAAW,CAAC,EAAE;IACpDI,WAAA,IAAeC,KAAK,CAACC,IAAI,CAAC,qDAAqD,CAAC;IAChF;EACJ;EAEEN,WAAW,CAACQ,SAAS,CAACG,IAAI,EAAE;AAC9B;AAEO,MAAMC,QAAQ,GAAa;EAChCX,aAAa;EACbS;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}