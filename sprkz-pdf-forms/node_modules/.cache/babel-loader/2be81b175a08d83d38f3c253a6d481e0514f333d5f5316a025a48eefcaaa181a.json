{"ast":null,"code":"import { GLOBAL_OBJ } from './worldwide.js';\nlet parsedStackResults;\nlet lastKeysCount;\nlet cachedFilenameDebugIds;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nfunction getFilenameToDebugIdMap(stackParser) {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n    const result = parsedStackResults[stackKey];\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame?.filename;\n        const debugId = debugIdMap[stackKey];\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n    return acc;\n  }, {});\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nfunction getDebugImagesForResources(stackParser, resource_paths) {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n  const images = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path]\n      });\n    }\n  }\n  return images;\n}\nexport { getDebugImagesForResources, getFilenameToDebugIdMap };","map":{"version":3,"names":["parsedStackResults","lastKeysCount","cachedFilenameDebugIds","getFilenameToDebugIdMap","stackParser","debugIdMap","GLOBAL_OBJ","_sentryDebugIds","debugIdKeys","Object","keys","length","reduce","acc","stackKey","result","parsedStack","i","stackFrame","filename","debugId","getDebugImagesForResources","resource_paths","filenameDebugIdMap","images","path","push","type","code_file","debug_id"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/debug-ids.ts"],"sourcesContent":["import type { DebugImage } from '../types-hoist/debugMeta';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { GLOBAL_OBJ } from './worldwide';\n\ntype StackString = string;\ntype CachedResult = [string, string];\n\nlet parsedStackResults: Record<StackString, CachedResult> | undefined;\nlet lastKeysCount: number | undefined;\nlet cachedFilenameDebugIds: Record<string, string> | undefined;\n\n/**\n * Returns a map of filenames to debug identifiers.\n */\nexport function getFilenameToDebugIdMap(stackParser: StackParser): Record<string, string> {\n  const debugIdMap = GLOBAL_OBJ._sentryDebugIds;\n  if (!debugIdMap) {\n    return {};\n  }\n\n  const debugIdKeys = Object.keys(debugIdMap);\n\n  // If the count of registered globals hasn't changed since the last call, we\n  // can just return the cached result.\n  if (cachedFilenameDebugIds && debugIdKeys.length === lastKeysCount) {\n    return cachedFilenameDebugIds;\n  }\n\n  lastKeysCount = debugIdKeys.length;\n\n  // Build a map of filename -> debug_id.\n  cachedFilenameDebugIds = debugIdKeys.reduce<Record<string, string>>((acc, stackKey) => {\n    if (!parsedStackResults) {\n      parsedStackResults = {};\n    }\n\n    const result = parsedStackResults[stackKey];\n\n    if (result) {\n      acc[result[0]] = result[1];\n    } else {\n      const parsedStack = stackParser(stackKey);\n\n      for (let i = parsedStack.length - 1; i >= 0; i--) {\n        const stackFrame = parsedStack[i];\n        const filename = stackFrame?.filename;\n        const debugId = debugIdMap[stackKey];\n\n        if (filename && debugId) {\n          acc[filename] = debugId;\n          parsedStackResults[stackKey] = [filename, debugId];\n          break;\n        }\n      }\n    }\n\n    return acc;\n  }, {});\n\n  return cachedFilenameDebugIds;\n}\n\n/**\n * Returns a list of debug images for the given resources.\n */\nexport function getDebugImagesForResources(\n  stackParser: StackParser,\n  resource_paths: ReadonlyArray<string>,\n): DebugImage[] {\n  const filenameDebugIdMap = getFilenameToDebugIdMap(stackParser);\n\n  if (!filenameDebugIdMap) {\n    return [];\n  }\n\n  const images: DebugImage[] = [];\n  for (const path of resource_paths) {\n    if (path && filenameDebugIdMap[path]) {\n      images.push({\n        type: 'sourcemap',\n        code_file: path,\n        debug_id: filenameDebugIdMap[path] as string,\n      });\n    }\n  }\n\n  return images;\n}\n"],"mappings":";AAOA,IAAIA,kBAAkB;AACtB,IAAIC,aAAa;AACjB,IAAIC,sBAAsB;;AAE1B;AACA;AACA;AACO,SAASC,uBAAuBA,CAACC,WAAW,EAAuC;EACxF,MAAMC,UAAA,GAAaC,UAAU,CAACC,eAAe;EAC7C,IAAI,CAACF,UAAU,EAAE;IACf,OAAO,EAAE;EACb;EAEE,MAAMG,WAAA,GAAcC,MAAM,CAACC,IAAI,CAACL,UAAU,CAAC;;EAE7C;EACA;EACE,IAAIH,sBAAA,IAA0BM,WAAW,CAACG,MAAA,KAAWV,aAAa,EAAE;IAClE,OAAOC,sBAAsB;EACjC;EAEED,aAAA,GAAgBO,WAAW,CAACG,MAAM;;EAEpC;EACET,sBAAA,GAAyBM,WAAW,CAACI,MAAM,CAAyB,CAACC,GAAG,EAAEC,QAAQ,KAAK;IACrF,IAAI,CAACd,kBAAkB,EAAE;MACvBA,kBAAA,GAAqB,EAAE;IAC7B;IAEI,MAAMe,MAAA,GAASf,kBAAkB,CAACc,QAAQ,CAAC;IAE3C,IAAIC,MAAM,EAAE;MACVF,GAAG,CAACE,MAAM,CAAC,CAAC,CAAC,IAAIA,MAAM,CAAC,CAAC,CAAC;IAChC,OAAW;MACL,MAAMC,WAAA,GAAcZ,WAAW,CAACU,QAAQ,CAAC;MAEzC,KAAK,IAAIG,CAAA,GAAID,WAAW,CAACL,MAAA,GAAS,CAAC,EAAEM,CAAA,IAAK,CAAC,EAAEA,CAAC,EAAE,EAAE;QAChD,MAAMC,UAAA,GAAaF,WAAW,CAACC,CAAC,CAAC;QACjC,MAAME,QAAA,GAAWD,UAAU,EAAEC,QAAQ;QACrC,MAAMC,OAAA,GAAUf,UAAU,CAACS,QAAQ,CAAC;QAEpC,IAAIK,QAAA,IAAYC,OAAO,EAAE;UACvBP,GAAG,CAACM,QAAQ,IAAIC,OAAO;UACvBpB,kBAAkB,CAACc,QAAQ,IAAI,CAACK,QAAQ,EAAEC,OAAO,CAAC;UAClD;QACV;MACA;IACA;IAEI,OAAOP,GAAG;EACd,CAAG,EAAE,EAAE,CAAC;EAEN,OAAOX,sBAAsB;AAC/B;;AAEA;AACA;AACA;AACO,SAASmB,0BAA0BA,CACxCjB,WAAW,EACXkB,cAAc,EACA;EACd,MAAMC,kBAAA,GAAqBpB,uBAAuB,CAACC,WAAW,CAAC;EAE/D,IAAI,CAACmB,kBAAkB,EAAE;IACvB,OAAO,EAAE;EACb;EAEE,MAAMC,MAAM,GAAiB,EAAE;EAC/B,KAAK,MAAMC,IAAA,IAAQH,cAAc,EAAE;IACjC,IAAIG,IAAA,IAAQF,kBAAkB,CAACE,IAAI,CAAC,EAAE;MACpCD,MAAM,CAACE,IAAI,CAAC;QACVC,IAAI,EAAE,WAAW;QACjBC,SAAS,EAAEH,IAAI;QACfI,QAAQ,EAAEN,kBAAkB,CAACE,IAAI;MACzC,CAAO,CAAC;IACR;EACA;EAEE,OAAOD,MAAM;AACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}