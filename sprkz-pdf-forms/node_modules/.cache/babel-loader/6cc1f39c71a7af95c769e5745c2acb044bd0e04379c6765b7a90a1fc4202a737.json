{"ast":null,"code":"import { createCheckInEnvelope } from './checkin.js';\nimport { Client, _getTraceInfoFromScope } from './client.js';\nimport { getIsolationScope } from './currentScopes.js';\nimport { DEBUG_BUILD } from './debug-build.js';\nimport { _INTERNAL_flushLogsBuffer } from './logs/exports.js';\nimport { registerSpanErrorInstrumentation } from './tracing/errors.js';\nimport { isPrimitive } from './utils/is.js';\nimport { debug } from './utils/debug-logger.js';\nimport { uuid4 } from './utils/misc.js';\nimport { eventFromUnknownInput, eventFromMessage } from './utils/eventbuilder.js';\nimport { resolvedSyncPromise } from './utils/syncpromise.js';\n\n// TODO: Make this configurable\nconst DEFAULT_LOG_FLUSH_INTERVAL = 5000;\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nclass ServerRuntimeClient extends Client {\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  constructor(options) {\n    // Server clients always support tracing\n    registerSpanErrorInstrumentation();\n    super(options);\n    this._logWeight = 0;\n    if (this._options._experiments?.enableLogs) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const client = this;\n      client.on('flushLogs', () => {\n        client._logWeight = 0;\n        clearTimeout(client._logFlushIdleTimeout);\n      });\n      client.on('afterCaptureLog', log => {\n        client._logWeight += estimateLogSizeInBytes(log);\n\n        // We flush the logs buffer if it exceeds 0.8 MB\n        // The log weight is a rough estimate, so we flush way before\n        // the payload gets too big.\n        if (client._logWeight >= 800000) {\n          _INTERNAL_flushLogsBuffer(client);\n        } else {\n          // start an idle timeout to flush the logs buffer if no logs are captured for a while\n          client._logFlushIdleTimeout = setTimeout(() => {\n            _INTERNAL_flushLogsBuffer(client);\n          }, DEFAULT_LOG_FLUSH_INTERVAL);\n        }\n      });\n      client.on('flush', () => {\n        _INTERNAL_flushLogsBuffer(client);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromException(exception, hint) {\n    const event = eventFromUnknownInput(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n    return resolvedSyncPromise(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  eventFromMessage(message, level = 'info', hint) {\n    return resolvedSyncPromise(eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace));\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureException(exception, hint, scope) {\n    setCurrentRequestSessionErroredOrCrashed(hint);\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  captureEvent(event, hint, scope) {\n    // If the event is of type Exception, then a request session should be captured\n    const isException = !event.type && event.exception?.values && event.exception.values.length > 0;\n    if (isException) {\n      setCurrentRequestSessionErroredOrCrashed(hint);\n    }\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  captureCheckIn(checkIn, monitorConfig, scope) {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : uuid4();\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && debug.warn('SDK not enabled, will not capture check-in.');\n      return id;\n    }\n    const options = this.getOptions();\n    const {\n      release,\n      environment,\n      tunnel\n    } = options;\n    const serializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment\n    };\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold\n      };\n    }\n    const [dynamicSamplingContext, traceContext] = _getTraceInfoFromScope(this, scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext\n      };\n    }\n    const envelope = createCheckInEnvelope(serializedCheckIn, dynamicSamplingContext, this.getSdkMetadata(), tunnel, this.getDsn());\n    DEBUG_BUILD && debug.log('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n    return id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  _prepareEvent(event, hint, currentScope, isolationScope) {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: event.contexts?.runtime || this._options.runtime\n      };\n    }\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n    return super._prepareEvent(event, hint, currentScope, isolationScope);\n  }\n}\nfunction setCurrentRequestSessionErroredOrCrashed(eventHint) {\n  const requestSession = getIsolationScope().getScopeData().sdkProcessingMetadata.requestSession;\n  if (requestSession) {\n    // We mutate instead of doing `setSdkProcessingMetadata` because the http integration stores away a particular\n    // isolationScope. If that isolation scope is forked, setting the processing metadata here will not mutate the\n    // original isolation scope that the http integration stored away.\n    const isHandledException = eventHint?.mechanism?.handled ?? true;\n    // A request session can go from \"errored\" -> \"crashed\" but not \"crashed\" -> \"errored\".\n    // Crashed (unhandled exception) is worse than errored (handled exception).\n    if (isHandledException && requestSession.status !== 'crashed') {\n      requestSession.status = 'errored';\n    } else if (!isHandledException) {\n      requestSession.status = 'crashed';\n    }\n  }\n}\n\n/**\n * Estimate the size of a log in bytes.\n *\n * @param log - The log to estimate the size of.\n * @returns The estimated size of the log in bytes.\n */\nfunction estimateLogSizeInBytes(log) {\n  let weight = 0;\n\n  // Estimate byte size of 2 bytes per character. This is a rough estimate JS strings are stored as UTF-16.\n  if (log.message) {\n    weight += log.message.length * 2;\n  }\n  if (log.attributes) {\n    Object.values(log.attributes).forEach(value => {\n      if (Array.isArray(value)) {\n        weight += value.length * estimatePrimitiveSizeInBytes(value[0]);\n      } else if (isPrimitive(value)) {\n        weight += estimatePrimitiveSizeInBytes(value);\n      } else {\n        // For objects values, we estimate the size of the object as 100 bytes\n        weight += 100;\n      }\n    });\n  }\n  return weight;\n}\nfunction estimatePrimitiveSizeInBytes(value) {\n  if (typeof value === 'string') {\n    return value.length * 2;\n  } else if (typeof value === 'number') {\n    return 8;\n  } else if (typeof value === 'boolean') {\n    return 4;\n  }\n  return 0;\n}\nexport { ServerRuntimeClient };","map":{"version":3,"names":["DEFAULT_LOG_FLUSH_INTERVAL","ServerRuntimeClient","Client","constructor","options","registerSpanErrorInstrumentation","_logWeight","_options","_experiments","enableLogs","client","on","clearTimeout","_logFlushIdleTimeout","log","estimateLogSizeInBytes","_INTERNAL_flushLogsBuffer","setTimeout","eventFromException","exception","hint","event","eventFromUnknownInput","stackParser","level","resolvedSyncPromise","eventFromMessage","message","attachStacktrace","captureException","scope","setCurrentRequestSessionErroredOrCrashed","captureEvent","isException","type","values","length","captureCheckIn","checkIn","monitorConfig","id","checkInId","uuid4","_isEnabled","DEBUG_BUILD","debug","warn","getOptions","release","environment","tunnel","serializedCheckIn","check_in_id","monitor_slug","monitorSlug","status","duration","monitor_config","schedule","checkin_margin","checkinMargin","max_runtime","maxRuntime","timezone","failure_issue_threshold","failureIssueThreshold","recovery_threshold","recoveryThreshold","dynamicSamplingContext","traceContext","_getTraceInfoFromScope","contexts","trace","envelope","createCheckInEnvelope","getSdkMetadata","getDsn","sendEnvelope","_prepareEvent","currentScope","isolationScope","platform","runtime","serverName","server_name","eventHint","requestSession","getIsolationScope","getScopeData","sdkProcessingMetadata","isHandledException","mechanism","handled","weight","attributes","Object","forEach","value","Array","isArray","estimatePrimitiveSizeInBytes","isPrimitive"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/server-runtime-client.ts"],"sourcesContent":["import { createCheckInEnvelope } from './checkin';\nimport { _getTraceInfoFromScope, Client } from './client';\nimport { getIsolationScope } from './currentScopes';\nimport { DEBUG_BUILD } from './debug-build';\nimport { _INTERNAL_flushLogsBuffer } from './logs/exports';\nimport type { Scope } from './scope';\nimport { registerSpanErrorInstrumentation } from './tracing';\nimport type { CheckIn, MonitorConfig, SerializedCheckIn } from './types-hoist/checkin';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { Log } from './types-hoist/log';\nimport type { Primitive } from './types-hoist/misc';\nimport type { ClientOptions } from './types-hoist/options';\nimport type { ParameterizedString } from './types-hoist/parameterize';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { BaseTransportOptions } from './types-hoist/transport';\nimport { debug } from './utils/debug-logger';\nimport { eventFromMessage, eventFromUnknownInput } from './utils/eventbuilder';\nimport { isPrimitive } from './utils/is';\nimport { uuid4 } from './utils/misc';\nimport { resolvedSyncPromise } from './utils/syncpromise';\n\n// TODO: Make this configurable\nconst DEFAULT_LOG_FLUSH_INTERVAL = 5000;\n\nexport interface ServerRuntimeClientOptions extends ClientOptions<BaseTransportOptions> {\n  platform?: string;\n  runtime?: { name: string; version?: string };\n  serverName?: string;\n}\n\n/**\n * The Sentry Server Runtime Client SDK.\n */\nexport class ServerRuntimeClient<\n  O extends ClientOptions & ServerRuntimeClientOptions = ServerRuntimeClientOptions,\n> extends Client<O> {\n  private _logFlushIdleTimeout: ReturnType<typeof setTimeout> | undefined;\n  private _logWeight: number;\n\n  /**\n   * Creates a new Edge SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: O) {\n    // Server clients always support tracing\n    registerSpanErrorInstrumentation();\n\n    super(options);\n\n    this._logWeight = 0;\n\n    if (this._options._experiments?.enableLogs) {\n      // eslint-disable-next-line @typescript-eslint/no-this-alias\n      const client = this;\n\n      client.on('flushLogs', () => {\n        client._logWeight = 0;\n        clearTimeout(client._logFlushIdleTimeout);\n      });\n\n      client.on('afterCaptureLog', log => {\n        client._logWeight += estimateLogSizeInBytes(log);\n\n        // We flush the logs buffer if it exceeds 0.8 MB\n        // The log weight is a rough estimate, so we flush way before\n        // the payload gets too big.\n        if (client._logWeight >= 800_000) {\n          _INTERNAL_flushLogsBuffer(client);\n        } else {\n          // start an idle timeout to flush the logs buffer if no logs are captured for a while\n          client._logFlushIdleTimeout = setTimeout(() => {\n            _INTERNAL_flushLogsBuffer(client);\n          }, DEFAULT_LOG_FLUSH_INTERVAL);\n        }\n      });\n\n      client.on('flush', () => {\n        _INTERNAL_flushLogsBuffer(client);\n      });\n    }\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromException(exception: unknown, hint?: EventHint): PromiseLike<Event> {\n    const event = eventFromUnknownInput(this, this._options.stackParser, exception, hint);\n    event.level = 'error';\n\n    return resolvedSyncPromise(event);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public eventFromMessage(\n    message: ParameterizedString,\n    level: SeverityLevel = 'info',\n    hint?: EventHint,\n  ): PromiseLike<Event> {\n    return resolvedSyncPromise(\n      eventFromMessage(this._options.stackParser, message, level, hint, this._options.attachStacktrace),\n    );\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureException(exception: unknown, hint?: EventHint, scope?: Scope): string {\n    setCurrentRequestSessionErroredOrCrashed(hint);\n    return super.captureException(exception, hint, scope);\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public captureEvent(event: Event, hint?: EventHint, scope?: Scope): string {\n    // If the event is of type Exception, then a request session should be captured\n    const isException = !event.type && event.exception?.values && event.exception.values.length > 0;\n    if (isException) {\n      setCurrentRequestSessionErroredOrCrashed(hint);\n    }\n\n    return super.captureEvent(event, hint, scope);\n  }\n\n  /**\n   * Create a cron monitor check in and send it to Sentry.\n   *\n   * @param checkIn An object that describes a check in.\n   * @param upsertMonitorConfig An optional object that describes a monitor config. Use this if you want\n   * to create a monitor automatically when sending a check in.\n   */\n  public captureCheckIn(checkIn: CheckIn, monitorConfig?: MonitorConfig, scope?: Scope): string {\n    const id = 'checkInId' in checkIn && checkIn.checkInId ? checkIn.checkInId : uuid4();\n    if (!this._isEnabled()) {\n      DEBUG_BUILD && debug.warn('SDK not enabled, will not capture check-in.');\n      return id;\n    }\n\n    const options = this.getOptions();\n    const { release, environment, tunnel } = options;\n\n    const serializedCheckIn: SerializedCheckIn = {\n      check_in_id: id,\n      monitor_slug: checkIn.monitorSlug,\n      status: checkIn.status,\n      release,\n      environment,\n    };\n\n    if ('duration' in checkIn) {\n      serializedCheckIn.duration = checkIn.duration;\n    }\n\n    if (monitorConfig) {\n      serializedCheckIn.monitor_config = {\n        schedule: monitorConfig.schedule,\n        checkin_margin: monitorConfig.checkinMargin,\n        max_runtime: monitorConfig.maxRuntime,\n        timezone: monitorConfig.timezone,\n        failure_issue_threshold: monitorConfig.failureIssueThreshold,\n        recovery_threshold: monitorConfig.recoveryThreshold,\n      };\n    }\n\n    const [dynamicSamplingContext, traceContext] = _getTraceInfoFromScope(this, scope);\n    if (traceContext) {\n      serializedCheckIn.contexts = {\n        trace: traceContext,\n      };\n    }\n\n    const envelope = createCheckInEnvelope(\n      serializedCheckIn,\n      dynamicSamplingContext,\n      this.getSdkMetadata(),\n      tunnel,\n      this.getDsn(),\n    );\n\n    DEBUG_BUILD && debug.log('Sending checkin:', checkIn.monitorSlug, checkIn.status);\n\n    // sendEnvelope should not throw\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendEnvelope(envelope);\n\n    return id;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected _prepareEvent(\n    event: Event,\n    hint: EventHint,\n    currentScope: Scope,\n    isolationScope: Scope,\n  ): PromiseLike<Event | null> {\n    if (this._options.platform) {\n      event.platform = event.platform || this._options.platform;\n    }\n\n    if (this._options.runtime) {\n      event.contexts = {\n        ...event.contexts,\n        runtime: event.contexts?.runtime || this._options.runtime,\n      };\n    }\n\n    if (this._options.serverName) {\n      event.server_name = event.server_name || this._options.serverName;\n    }\n\n    return super._prepareEvent(event, hint, currentScope, isolationScope);\n  }\n}\n\nfunction setCurrentRequestSessionErroredOrCrashed(eventHint?: EventHint): void {\n  const requestSession = getIsolationScope().getScopeData().sdkProcessingMetadata.requestSession;\n  if (requestSession) {\n    // We mutate instead of doing `setSdkProcessingMetadata` because the http integration stores away a particular\n    // isolationScope. If that isolation scope is forked, setting the processing metadata here will not mutate the\n    // original isolation scope that the http integration stored away.\n    const isHandledException = eventHint?.mechanism?.handled ?? true;\n    // A request session can go from \"errored\" -> \"crashed\" but not \"crashed\" -> \"errored\".\n    // Crashed (unhandled exception) is worse than errored (handled exception).\n    if (isHandledException && requestSession.status !== 'crashed') {\n      requestSession.status = 'errored';\n    } else if (!isHandledException) {\n      requestSession.status = 'crashed';\n    }\n  }\n}\n\n/**\n * Estimate the size of a log in bytes.\n *\n * @param log - The log to estimate the size of.\n * @returns The estimated size of the log in bytes.\n */\nfunction estimateLogSizeInBytes(log: Log): number {\n  let weight = 0;\n\n  // Estimate byte size of 2 bytes per character. This is a rough estimate JS strings are stored as UTF-16.\n  if (log.message) {\n    weight += log.message.length * 2;\n  }\n\n  if (log.attributes) {\n    Object.values(log.attributes).forEach(value => {\n      if (Array.isArray(value)) {\n        weight += value.length * estimatePrimitiveSizeInBytes(value[0]);\n      } else if (isPrimitive(value)) {\n        weight += estimatePrimitiveSizeInBytes(value);\n      } else {\n        // For objects values, we estimate the size of the object as 100 bytes\n        weight += 100;\n      }\n    });\n  }\n\n  return weight;\n}\n\nfunction estimatePrimitiveSizeInBytes(value: Primitive): number {\n  if (typeof value === 'string') {\n    return value.length * 2;\n  } else if (typeof value === 'number') {\n    return 8;\n  } else if (typeof value === 'boolean') {\n    return 4;\n  }\n\n  return 0;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}