{"ast":null,"code":"import { addNonEnumerableProperty } from '../utils/object.js';\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nfunction setCapturedScopesOnSpan(span, scope, isolationScope) {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nfunction getCapturedScopesOnSpan(span) {\n  return {\n    scope: span[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: span[ISOLATION_SCOPE_ON_START_SPAN_FIELD]\n  };\n}\nexport { getCapturedScopesOnSpan, setCapturedScopesOnSpan };","map":{"version":3,"names":["SCOPE_ON_START_SPAN_FIELD","ISOLATION_SCOPE_ON_START_SPAN_FIELD","setCapturedScopesOnSpan","span","scope","isolationScope","addNonEnumerableProperty","getCapturedScopesOnSpan"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/tracing/utils.ts"],"sourcesContent":["import type { Scope } from '../scope';\nimport type { Span } from '../types-hoist/span';\nimport { addNonEnumerableProperty } from '../utils/object';\n\nconst SCOPE_ON_START_SPAN_FIELD = '_sentryScope';\nconst ISOLATION_SCOPE_ON_START_SPAN_FIELD = '_sentryIsolationScope';\n\ntype SpanWithScopes = Span & {\n  [SCOPE_ON_START_SPAN_FIELD]?: Scope;\n  [ISOLATION_SCOPE_ON_START_SPAN_FIELD]?: Scope;\n};\n\n/** Store the scope & isolation scope for a span, which can the be used when it is finished. */\nexport function setCapturedScopesOnSpan(span: Span | undefined, scope: Scope, isolationScope: Scope): void {\n  if (span) {\n    addNonEnumerableProperty(span, ISOLATION_SCOPE_ON_START_SPAN_FIELD, isolationScope);\n    addNonEnumerableProperty(span, SCOPE_ON_START_SPAN_FIELD, scope);\n  }\n}\n\n/**\n * Grabs the scope and isolation scope off a span that were active when the span was started.\n */\nexport function getCapturedScopesOnSpan(span: Span): { scope?: Scope; isolationScope?: Scope } {\n  return {\n    scope: (span as SpanWithScopes)[SCOPE_ON_START_SPAN_FIELD],\n    isolationScope: (span as SpanWithScopes)[ISOLATION_SCOPE_ON_START_SPAN_FIELD],\n  };\n}\n"],"mappings":";AAIA,MAAMA,yBAAA,GAA4B,cAAc;AAChD,MAAMC,mCAAA,GAAsC,uBAAuB;;AAOnE;AACO,SAASC,uBAAuBA,CAACC,IAAI,EAAoBC,KAAK,EAASC,cAAc,EAAe;EACzG,IAAIF,IAAI,EAAE;IACRG,wBAAwB,CAACH,IAAI,EAAEF,mCAAmC,EAAEI,cAAc,CAAC;IACnFC,wBAAwB,CAACH,IAAI,EAAEH,yBAAyB,EAAEI,KAAK,CAAC;EACpE;AACA;;AAEA;AACA;AACA;AACO,SAASG,uBAAuBA,CAACJ,IAAI,EAAmD;EAC7F,OAAO;IACLC,KAAK,EAAGD,IAAA,CAAwBH,yBAAyB,CAAC;IAC1DK,cAAc,EAAGF,IAAA,CAAwBF,mCAAmC;EAChF,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}