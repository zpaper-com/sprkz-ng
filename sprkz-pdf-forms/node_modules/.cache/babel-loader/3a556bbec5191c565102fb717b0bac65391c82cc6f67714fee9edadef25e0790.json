{"ast":null,"code":"import { isInstanceOf } from './is.js';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nfunction applyAggregateErrorsToEvent(exceptionFromErrorImplementation, parser, key, limit, event, hint) {\n  if (!event.exception?.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException = event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, hint.originalException, key, event.exception.values, originalException, 0);\n  }\n}\nfunction aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error, key, prevExceptions, exception, exceptionId) {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, error[key], key, [newException, ...newExceptions], newException, newExceptionId);\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(exceptionFromErrorImplementation, parser, limit, childError, key, [newException, ...newExceptions], newException, newExceptionId);\n      }\n    });\n  }\n  return newExceptions;\n}\nfunction applyExceptionGroupFieldsForParentException(exception, exceptionId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || {\n    type: 'generic',\n    handled: true\n  };\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && {\n      is_exception_group: true\n    }),\n    exception_id: exceptionId\n  };\n}\nfunction applyExceptionGroupFieldsForChildException(exception, source, exceptionId, parentId) {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || {\n    type: 'generic',\n    handled: true\n  };\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId\n  };\n}\nexport { applyAggregateErrorsToEvent };","map":{"version":3,"names":["applyAggregateErrorsToEvent","exceptionFromErrorImplementation","parser","key","limit","event","hint","exception","values","isInstanceOf","originalException","Error","length","undefined","aggregateExceptionsFromError","error","prevExceptions","exceptionId","newExceptions","applyExceptionGroupFieldsForParentException","newException","newExceptionId","applyExceptionGroupFieldsForChildException","Array","isArray","errors","forEach","childError","i","mechanism","type","handled","is_exception_group","exception_id","source","parentId","parent_id"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/aggregate-errors.ts"],"sourcesContent":["import type { ExtendedError } from '../types-hoist/error';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { Exception } from '../types-hoist/exception';\nimport type { StackParser } from '../types-hoist/stacktrace';\nimport { isInstanceOf } from './is';\n\n/**\n * Creates exceptions inside `event.exception.values` for errors that are nested on properties based on the `key` parameter.\n */\nexport function applyAggregateErrorsToEvent(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  key: string,\n  limit: number,\n  event: Event,\n  hint?: EventHint,\n): void {\n  if (!event.exception?.values || !hint || !isInstanceOf(hint.originalException, Error)) {\n    return;\n  }\n\n  // Generally speaking the last item in `event.exception.values` is the exception originating from the original Error\n  const originalException: Exception | undefined =\n    event.exception.values.length > 0 ? event.exception.values[event.exception.values.length - 1] : undefined;\n\n  // We only create exception grouping if there is an exception in the event.\n  if (originalException) {\n    event.exception.values = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      hint.originalException as ExtendedError,\n      key,\n      event.exception.values,\n      originalException,\n      0,\n    );\n  }\n}\n\nfunction aggregateExceptionsFromError(\n  exceptionFromErrorImplementation: (stackParser: StackParser, ex: Error) => Exception,\n  parser: StackParser,\n  limit: number,\n  error: ExtendedError,\n  key: string,\n  prevExceptions: Exception[],\n  exception: Exception,\n  exceptionId: number,\n): Exception[] {\n  if (prevExceptions.length >= limit + 1) {\n    return prevExceptions;\n  }\n\n  let newExceptions = [...prevExceptions];\n\n  // Recursively call this function in order to walk down a chain of errors\n  if (isInstanceOf(error[key], Error)) {\n    applyExceptionGroupFieldsForParentException(exception, exceptionId);\n    const newException = exceptionFromErrorImplementation(parser, error[key]);\n    const newExceptionId = newExceptions.length;\n    applyExceptionGroupFieldsForChildException(newException, key, newExceptionId, exceptionId);\n    newExceptions = aggregateExceptionsFromError(\n      exceptionFromErrorImplementation,\n      parser,\n      limit,\n      error[key],\n      key,\n      [newException, ...newExceptions],\n      newException,\n      newExceptionId,\n    );\n  }\n\n  // This will create exception grouping for AggregateErrors\n  // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/AggregateError\n  if (Array.isArray(error.errors)) {\n    error.errors.forEach((childError, i) => {\n      if (isInstanceOf(childError, Error)) {\n        applyExceptionGroupFieldsForParentException(exception, exceptionId);\n        const newException = exceptionFromErrorImplementation(parser, childError);\n        const newExceptionId = newExceptions.length;\n        applyExceptionGroupFieldsForChildException(newException, `errors[${i}]`, newExceptionId, exceptionId);\n        newExceptions = aggregateExceptionsFromError(\n          exceptionFromErrorImplementation,\n          parser,\n          limit,\n          childError,\n          key,\n          [newException, ...newExceptions],\n          newException,\n          newExceptionId,\n        );\n      }\n    });\n  }\n\n  return newExceptions;\n}\n\nfunction applyExceptionGroupFieldsForParentException(exception: Exception, exceptionId: number): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    ...(exception.type === 'AggregateError' && { is_exception_group: true }),\n    exception_id: exceptionId,\n  };\n}\n\nfunction applyExceptionGroupFieldsForChildException(\n  exception: Exception,\n  source: string,\n  exceptionId: number,\n  parentId: number | undefined,\n): void {\n  // Don't know if this default makes sense. The protocol requires us to set these values so we pick *some* default.\n  exception.mechanism = exception.mechanism || { type: 'generic', handled: true };\n\n  exception.mechanism = {\n    ...exception.mechanism,\n    type: 'chained',\n    source,\n    exception_id: exceptionId,\n    parent_id: parentId,\n  };\n}\n"],"mappings":";;AAMA;AACA;AACA;AACO,SAASA,2BAA2BA,CACzCC,gCAAgC,EAChCC,MAAM,EACNC,GAAG,EACHC,KAAK,EACLC,KAAK,EACLC,IAAI,EACE;EACN,IAAI,CAACD,KAAK,CAACE,SAAS,EAAEC,MAAA,IAAU,CAACF,IAAA,IAAQ,CAACG,YAAY,CAACH,IAAI,CAACI,iBAAiB,EAAEC,KAAK,CAAC,EAAE;IACrF;EACJ;;EAEA;EACE,MAAMD,iBAAiB,GACrBL,KAAK,CAACE,SAAS,CAACC,MAAM,CAACI,MAAA,GAAS,IAAIP,KAAK,CAACE,SAAS,CAACC,MAAM,CAACH,KAAK,CAACE,SAAS,CAACC,MAAM,CAACI,MAAA,GAAS,CAAC,IAAIC,SAAS;;EAE7G;EACE,IAAIH,iBAAiB,EAAE;IACrBL,KAAK,CAACE,SAAS,CAACC,MAAA,GAASM,4BAA4B,CACnDb,gCAAgC,EAChCC,MAAM,EACNE,KAAK,EACLE,IAAI,CAACI,iBAAA,EACLP,GAAG,EACHE,KAAK,CAACE,SAAS,CAACC,MAAM,EACtBE,iBAAiB,EACjB,CACN,CAAK;EACL;AACA;AAEA,SAASI,4BAA4BA,CACnCb,gCAAgC,EAChCC,MAAM,EACNE,KAAK,EACLW,KAAK,EACLZ,GAAG,EACHa,cAAc,EACdT,SAAS,EACTU,WAAW,EACE;EACb,IAAID,cAAc,CAACJ,MAAA,IAAUR,KAAA,GAAQ,CAAC,EAAE;IACtC,OAAOY,cAAc;EACzB;EAEE,IAAIE,aAAA,GAAgB,CAAC,GAAGF,cAAc,CAAC;;EAEzC;EACE,IAAIP,YAAY,CAACM,KAAK,CAACZ,GAAG,CAAC,EAAEQ,KAAK,CAAC,EAAE;IACnCQ,2CAA2C,CAACZ,SAAS,EAAEU,WAAW,CAAC;IACnE,MAAMG,YAAA,GAAenB,gCAAgC,CAACC,MAAM,EAAEa,KAAK,CAACZ,GAAG,CAAC,CAAC;IACzE,MAAMkB,cAAA,GAAiBH,aAAa,CAACN,MAAM;IAC3CU,0CAA0C,CAACF,YAAY,EAAEjB,GAAG,EAAEkB,cAAc,EAAEJ,WAAW,CAAC;IAC1FC,aAAA,GAAgBJ,4BAA4B,CAC1Cb,gCAAgC,EAChCC,MAAM,EACNE,KAAK,EACLW,KAAK,CAACZ,GAAG,CAAC,EACVA,GAAG,EACH,CAACiB,YAAY,EAAE,GAAGF,aAAa,CAAC,EAChCE,YAAY,EACZC,cACN,CAAK;EACL;;EAEA;EACA;EACE,IAAIE,KAAK,CAACC,OAAO,CAACT,KAAK,CAACU,MAAM,CAAC,EAAE;IAC/BV,KAAK,CAACU,MAAM,CAACC,OAAO,CAAC,CAACC,UAAU,EAAEC,CAAC,KAAK;MACtC,IAAInB,YAAY,CAACkB,UAAU,EAAEhB,KAAK,CAAC,EAAE;QACnCQ,2CAA2C,CAACZ,SAAS,EAAEU,WAAW,CAAC;QACnE,MAAMG,YAAA,GAAenB,gCAAgC,CAACC,MAAM,EAAEyB,UAAU,CAAC;QACzE,MAAMN,cAAA,GAAiBH,aAAa,CAACN,MAAM;QAC3CU,0CAA0C,CAACF,YAAY,EAAE,UAAUQ,CAAC,GAAG,EAAEP,cAAc,EAAEJ,WAAW,CAAC;QACrGC,aAAA,GAAgBJ,4BAA4B,CAC1Cb,gCAAgC,EAChCC,MAAM,EACNE,KAAK,EACLuB,UAAU,EACVxB,GAAG,EACH,CAACiB,YAAY,EAAE,GAAGF,aAAa,CAAC,EAChCE,YAAY,EACZC,cACV,CAAS;MACT;IACA,CAAK,CAAC;EACN;EAEE,OAAOH,aAAa;AACtB;AAEA,SAASC,2CAA2CA,CAACZ,SAAS,EAAaU,WAAW,EAAgB;EACtG;EACEV,SAAS,CAACsB,SAAA,GAAYtB,SAAS,CAACsB,SAAA,IAAa;IAAEC,IAAI,EAAE,SAAS;IAAEC,OAAO,EAAE;EAAA,CAAM;EAE/ExB,SAAS,CAACsB,SAAA,GAAY;IACpB,GAAGtB,SAAS,CAACsB,SAAS;IACtB,IAAItB,SAAS,CAACuB,IAAA,KAAS,oBAAoB;MAAEE,kBAAkB,EAAE;IAAA,CAAM,CAAC;IACxEC,YAAY,EAAEhB;EAClB,CAAG;AACH;AAEA,SAASK,0CAA0CA,CACjDf,SAAS,EACT2B,MAAM,EACNjB,WAAW,EACXkB,QAAQ,EACF;EACR;EACE5B,SAAS,CAACsB,SAAA,GAAYtB,SAAS,CAACsB,SAAA,IAAa;IAAEC,IAAI,EAAE,SAAS;IAAEC,OAAO,EAAE;EAAA,CAAM;EAE/ExB,SAAS,CAACsB,SAAA,GAAY;IACpB,GAAGtB,SAAS,CAACsB,SAAS;IACtBC,IAAI,EAAE,SAAS;IACfI,MAAM;IACND,YAAY,EAAEhB,WAAW;IACzBmB,SAAS,EAAED;EACf,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}