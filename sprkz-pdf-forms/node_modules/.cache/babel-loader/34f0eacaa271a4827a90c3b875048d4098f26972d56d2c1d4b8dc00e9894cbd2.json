{"ast":null,"code":"import { getClient } from './currentScopes.js';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from './semanticAttributes.js';\nimport { getActiveSpan } from './utils/spanUtils.js';\nimport { setHttpStatus, SPAN_STATUS_ERROR } from './tracing/spanstatus.js';\nimport { isRequest, isInstanceOf } from './utils/is.js';\nimport { hasSpansEnabled } from './utils/hasSpansEnabled.js';\nimport { SENTRY_BAGGAGE_KEY_PREFIX } from './utils/baggage.js';\nimport { SentryNonRecordingSpan } from './tracing/sentryNonRecordingSpan.js';\nimport { startInactiveSpan } from './tracing/trace.js';\nimport { getTraceData } from './utils/traceData.js';\nimport { parseStringToURLObject, getSanitizedUrlStringFromUrlObject, isURLObjectRelative } from './utils/url.js';\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nfunction instrumentFetchRequest(handlerData, shouldCreateSpan, shouldAttachHeaders, spans, spanOrigin = 'auto.http.browser') {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n  const {\n    method,\n    url\n  } = handlerData.fetchData;\n  const shouldCreateSpanResult = hasSpansEnabled() && shouldCreateSpan(url);\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n  const hasParent = !!getActiveSpan();\n  const span = shouldCreateSpanResult && hasParent ? startInactiveSpan(getSpanStartOptions(url, method, spanOrigin)) : new SentryNonRecordingSpan();\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n  if (shouldAttachHeaders(handlerData.fetchData.url)) {\n    const request = handlerData.args[0];\n    const options = handlerData.args[1] || {};\n    const headers = _addTracingHeadersToFetchRequest(request, options,\n    // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n    // we do not want to use the span as base for the trace headers,\n    // which means that the headers will be generated from the scope and the sampling decision is deferred\n    hasSpansEnabled() && hasParent ? span : undefined);\n    if (headers) {\n      // Ensure this is actually set, if no options have been passed previously\n      handlerData.args[1] = options;\n      options.headers = headers;\n    }\n  }\n  const client = getClient();\n  if (client) {\n    const fetchHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp: handlerData.startTimestamp,\n      endTimestamp: handlerData.endTimestamp\n    };\n    client.emit('beforeOutgoingRequestSpan', span, fetchHint);\n  }\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n * exported only for testing purposes\n *\n * When we determine if we should add a baggage header, there are 3 cases:\n * 1. No previous baggage header -> add baggage\n * 2. Previous baggage header has no sentry baggage values -> add our baggage\n * 3. Previous baggage header has sentry baggage values -> do nothing (might have been added manually by users)\n */\n// eslint-disable-next-line complexity -- yup it's this complicated :(\nfunction _addTracingHeadersToFetchRequest(request, fetchOptionsObj, span) {\n  const traceHeaders = getTraceData({\n    span\n  });\n  const sentryTrace = traceHeaders['sentry-trace'];\n  const baggage = traceHeaders.baggage;\n\n  // Nothing to do, when we return undefined here, the original headers will be used\n  if (!sentryTrace) {\n    return undefined;\n  }\n  const originalHeaders = fetchOptionsObj.headers || (isRequest(request) ? request.headers : undefined);\n  if (!originalHeaders) {\n    return {\n      ...traceHeaders\n    };\n  } else if (isHeaders(originalHeaders)) {\n    const newHeaders = new Headers(originalHeaders);\n\n    // We don't want to override manually added sentry headers\n    if (!newHeaders.get('sentry-trace')) {\n      newHeaders.set('sentry-trace', sentryTrace);\n    }\n    if (baggage) {\n      const prevBaggageHeader = newHeaders.get('baggage');\n      if (!prevBaggageHeader) {\n        newHeaders.set('baggage', baggage);\n      } else if (!baggageHeaderHasSentryBaggageValues(prevBaggageHeader)) {\n        newHeaders.set('baggage', `${prevBaggageHeader},${baggage}`);\n      }\n    }\n    return newHeaders;\n  } else if (Array.isArray(originalHeaders)) {\n    const newHeaders = [...originalHeaders];\n    if (!originalHeaders.find(header => header[0] === 'sentry-trace')) {\n      newHeaders.push(['sentry-trace', sentryTrace]);\n    }\n    const prevBaggageHeaderWithSentryValues = originalHeaders.find(header => header[0] === 'baggage' && baggageHeaderHasSentryBaggageValues(header[1]));\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push(['baggage', baggage]);\n    }\n    return newHeaders;\n  } else {\n    const existingSentryTraceHeader = 'sentry-trace' in originalHeaders ? originalHeaders['sentry-trace'] : undefined;\n    const existingBaggageHeader = 'baggage' in originalHeaders ? originalHeaders.baggage : undefined;\n    const newBaggageHeaders = existingBaggageHeader ? Array.isArray(existingBaggageHeader) ? [...existingBaggageHeader] : [existingBaggageHeader] : [];\n    const prevBaggageHeaderWithSentryValues = existingBaggageHeader && (Array.isArray(existingBaggageHeader) ? existingBaggageHeader.find(headerItem => baggageHeaderHasSentryBaggageValues(headerItem)) : baggageHeaderHasSentryBaggageValues(existingBaggageHeader));\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      newBaggageHeaders.push(baggage);\n    }\n    return {\n      ...originalHeaders,\n      'sentry-trace': existingSentryTraceHeader ?? sentryTrace,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined\n    };\n  }\n}\nfunction endSpan(span, handlerData) {\n  if (handlerData.response) {\n    setHttpStatus(span, handlerData.response.status);\n    const contentLength = handlerData.response?.headers?.get('content-length');\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({\n      code: SPAN_STATUS_ERROR,\n      message: 'internal_error'\n    });\n  }\n  span.end();\n}\nfunction baggageHeaderHasSentryBaggageValues(baggageHeader) {\n  return baggageHeader.split(',').some(baggageEntry => baggageEntry.trim().startsWith(SENTRY_BAGGAGE_KEY_PREFIX));\n}\nfunction isHeaders(headers) {\n  return typeof Headers !== 'undefined' && isInstanceOf(headers, Headers);\n}\nfunction getSpanStartOptions(url, method, spanOrigin) {\n  const parsedUrl = parseStringToURLObject(url);\n  return {\n    name: parsedUrl ? `${method} ${getSanitizedUrlStringFromUrlObject(parsedUrl)}` : method,\n    attributes: getFetchSpanAttributes(url, parsedUrl, method, spanOrigin)\n  };\n}\nfunction getFetchSpanAttributes(url, parsedUrl, method, spanOrigin) {\n  const attributes = {\n    url,\n    type: 'fetch',\n    'http.method': method,\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client'\n  };\n  if (parsedUrl) {\n    if (!isURLObjectRelative(parsedUrl)) {\n      attributes['http.url'] = parsedUrl.href;\n      attributes['server.address'] = parsedUrl.host;\n    }\n    if (parsedUrl.search) {\n      attributes['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      attributes['http.fragment'] = parsedUrl.hash;\n    }\n  }\n  return attributes;\n}\nexport { _addTracingHeadersToFetchRequest, instrumentFetchRequest };","map":{"version":3,"names":["instrumentFetchRequest","handlerData","shouldCreateSpan","shouldAttachHeaders","spans","spanOrigin","fetchData","undefined","method","url","shouldCreateSpanResult","hasSpansEnabled","endTimestamp","spanId","__span","span","endSpan","hasParent","getActiveSpan","startInactiveSpan","getSpanStartOptions","SentryNonRecordingSpan","spanContext","request","args","options","headers","_addTracingHeadersToFetchRequest","client","getClient","fetchHint","input","response","startTimestamp","emit","fetchOptionsObj","traceHeaders","getTraceData","sentryTrace","baggage","originalHeaders","isRequest","isHeaders","newHeaders","Headers","get","set","prevBaggageHeader","baggageHeaderHasSentryBaggageValues","Array","isArray","find","header","push","prevBaggageHeaderWithSentryValues","existingSentryTraceHeader","existingBaggageHeader","newBaggageHeaders","headerItem","length","join","setHttpStatus","status","contentLength","contentLengthNum","parseInt","setAttribute","error","setStatus","code","SPAN_STATUS_ERROR","message","end","baggageHeader","split","some","baggageEntry","trim","startsWith","SENTRY_BAGGAGE_KEY_PREFIX","isInstanceOf","parsedUrl","parseStringToURLObject","name","getSanitizedUrlStringFromUrlObject","attributes","getFetchSpanAttributes","type","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","isURLObjectRelative","href","host","search","hash"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/fetch.ts"],"sourcesContent":["import { getClient } from './currentScopes';\nimport { SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from './semanticAttributes';\nimport { setHttpStatus, SPAN_STATUS_ERROR, startInactiveSpan } from './tracing';\nimport { SentryNonRecordingSpan } from './tracing/sentryNonRecordingSpan';\nimport type { FetchBreadcrumbHint } from './types-hoist/breadcrumb';\nimport type { HandlerDataFetch } from './types-hoist/instrument';\nimport type { Span, SpanAttributes, SpanOrigin } from './types-hoist/span';\nimport { SENTRY_BAGGAGE_KEY_PREFIX } from './utils/baggage';\nimport { hasSpansEnabled } from './utils/hasSpansEnabled';\nimport { isInstanceOf, isRequest } from './utils/is';\nimport { getActiveSpan } from './utils/spanUtils';\nimport { getTraceData } from './utils/traceData';\nimport { getSanitizedUrlStringFromUrlObject, isURLObjectRelative, parseStringToURLObject } from './utils/url';\n\ntype PolymorphicRequestHeaders =\n  | Record<string, string | undefined>\n  | Array<[string, string]>\n  // the below is not precisely the Header type used in Request, but it'll pass duck-typing\n  | {\n      append: (key: string, value: string) => void;\n      get: (key: string) => string | null | undefined;\n    };\n\n/**\n * Create and track fetch request spans for usage in combination with `addFetchInstrumentationHandler`.\n *\n * @returns Span if a span was created, otherwise void.\n */\nexport function instrumentFetchRequest(\n  handlerData: HandlerDataFetch,\n  shouldCreateSpan: (url: string) => boolean,\n  shouldAttachHeaders: (url: string) => boolean,\n  spans: Record<string, Span>,\n  spanOrigin: SpanOrigin = 'auto.http.browser',\n): Span | undefined {\n  if (!handlerData.fetchData) {\n    return undefined;\n  }\n\n  const { method, url } = handlerData.fetchData;\n\n  const shouldCreateSpanResult = hasSpansEnabled() && shouldCreateSpan(url);\n\n  if (handlerData.endTimestamp && shouldCreateSpanResult) {\n    const spanId = handlerData.fetchData.__span;\n    if (!spanId) return;\n\n    const span = spans[spanId];\n    if (span) {\n      endSpan(span, handlerData);\n\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete spans[spanId];\n    }\n    return undefined;\n  }\n\n  const hasParent = !!getActiveSpan();\n\n  const span =\n    shouldCreateSpanResult && hasParent\n      ? startInactiveSpan(getSpanStartOptions(url, method, spanOrigin))\n      : new SentryNonRecordingSpan();\n\n  handlerData.fetchData.__span = span.spanContext().spanId;\n  spans[span.spanContext().spanId] = span;\n\n  if (shouldAttachHeaders(handlerData.fetchData.url)) {\n    const request: string | Request = handlerData.args[0];\n\n    const options: { [key: string]: unknown } = handlerData.args[1] || {};\n\n    const headers = _addTracingHeadersToFetchRequest(\n      request,\n      options,\n      // If performance is disabled (TWP) or there's no active root span (pageload/navigation/interaction),\n      // we do not want to use the span as base for the trace headers,\n      // which means that the headers will be generated from the scope and the sampling decision is deferred\n      hasSpansEnabled() && hasParent ? span : undefined,\n    );\n    if (headers) {\n      // Ensure this is actually set, if no options have been passed previously\n      handlerData.args[1] = options;\n      options.headers = headers;\n    }\n  }\n\n  const client = getClient();\n\n  if (client) {\n    const fetchHint = {\n      input: handlerData.args,\n      response: handlerData.response,\n      startTimestamp: handlerData.startTimestamp,\n      endTimestamp: handlerData.endTimestamp,\n    } satisfies FetchBreadcrumbHint;\n\n    client.emit('beforeOutgoingRequestSpan', span, fetchHint);\n  }\n\n  return span;\n}\n\n/**\n * Adds sentry-trace and baggage headers to the various forms of fetch headers.\n * exported only for testing purposes\n *\n * When we determine if we should add a baggage header, there are 3 cases:\n * 1. No previous baggage header -> add baggage\n * 2. Previous baggage header has no sentry baggage values -> add our baggage\n * 3. Previous baggage header has sentry baggage values -> do nothing (might have been added manually by users)\n */\n// eslint-disable-next-line complexity -- yup it's this complicated :(\nexport function _addTracingHeadersToFetchRequest(\n  request: string | Request,\n  fetchOptionsObj: {\n    headers?:\n      | {\n          [key: string]: string[] | string | undefined;\n        }\n      | PolymorphicRequestHeaders;\n  },\n  span?: Span,\n): PolymorphicRequestHeaders | undefined {\n  const traceHeaders = getTraceData({ span });\n  const sentryTrace = traceHeaders['sentry-trace'];\n  const baggage = traceHeaders.baggage;\n\n  // Nothing to do, when we return undefined here, the original headers will be used\n  if (!sentryTrace) {\n    return undefined;\n  }\n\n  const originalHeaders = fetchOptionsObj.headers || (isRequest(request) ? request.headers : undefined);\n\n  if (!originalHeaders) {\n    return { ...traceHeaders };\n  } else if (isHeaders(originalHeaders)) {\n    const newHeaders = new Headers(originalHeaders);\n\n    // We don't want to override manually added sentry headers\n    if (!newHeaders.get('sentry-trace')) {\n      newHeaders.set('sentry-trace', sentryTrace);\n    }\n\n    if (baggage) {\n      const prevBaggageHeader = newHeaders.get('baggage');\n\n      if (!prevBaggageHeader) {\n        newHeaders.set('baggage', baggage);\n      } else if (!baggageHeaderHasSentryBaggageValues(prevBaggageHeader)) {\n        newHeaders.set('baggage', `${prevBaggageHeader},${baggage}`);\n      }\n    }\n\n    return newHeaders;\n  } else if (Array.isArray(originalHeaders)) {\n    const newHeaders = [...originalHeaders];\n\n    if (!originalHeaders.find(header => header[0] === 'sentry-trace')) {\n      newHeaders.push(['sentry-trace', sentryTrace]);\n    }\n\n    const prevBaggageHeaderWithSentryValues = originalHeaders.find(\n      header => header[0] === 'baggage' && baggageHeaderHasSentryBaggageValues(header[1]),\n    );\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      // If there are multiple entries with the same key, the browser will merge the values into a single request header.\n      // Its therefore safe to simply push a \"baggage\" entry, even though there might already be another baggage header.\n      newHeaders.push(['baggage', baggage]);\n    }\n\n    return newHeaders as PolymorphicRequestHeaders;\n  } else {\n    const existingSentryTraceHeader = 'sentry-trace' in originalHeaders ? originalHeaders['sentry-trace'] : undefined;\n\n    const existingBaggageHeader = 'baggage' in originalHeaders ? originalHeaders.baggage : undefined;\n    const newBaggageHeaders: string[] = existingBaggageHeader\n      ? Array.isArray(existingBaggageHeader)\n        ? [...existingBaggageHeader]\n        : [existingBaggageHeader]\n      : [];\n\n    const prevBaggageHeaderWithSentryValues =\n      existingBaggageHeader &&\n      (Array.isArray(existingBaggageHeader)\n        ? existingBaggageHeader.find(headerItem => baggageHeaderHasSentryBaggageValues(headerItem))\n        : baggageHeaderHasSentryBaggageValues(existingBaggageHeader));\n\n    if (baggage && !prevBaggageHeaderWithSentryValues) {\n      newBaggageHeaders.push(baggage);\n    }\n\n    return {\n      ...(originalHeaders as Exclude<typeof originalHeaders, Headers>),\n      'sentry-trace': (existingSentryTraceHeader as string | undefined) ?? sentryTrace,\n      baggage: newBaggageHeaders.length > 0 ? newBaggageHeaders.join(',') : undefined,\n    };\n  }\n}\n\nfunction endSpan(span: Span, handlerData: HandlerDataFetch): void {\n  if (handlerData.response) {\n    setHttpStatus(span, handlerData.response.status);\n\n    const contentLength = handlerData.response?.headers?.get('content-length');\n\n    if (contentLength) {\n      const contentLengthNum = parseInt(contentLength);\n      if (contentLengthNum > 0) {\n        span.setAttribute('http.response_content_length', contentLengthNum);\n      }\n    }\n  } else if (handlerData.error) {\n    span.setStatus({ code: SPAN_STATUS_ERROR, message: 'internal_error' });\n  }\n  span.end();\n}\n\nfunction baggageHeaderHasSentryBaggageValues(baggageHeader: string): boolean {\n  return baggageHeader.split(',').some(baggageEntry => baggageEntry.trim().startsWith(SENTRY_BAGGAGE_KEY_PREFIX));\n}\n\nfunction isHeaders(headers: unknown): headers is Headers {\n  return typeof Headers !== 'undefined' && isInstanceOf(headers, Headers);\n}\n\nfunction getSpanStartOptions(\n  url: string,\n  method: string,\n  spanOrigin: SpanOrigin,\n): Parameters<typeof startInactiveSpan>[0] {\n  const parsedUrl = parseStringToURLObject(url);\n  return {\n    name: parsedUrl ? `${method} ${getSanitizedUrlStringFromUrlObject(parsedUrl)}` : method,\n    attributes: getFetchSpanAttributes(url, parsedUrl, method, spanOrigin),\n  };\n}\n\nfunction getFetchSpanAttributes(\n  url: string,\n  parsedUrl: ReturnType<typeof parseStringToURLObject>,\n  method: string,\n  spanOrigin: SpanOrigin,\n): SpanAttributes {\n  const attributes: SpanAttributes = {\n    url,\n    type: 'fetch',\n    'http.method': method,\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: spanOrigin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'http.client',\n  };\n  if (parsedUrl) {\n    if (!isURLObjectRelative(parsedUrl)) {\n      attributes['http.url'] = parsedUrl.href;\n      attributes['server.address'] = parsedUrl.host;\n    }\n    if (parsedUrl.search) {\n      attributes['http.query'] = parsedUrl.search;\n    }\n    if (parsedUrl.hash) {\n      attributes['http.fragment'] = parsedUrl.hash;\n    }\n  }\n  return attributes;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}