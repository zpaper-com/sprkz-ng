{"ast":null,"code":"import { defineIntegration } from '../integration.js';\nimport { parseCookie } from '../utils/cookie.js';\nimport { getClientIPAddress, ipHeaderNames } from '../vendor/getIpAddress.js';\n\n// TODO(v10): Change defaults based on `sendDefaultPii`\nconst DEFAULT_INCLUDE = {\n  cookies: true,\n  data: true,\n  headers: true,\n  query_string: true,\n  url: true\n};\nconst INTEGRATION_NAME = 'RequestData';\nconst _requestDataIntegration = (options = {}) => {\n  const include = {\n    ...DEFAULT_INCLUDE,\n    ...options.include\n  };\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const {\n        sdkProcessingMetadata = {}\n      } = event;\n      const {\n        normalizedRequest,\n        ipAddress\n      } = sdkProcessingMetadata;\n      const includeWithDefaultPiiApplied = {\n        ...include,\n        ip: include.ip ?? client.getOptions().sendDefaultPii\n      };\n      if (normalizedRequest) {\n        addNormalizedRequestDataToEvent(event, normalizedRequest, {\n          ipAddress\n        }, includeWithDefaultPiiApplied);\n      }\n      return event;\n    }\n  };\n};\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nconst requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(event, req,\n// Data that should not go into `event.request` but is somehow related to requests\nadditionalData, include) {\n  event.request = {\n    ...event.request,\n    ...extractNormalizedRequestData(req, include)\n  };\n  if (include.ip) {\n    const ip = req.headers && getClientIPAddress(req.headers) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip\n      };\n    }\n  }\n}\nfunction extractNormalizedRequestData(normalizedRequest, include) {\n  const requestData = {};\n  const headers = {\n    ...normalizedRequest.headers\n  };\n  if (include.headers) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.cookies) {\n      delete headers.cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.ip) {\n      ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete headers[ipHeaderName];\n      });\n    }\n  }\n  requestData.method = normalizedRequest.method;\n  if (include.url) {\n    requestData.url = normalizedRequest.url;\n  }\n  if (include.cookies) {\n    const cookies = normalizedRequest.cookies || (headers?.cookie ? parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n  if (include.query_string) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n  if (include.data) {\n    requestData.data = normalizedRequest.data;\n  }\n  return requestData;\n}\nexport { requestDataIntegration };","map":{"version":3,"names":["DEFAULT_INCLUDE","cookies","data","headers","query_string","url","INTEGRATION_NAME","_requestDataIntegration","options","include","name","processEvent","event","_hint","client","sdkProcessingMetadata","normalizedRequest","ipAddress","includeWithDefaultPiiApplied","ip","getOptions","sendDefaultPii","addNormalizedRequestDataToEvent","requestDataIntegration","defineIntegration","req","additionalData","request","extractNormalizedRequestData","getClientIPAddress","user","ip_address","requestData","cookie","ipHeaderNames","forEach","ipHeaderName","method","parseCookie","undefined"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/integrations/requestdata.ts"],"sourcesContent":["import { defineIntegration } from '../integration';\nimport type { Event } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport type { RequestEventData } from '../types-hoist/request';\nimport { parseCookie } from '../utils/cookie';\nimport { getClientIPAddress, ipHeaderNames } from '../vendor/getIpAddress';\n\ninterface RequestDataIncludeOptions {\n  cookies?: boolean;\n  data?: boolean;\n  headers?: boolean;\n  ip?: boolean;\n  query_string?: boolean;\n  url?: boolean;\n}\n\ntype RequestDataIntegrationOptions = {\n  /**\n   * Controls what data is pulled from the request and added to the event.\n   */\n  include?: RequestDataIncludeOptions;\n};\n\n// TODO(v10): Change defaults based on `sendDefaultPii`\nconst DEFAULT_INCLUDE: RequestDataIncludeOptions = {\n  cookies: true,\n  data: true,\n  headers: true,\n  query_string: true,\n  url: true,\n};\n\nconst INTEGRATION_NAME = 'RequestData';\n\nconst _requestDataIntegration = ((options: RequestDataIntegrationOptions = {}) => {\n  const include = {\n    ...DEFAULT_INCLUDE,\n    ...options.include,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const { sdkProcessingMetadata = {} } = event;\n      const { normalizedRequest, ipAddress } = sdkProcessingMetadata;\n\n      const includeWithDefaultPiiApplied: RequestDataIncludeOptions = {\n        ...include,\n        ip: include.ip ?? client.getOptions().sendDefaultPii,\n      };\n\n      if (normalizedRequest) {\n        addNormalizedRequestDataToEvent(event, normalizedRequest, { ipAddress }, includeWithDefaultPiiApplied);\n      }\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nexport const requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(\n  event: Event,\n  req: RequestEventData,\n  // Data that should not go into `event.request` but is somehow related to requests\n  additionalData: { ipAddress?: string },\n  include: RequestDataIncludeOptions,\n): void {\n  event.request = {\n    ...event.request,\n    ...extractNormalizedRequestData(req, include),\n  };\n\n  if (include.ip) {\n    const ip = (req.headers && getClientIPAddress(req.headers)) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip,\n      };\n    }\n  }\n}\n\nfunction extractNormalizedRequestData(\n  normalizedRequest: RequestEventData,\n  include: RequestDataIncludeOptions,\n): RequestEventData {\n  const requestData: RequestEventData = {};\n  const headers = { ...normalizedRequest.headers };\n\n  if (include.headers) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.cookies) {\n      delete (headers as { cookie?: string }).cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.ip) {\n      ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete (headers as Record<string, unknown>)[ipHeaderName];\n      });\n    }\n  }\n\n  requestData.method = normalizedRequest.method;\n\n  if (include.url) {\n    requestData.url = normalizedRequest.url;\n  }\n\n  if (include.cookies) {\n    const cookies = normalizedRequest.cookies || (headers?.cookie ? parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n\n  if (include.query_string) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n\n  if (include.data) {\n    requestData.data = normalizedRequest.data;\n  }\n\n  return requestData;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}