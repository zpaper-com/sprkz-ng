{"ast":null,"code":"import { defineIntegration, supportsReportingObserver, GLOBAL_OBJ, getClient, withScope, captureMessage } from '@sentry/core';\nconst WINDOW = GLOBAL_OBJ;\nconst INTEGRATION_NAME = 'ReportingObserver';\nconst SETUP_CLIENTS = new WeakMap();\nconst _reportingObserverIntegration = (options = {}) => {\n  const types = options.types || ['crash', 'deprecation', 'intervention'];\n\n  /** Handler for the reporting observer. */\n  function handler(reports) {\n    if (!SETUP_CLIENTS.has(getClient())) {\n      return;\n    }\n    for (const report of reports) {\n      withScope(scope => {\n        scope.setExtra('url', report.url);\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inherited\n          const plainBody = {};\n\n          // eslint-disable-next-line guard-for-in\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n          scope.setExtra('body', plainBody);\n          if (report.type === 'crash') {\n            const body = report.body;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body;\n            details = body.message || details;\n          }\n        }\n        captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      if (!supportsReportingObserver()) {\n        return;\n      }\n      const observer = new WINDOW.ReportingObserver(handler, {\n        buffered: true,\n        types\n      });\n      observer.observe();\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    }\n  };\n};\n\n/**\n * Reporting API integration - https://w3c.github.io/reporting/\n */\nconst reportingObserverIntegration = defineIntegration(_reportingObserverIntegration);\nexport { reportingObserverIntegration };","map":{"version":3,"names":["WINDOW","GLOBAL_OBJ","INTEGRATION_NAME","SETUP_CLIENTS","WeakMap","_reportingObserverIntegration","options","types","handler","reports","has","getClient","report","withScope","scope","setExtra","url","label","type","details","body","plainBody","prop","crashId","reason","join","trim","message","captureMessage","name","setupOnce","supportsReportingObserver","observer","ReportingObserver","buffered","observe","setup","client","set","reportingObserverIntegration","defineIntegration"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/integrations/reportingobserver.ts"],"sourcesContent":["import type { Client, IntegrationFn } from '@sentry/core';\nimport {\n  captureMessage,\n  defineIntegration,\n  getClient,\n  GLOBAL_OBJ,\n  supportsReportingObserver,\n  withScope,\n} from '@sentry/core';\n\nconst WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nconst INTEGRATION_NAME = 'ReportingObserver';\n\ninterface Report {\n  [key: string]: unknown;\n  type: ReportTypes;\n  url: string;\n  body?: ReportBody;\n}\n\ntype ReportTypes = 'crash' | 'deprecation' | 'intervention';\n\ntype ReportBody = CrashReportBody | DeprecationReportBody | InterventionReportBody;\n\ninterface CrashReportBody {\n  [key: string]: unknown;\n  crashId: string;\n  reason?: string;\n}\n\ninterface DeprecationReportBody {\n  [key: string]: unknown;\n  id: string;\n  anticipatedRemoval?: Date;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\ninterface InterventionReportBody {\n  [key: string]: unknown;\n  id: string;\n  message: string;\n  sourceFile?: string;\n  lineNumber?: number;\n  columnNumber?: number;\n}\n\ninterface ReportingObserverOptions {\n  types?: ReportTypes[];\n}\n\n/** This is experimental and the types are not included with TypeScript, sadly. */\ninterface ReportingObserverClass {\n  new (\n    handler: (reports: Report[]) => void,\n    options: { buffered?: boolean; types?: ReportTypes[] },\n  ): {\n    observe: () => void;\n  };\n}\n\nconst SETUP_CLIENTS = new WeakMap<Client, boolean>();\n\nconst _reportingObserverIntegration = ((options: ReportingObserverOptions = {}) => {\n  const types = options.types || ['crash', 'deprecation', 'intervention'];\n\n  /** Handler for the reporting observer. */\n  function handler(reports: Report[]): void {\n    if (!SETUP_CLIENTS.has(getClient() as Client)) {\n      return;\n    }\n\n    for (const report of reports) {\n      withScope(scope => {\n        scope.setExtra('url', report.url);\n\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inherited\n          const plainBody: {\n            [key: string]: unknown;\n          } = {};\n\n          // eslint-disable-next-line guard-for-in\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n\n          scope.setExtra('body', plainBody);\n\n          if (report.type === 'crash') {\n            const body = report.body as CrashReportBody;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body as DeprecationReportBody | InterventionReportBody;\n            details = body.message || details;\n          }\n        }\n\n        captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      if (!supportsReportingObserver()) {\n        return;\n      }\n\n      const observer = new (WINDOW as typeof WINDOW & { ReportingObserver: ReportingObserverClass }).ReportingObserver(\n        handler,\n        {\n          buffered: true,\n          types,\n        },\n      );\n\n      observer.observe();\n    },\n\n    setup(client): void {\n      SETUP_CLIENTS.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Reporting API integration - https://w3c.github.io/reporting/\n */\nexport const reportingObserverIntegration = defineIntegration(_reportingObserverIntegration);\n"],"mappings":";AAUA,MAAMA,MAAA,GAASC,UAAA;AAEf,MAAMC,gBAAA,GAAmB,mBAAmB;AAoD5C,MAAMC,aAAA,GAAgB,IAAIC,OAAO,EAAmB;AAEpD,MAAMC,6BAAA,GAAiCA,CAACC,OAAO,GAA6B,EAAE,KAAK;EACjF,MAAMC,KAAA,GAAQD,OAAO,CAACC,KAAA,IAAS,CAAC,OAAO,EAAE,aAAa,EAAE,cAAc,CAAC;;EAEzE;EACE,SAASC,OAAOA,CAACC,OAAO,EAAkB;IACxC,IAAI,CAACN,aAAa,CAACO,GAAG,CAACC,SAAS,EAAC,CAAY,EAAE;MAC7C;IACN;IAEI,KAAK,MAAMC,MAAA,IAAUH,OAAO,EAAE;MAC5BI,SAAS,CAACC,KAAA,IAAS;QACjBA,KAAK,CAACC,QAAQ,CAAC,KAAK,EAAEH,MAAM,CAACI,GAAG,CAAC;QAEjC,MAAMC,KAAA,GAAQ,sBAAsBL,MAAM,CAACM,IAAI,GAAG;QAClD,IAAIC,OAAA,GAAU,sBAAsB;QAEpC,IAAIP,MAAM,CAACQ,IAAI,EAAE;UACzB;UACU,MAAMC,SAAA,GAEF,EAAE;;UAEhB;UACU,KAAK,MAAMC,IAAA,IAAQV,MAAM,CAACQ,IAAI,EAAE;YAC9BC,SAAS,CAACC,IAAI,IAAIV,MAAM,CAACQ,IAAI,CAACE,IAAI,CAAC;UAC/C;UAEUR,KAAK,CAACC,QAAQ,CAAC,MAAM,EAAEM,SAAS,CAAC;UAEjC,IAAIT,MAAM,CAACM,IAAA,KAAS,OAAO,EAAE;YAC3B,MAAME,IAAA,GAAOR,MAAM,CAACQ,IAAA;YAChC;YACYD,OAAA,GAAU,CAACC,IAAI,CAACG,OAAA,IAAW,EAAE,EAAEH,IAAI,CAACI,MAAA,IAAU,EAAE,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,CAACC,IAAI,EAAC,IAAKP,OAAO;UACzF,OAAiB;YACL,MAAMC,IAAA,GAAOR,MAAM,CAACQ,IAAA;YACpBD,OAAA,GAAUC,IAAI,CAACO,OAAA,IAAWR,OAAO;UAC7C;QACA;QAEQS,cAAc,CAAC,GAACX,KAAA,KAAAE,OAAA;MACA;IACA;EACA;EAEA;IACAU,IAAA,EAAA3B,gBAAA;IACA4B,UAAA;MACA,KAAAC,yBAAA;QACA;MACA;MAEA,MAAAC,QAAA,OAAAhC,MAAA,CAAAiC,iBAAA,CACAzB,OAAA,EACA;QACA0B,QAAA;QACA3B;MACA,CACA;MAEAyB,QAAA,CAAAG,OAAA;IACA;IAEAC,MAAAC,MAAA;MACAlC,aAAA,CAAAmC,GAAA,CAAAD,MAAA;IACA;EACA;AACA;;AAEA;AACA;AACA;AACA,MAAAE,4BAAA,GAAAC,iBAAA,CAAAnC,6BAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}