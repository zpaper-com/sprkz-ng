{"ast":null,"code":"import { DEBUG_BUILD } from '../debug-build.js';\nimport { htmlTreeAsString } from './browser.js';\nimport { debug } from './debug-logger.js';\nimport { isError, isEvent, isInstanceOf, isPrimitive, isElement } from './is.js';\nimport { truncate } from './string.js';\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * If the method on the passed object is not a function, the wrapper will not be applied.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nfunction fill(source, name, replacementFactory) {\n  if (!(name in source)) {\n    return;\n  }\n\n  // explicitly casting to unknown because we don't know the type of the method initially at all\n  const original = source[name];\n  if (typeof original !== 'function') {\n    return;\n  }\n  const wrapped = replacementFactory(original);\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n  try {\n    source[name] = wrapped;\n  } catch {\n    DEBUG_BUILD && debug.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nfunction addNonEnumerableProperty(obj, name, value) {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true\n    });\n  } catch {\n    DEBUG_BUILD && debug.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nfunction markFunctionWrapped(wrapped, original) {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction getOriginalFunction(func) {\n  return func.__sentry_original__;\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nfunction convertToPlainObject(value) {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value)\n    };\n  } else if (isEvent(value)) {\n    const newObj = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value)\n    };\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target) {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj) {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = obj[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nfunction extractExceptionKeysForMessage(exception, maxLength = 40) {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n  const firstKey = keys[0];\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n  if (firstKey.length >= maxLength) {\n    return truncate(firstKey, maxLength);\n  }\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n *\n * @deprecated This function is no longer used by the SDK and will be removed in a future major version.\n */\nfunction dropUndefinedKeys(inputValue) {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\nfunction _dropUndefinedKeys(inputValue, memoizationMap) {\n  // Early return for primitive values\n  if (inputValue === null || typeof inputValue !== 'object') {\n    return inputValue;\n  }\n\n  // Check memo map first for all object types\n  const memoVal = memoizationMap.get(inputValue);\n  if (memoVal !== undefined) {\n    return memoVal;\n  }\n\n  // handle arrays\n  if (Array.isArray(inputValue)) {\n    const returnValue = [];\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n    inputValue.forEach(value => {\n      returnValue.push(_dropUndefinedKeys(value, memoizationMap));\n    });\n    return returnValue;\n  }\n  if (isPojo(inputValue)) {\n    const returnValue = {};\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n    const keys = Object.keys(inputValue);\n    keys.forEach(key => {\n      const val = inputValue[key];\n      if (val !== undefined) {\n        returnValue[key] = _dropUndefinedKeys(val, memoizationMap);\n      }\n    });\n    return returnValue;\n  }\n\n  // For other object types, return as is\n  return inputValue;\n}\nfunction isPojo(input) {\n  // Plain objects have Object as constructor or no constructor\n  const constructor = input.constructor;\n  return constructor === Object || constructor === undefined;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nfunction objectify(wat) {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new wat.constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\nexport { addNonEnumerableProperty, convertToPlainObject, dropUndefinedKeys, extractExceptionKeysForMessage, fill, getOriginalFunction, markFunctionWrapped, objectify };","map":{"version":3,"names":["fill","source","name","replacementFactory","original","wrapped","markFunctionWrapped","DEBUG_BUILD","debug","log","addNonEnumerableProperty","obj","value","Object","defineProperty","writable","configurable","proto","prototype","getOriginalFunction","func","__sentry_original__","convertToPlainObject","isError","message","stack","getOwnProperties","isEvent","newObj","type","target","serializeEventTarget","currentTarget","CustomEvent","isInstanceOf","detail","isElement","htmlTreeAsString","toString","call","extractedProps","property","hasOwnProperty","extractExceptionKeysForMessage","exception","maxLength","keys","sort","firstKey","length","truncate","includedKeys","serialized","slice","join","dropUndefinedKeys","inputValue","memoizationMap","Map","_dropUndefinedKeys","memoVal","get","undefined","Array","isArray","returnValue","set","forEach","push","isPojo","key","val","input","constructor","objectify","wat","objectified","String","isPrimitive"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/object.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { WrappedFunction } from '../types-hoist/wrappedfunction';\nimport { htmlTreeAsString } from './browser';\nimport { debug } from './debug-logger';\nimport { isElement, isError, isEvent, isInstanceOf, isPrimitive } from './is';\nimport { truncate } from './string';\n\n/**\n * Replace a method in an object with a wrapped version of itself.\n *\n * If the method on the passed object is not a function, the wrapper will not be applied.\n *\n * @param source An object that contains a method to be wrapped.\n * @param name The name of the method to be wrapped.\n * @param replacementFactory A higher-order function that takes the original version of the given method and returns a\n * wrapped version. Note: The function returned by `replacementFactory` needs to be a non-arrow function, in order to\n * preserve the correct value of `this`, and the original method must be called using `origMethod.call(this, <other\n * args>)` or `origMethod.apply(this, [<other args>])` (rather than being called directly), again to preserve `this`.\n * @returns void\n */\nexport function fill(source: { [key: string]: any }, name: string, replacementFactory: (...args: any[]) => any): void {\n  if (!(name in source)) {\n    return;\n  }\n\n  // explicitly casting to unknown because we don't know the type of the method initially at all\n  const original = source[name] as unknown;\n\n  if (typeof original !== 'function') {\n    return;\n  }\n\n  const wrapped = replacementFactory(original) as WrappedFunction;\n\n  // Make sure it's a function first, as we need to attach an empty prototype for `defineProperties` to work\n  // otherwise it'll throw \"TypeError: Object.defineProperties called on non-object\"\n  if (typeof wrapped === 'function') {\n    markFunctionWrapped(wrapped, original);\n  }\n\n  try {\n    source[name] = wrapped;\n  } catch {\n    DEBUG_BUILD && debug.log(`Failed to replace method \"${name}\" in object`, source);\n  }\n}\n\n/**\n * Defines a non-enumerable property on the given object.\n *\n * @param obj The object on which to set the property\n * @param name The name of the property to be set\n * @param value The value to which to set the property\n */\nexport function addNonEnumerableProperty(obj: object, name: string, value: unknown): void {\n  try {\n    Object.defineProperty(obj, name, {\n      // enumerable: false, // the default, so we can save on bundle size by not explicitly setting it\n      value: value,\n      writable: true,\n      configurable: true,\n    });\n  } catch {\n    DEBUG_BUILD && debug.log(`Failed to add non-enumerable property \"${name}\" to object`, obj);\n  }\n}\n\n/**\n * Remembers the original function on the wrapped function and\n * patches up the prototype.\n *\n * @param wrapped the wrapper function\n * @param original the original function that gets wrapped\n */\nexport function markFunctionWrapped(wrapped: WrappedFunction, original: WrappedFunction): void {\n  try {\n    const proto = original.prototype || {};\n    wrapped.prototype = original.prototype = proto;\n    addNonEnumerableProperty(wrapped, '__sentry_original__', original);\n  } catch {} // eslint-disable-line no-empty\n}\n\n/**\n * This extracts the original function if available.  See\n * `markFunctionWrapped` for more information.\n *\n * @param func the function to unwrap\n * @returns the unwrapped version of the function if available.\n */\n// eslint-disable-next-line @typescript-eslint/ban-types\nexport function getOriginalFunction<T extends Function>(func: WrappedFunction<T>): T | undefined {\n  return func.__sentry_original__;\n}\n\n/**\n * Transforms any `Error` or `Event` into a plain object with all of their enumerable properties, and some of their\n * non-enumerable properties attached.\n *\n * @param value Initial source that we have to transform in order for it to be usable by the serializer\n * @returns An Event or Error turned into an object - or the value argument itself, when value is neither an Event nor\n *  an Error.\n */\nexport function convertToPlainObject<V>(value: V):\n  | {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    }\n  | {\n      [ownProps: string]: unknown;\n      message: string;\n      name: string;\n      stack?: string;\n    }\n  | V {\n  if (isError(value)) {\n    return {\n      message: value.message,\n      name: value.name,\n      stack: value.stack,\n      ...getOwnProperties(value),\n    };\n  } else if (isEvent(value)) {\n    const newObj: {\n      [ownProps: string]: unknown;\n      type: string;\n      target: string;\n      currentTarget: string;\n      detail?: unknown;\n    } = {\n      type: value.type,\n      target: serializeEventTarget(value.target),\n      currentTarget: serializeEventTarget(value.currentTarget),\n      ...getOwnProperties(value),\n    };\n\n    if (typeof CustomEvent !== 'undefined' && isInstanceOf(value, CustomEvent)) {\n      newObj.detail = value.detail;\n    }\n\n    return newObj;\n  } else {\n    return value;\n  }\n}\n\n/** Creates a string representation of the target of an `Event` object */\nfunction serializeEventTarget(target: unknown): string {\n  try {\n    return isElement(target) ? htmlTreeAsString(target) : Object.prototype.toString.call(target);\n  } catch {\n    return '<unknown>';\n  }\n}\n\n/** Filters out all but an object's own properties */\nfunction getOwnProperties(obj: unknown): { [key: string]: unknown } {\n  if (typeof obj === 'object' && obj !== null) {\n    const extractedProps: { [key: string]: unknown } = {};\n    for (const property in obj) {\n      if (Object.prototype.hasOwnProperty.call(obj, property)) {\n        extractedProps[property] = (obj as Record<string, unknown>)[property];\n      }\n    }\n    return extractedProps;\n  } else {\n    return {};\n  }\n}\n\n/**\n * Given any captured exception, extract its keys and create a sorted\n * and truncated list that will be used inside the event message.\n * eg. `Non-error exception captured with keys: foo, bar, baz`\n */\nexport function extractExceptionKeysForMessage(exception: Record<string, unknown>, maxLength: number = 40): string {\n  const keys = Object.keys(convertToPlainObject(exception));\n  keys.sort();\n\n  const firstKey = keys[0];\n\n  if (!firstKey) {\n    return '[object has no keys]';\n  }\n\n  if (firstKey.length >= maxLength) {\n    return truncate(firstKey, maxLength);\n  }\n\n  for (let includedKeys = keys.length; includedKeys > 0; includedKeys--) {\n    const serialized = keys.slice(0, includedKeys).join(', ');\n    if (serialized.length > maxLength) {\n      continue;\n    }\n    if (includedKeys === keys.length) {\n      return serialized;\n    }\n    return truncate(serialized, maxLength);\n  }\n\n  return '';\n}\n\n/**\n * Given any object, return a new object having removed all fields whose value was `undefined`.\n * Works recursively on objects and arrays.\n *\n * Attention: This function keeps circular references in the returned object.\n *\n * @deprecated This function is no longer used by the SDK and will be removed in a future major version.\n */\nexport function dropUndefinedKeys<T>(inputValue: T): T {\n  // This map keeps track of what already visited nodes map to.\n  // Our Set - based memoBuilder doesn't work here because we want to the output object to have the same circular\n  // references as the input object.\n  const memoizationMap = new Map<unknown, unknown>();\n\n  // This function just proxies `_dropUndefinedKeys` to keep the `memoBuilder` out of this function's API\n  return _dropUndefinedKeys(inputValue, memoizationMap);\n}\n\nfunction _dropUndefinedKeys<T>(inputValue: T, memoizationMap: Map<unknown, unknown>): T {\n  // Early return for primitive values\n  if (inputValue === null || typeof inputValue !== 'object') {\n    return inputValue;\n  }\n\n  // Check memo map first for all object types\n  const memoVal = memoizationMap.get(inputValue);\n  if (memoVal !== undefined) {\n    return memoVal as T;\n  }\n\n  // handle arrays\n  if (Array.isArray(inputValue)) {\n    const returnValue: unknown[] = [];\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    inputValue.forEach(value => {\n      returnValue.push(_dropUndefinedKeys(value, memoizationMap));\n    });\n\n    return returnValue as unknown as T;\n  }\n\n  if (isPojo(inputValue)) {\n    const returnValue: { [key: string]: unknown } = {};\n    // Store mapping to handle circular references\n    memoizationMap.set(inputValue, returnValue);\n\n    const keys = Object.keys(inputValue);\n\n    keys.forEach(key => {\n      const val = inputValue[key];\n      if (val !== undefined) {\n        returnValue[key] = _dropUndefinedKeys(val, memoizationMap);\n      }\n    });\n\n    return returnValue as T;\n  }\n\n  // For other object types, return as is\n  return inputValue;\n}\n\nfunction isPojo(input: unknown): input is Record<string, unknown> {\n  // Plain objects have Object as constructor or no constructor\n  const constructor = (input as object).constructor;\n  return constructor === Object || constructor === undefined;\n}\n\n/**\n * Ensure that something is an object.\n *\n * Turns `undefined` and `null` into `String`s and all other primitives into instances of their respective wrapper\n * classes (String, Boolean, Number, etc.). Acts as the identity function on non-primitives.\n *\n * @param wat The subject of the objectification\n * @returns A version of `wat` which can safely be used with `Object` class methods\n */\nexport function objectify(wat: unknown): typeof Object {\n  let objectified;\n  switch (true) {\n    // this will catch both undefined and null\n    case wat == undefined:\n      objectified = new String(wat);\n      break;\n\n    // Though symbols and bigints do have wrapper classes (`Symbol` and `BigInt`, respectively), for whatever reason\n    // those classes don't have constructors which can be used with the `new` keyword. We therefore need to cast each as\n    // an object in order to wrap it.\n    case typeof wat === 'symbol' || typeof wat === 'bigint':\n      objectified = Object(wat);\n      break;\n\n    // this will catch the remaining primitives: `String`, `Number`, and `Boolean`\n    case isPrimitive(wat):\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      objectified = new (wat as any).constructor(wat);\n      break;\n\n    // by process of elimination, at this point we know that `wat` must already be an object\n    default:\n      objectified = wat;\n      break;\n  }\n  return objectified;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}