{"ast":null,"code":"// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\n\nconst DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nfunction parseRetryAfterHeader(header, now = Date.now()) {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nfunction disabledUntil(limits, dataCategory) {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nfunction isRateLimited(limits, dataCategory, now = Date.now()) {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nfunction updateRateLimits(limits, {\n  statusCode,\n  headers\n}, now = Date.now()) {\n  const updatedRateLimits = {\n    ...limits\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers?.['x-sentry-rate-limits'];\n  const retryAfterHeader = headers?.['retry-after'];\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories,,, namespaces] = limit.split(':', 5);\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n  return updatedRateLimits;\n}\nexport { DEFAULT_RETRY_AFTER, disabledUntil, isRateLimited, parseRetryAfterHeader, updateRateLimits };","map":{"version":3,"names":["DEFAULT_RETRY_AFTER","parseRetryAfterHeader","header","now","Date","headerDelay","parseInt","isNaN","headerDate","parse","disabledUntil","limits","dataCategory","all","isRateLimited","updateRateLimits","statusCode","headers","updatedRateLimits","rateLimitHeader","retryAfterHeader","limit","trim","split","retryAfter","categories","namespaces","delay","category","includes"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/ratelimit.ts"],"sourcesContent":["import type { DataCategory } from '../types-hoist/datacategory';\nimport type { TransportMakeRequestResponse } from '../types-hoist/transport';\n\n// Intentionally keeping the key broad, as we don't know for sure what rate limit headers get returned from backend\nexport type RateLimits = Record<string, number>;\n\nexport const DEFAULT_RETRY_AFTER = 60 * 1000; // 60 seconds\n\n/**\n * Extracts Retry-After value from the request header or returns default value\n * @param header string representation of 'Retry-After' header\n * @param now current unix timestamp\n *\n */\nexport function parseRetryAfterHeader(header: string, now: number = Date.now()): number {\n  const headerDelay = parseInt(`${header}`, 10);\n  if (!isNaN(headerDelay)) {\n    return headerDelay * 1000;\n  }\n\n  const headerDate = Date.parse(`${header}`);\n  if (!isNaN(headerDate)) {\n    return headerDate - now;\n  }\n\n  return DEFAULT_RETRY_AFTER;\n}\n\n/**\n * Gets the time that the given category is disabled until for rate limiting.\n * In case no category-specific limit is set but a general rate limit across all categories is active,\n * that time is returned.\n *\n * @return the time in ms that the category is disabled until or 0 if there's no active rate limit.\n */\nexport function disabledUntil(limits: RateLimits, dataCategory: DataCategory): number {\n  return limits[dataCategory] || limits.all || 0;\n}\n\n/**\n * Checks if a category is rate limited\n */\nexport function isRateLimited(limits: RateLimits, dataCategory: DataCategory, now: number = Date.now()): boolean {\n  return disabledUntil(limits, dataCategory) > now;\n}\n\n/**\n * Update ratelimits from incoming headers.\n *\n * @return the updated RateLimits object.\n */\nexport function updateRateLimits(\n  limits: RateLimits,\n  { statusCode, headers }: TransportMakeRequestResponse,\n  now: number = Date.now(),\n): RateLimits {\n  const updatedRateLimits: RateLimits = {\n    ...limits,\n  };\n\n  // \"The name is case-insensitive.\"\n  // https://developer.mozilla.org/en-US/docs/Web/API/Headers/get\n  const rateLimitHeader = headers?.['x-sentry-rate-limits'];\n  const retryAfterHeader = headers?.['retry-after'];\n\n  if (rateLimitHeader) {\n    /**\n     * rate limit headers are of the form\n     *     <header>,<header>,..\n     * where each <header> is of the form\n     *     <retry_after>: <categories>: <scope>: <reason_code>: <namespaces>\n     * where\n     *     <retry_after> is a delay in seconds\n     *     <categories> is the event type(s) (error, transaction, etc) being rate limited and is of the form\n     *         <category>;<category>;...\n     *     <scope> is what's being limited (org, project, or key) - ignored by SDK\n     *     <reason_code> is an arbitrary string like \"org_quota\" - ignored by SDK\n     *     <namespaces> Semicolon-separated list of metric namespace identifiers. Defines which namespace(s) will be affected.\n     *         Only present if rate limit applies to the metric_bucket data category.\n     */\n    for (const limit of rateLimitHeader.trim().split(',')) {\n      const [retryAfter, categories, , , namespaces] = limit.split(':', 5) as [string, ...string[]];\n      const headerDelay = parseInt(retryAfter, 10);\n      const delay = (!isNaN(headerDelay) ? headerDelay : 60) * 1000; // 60sec default\n      if (!categories) {\n        updatedRateLimits.all = now + delay;\n      } else {\n        for (const category of categories.split(';')) {\n          if (category === 'metric_bucket') {\n            // namespaces will be present when category === 'metric_bucket'\n            if (!namespaces || namespaces.split(';').includes('custom')) {\n              updatedRateLimits[category] = now + delay;\n            }\n          } else {\n            updatedRateLimits[category] = now + delay;\n          }\n        }\n      }\n    }\n  } else if (retryAfterHeader) {\n    updatedRateLimits.all = now + parseRetryAfterHeader(retryAfterHeader, now);\n  } else if (statusCode === 429) {\n    updatedRateLimits.all = now + 60 * 1000;\n  }\n\n  return updatedRateLimits;\n}\n"],"mappings":"AAGA;;AAGO,MAAMA,mBAAA,GAAsB,KAAK,KAAI;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,qBAAqBA,CAACC,MAAM,EAAUC,GAAG,GAAWC,IAAI,CAACD,GAAG,EAAE,EAAU;EACtF,MAAME,WAAA,GAAcC,QAAQ,CAAC,GAACJ,MAAA;EACA,KAAAK,KAAA,CAAAF,WAAA;IACA,OAAAA,WAAA;EACA;EAEA,MAAAG,UAAA,GAAAJ,IAAA,CAAAK,KAAA,IAAAP,MAAA;EACA,KAAAK,KAAA,CAAAC,UAAA;IACA,OAAAA,UAAA,GAAAL,GAAA;EACA;EAEA,OAAAH,mBAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAAU,cAAAC,MAAA,EAAAC,YAAA;EACA,OAAAD,MAAA,CAAAC,YAAA,KAAAD,MAAA,CAAAE,GAAA;AACA;;AAEA;AACA;AACA;AACA,SAAAC,cAAAH,MAAA,EAAAC,YAAA,EAAAT,GAAA,GAAAC,IAAA,CAAAD,GAAA;EACA,OAAAO,aAAA,CAAAC,MAAA,EAAAC,YAAA,IAAAT,GAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAAY,iBACAJ,MAAA,EACA;EAAAK,UAAA;EAAAC;AAAA,GACAd,GAAA,GAAAC,IAAA,CAAAD,GAAA,IACA;EACA,MAAAe,iBAAA;IACA,GAAAP;EACA;;EAEA;EACA;EACA,MAAAQ,eAAA,GAAAF,OAAA;EACA,MAAAG,gBAAA,GAAAH,OAAA;EAEA,IAAAE,eAAA;IACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IACA,WAAAE,KAAA,IAAAF,eAAA,CAAAG,IAAA,GAAAC,KAAA;MACA,OAAAC,UAAA,EAAAC,UAAA,IAAAC,UAAA,IAAAL,KAAA,CAAAE,KAAA;MACA,MAAAlB,WAAA,GAAAC,QAAA,CAAAkB,UAAA;MACA,MAAAG,KAAA,KAAApB,KAAA,CAAAF,WAAA,IAAAA,WAAA;MACA,KAAAoB,UAAA;QACAP,iBAAA,CAAAL,GAAA,GAAAV,GAAA,GAAAwB,KAAA;MACA;QACA,WAAAC,QAAA,IAAAH,UAAA,CAAAF,KAAA;UACA,IAAAK,QAAA;YACA;YACA,KAAAF,UAAA,IAAAA,UAAA,CAAAH,KAAA,MAAAM,QAAA;cACAX,iBAAA,CAAAU,QAAA,IAAAzB,GAAA,GAAAwB,KAAA;YACA;UACA;YACAT,iBAAA,CAAAU,QAAA,IAAAzB,GAAA,GAAAwB,KAAA;UACA;QACA;MACA;IACA;EACA,WAAAP,gBAAA;IACAF,iBAAA,CAAAL,GAAA,GAAAV,GAAA,GAAAF,qBAAA,CAAAmB,gBAAA,EAAAjB,GAAA;EACA,WAAAa,UAAA;IACAE,iBAAA,CAAAL,GAAA,GAAAV,GAAA;EACA;EAEA,OAAAe,iBAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}