{"ast":null,"code":"import { TRACING_DEFAULTS, getLocationHref, browserPerformanceTimeOrigin, parseStringToURLObject, registerSpanErrorInstrumentation, GLOBAL_OBJ, getClient, debug, getIsolationScope, generateTraceId, getCurrentScope, propagationContextFromHeaders, spanToJSON, dateTimestampInSeconds, timestampInSeconds, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, startInactiveSpan, startIdleSpan, getDynamicSamplingContextFromSpan, spanIsSampled, SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, addNonEnumerableProperty, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\nimport { addHistoryInstrumentationHandler, registerInpInteractionListener, startTrackingWebVitals, startTrackingINP, startTrackingElementTiming, startTrackingLongAnimationFrames, startTrackingLongTasks, startTrackingInteractions, addPerformanceEntries } from '@sentry-internal/browser-utils';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW, getHttpRequestData } from '../helpers.js';\nimport { registerBackgroundTabDetection } from './backgroundtab.js';\nimport { linkTraces } from './linkedTraces.js';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request.js';\nconst BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\nconst DEFAULT_BROWSER_TRACING_OPTIONS = {\n  ...TRACING_DEFAULTS,\n  instrumentNavigation: true,\n  instrumentPageLoad: true,\n  markBackgroundSpan: true,\n  enableLongTask: true,\n  enableLongAnimationFrame: true,\n  enableInp: true,\n  enableElementTiming: true,\n  ignoreResourceSpans: [],\n  ignorePerformanceApiSpans: [],\n  detectRedirects: true,\n  linkPreviousTrace: 'in-memory',\n  consistentTraceSampling: false,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library.\n *\n * We explicitly export the proper type here, as this has to be extended in some cases.\n */\nconst browserTracingIntegration = (_options = {}) => {\n  const latestRoute = {\n    name: undefined,\n    source: undefined\n  };\n\n  /**\n   * This is just a small wrapper that makes `document` optional.\n   * We want to be extra-safe and always check that this exists, to ensure weird environments do not blow up.\n   */\n  const optionalWindowDocument = WINDOW.document;\n  const {\n    enableInp,\n    enableElementTiming,\n    enableLongTask,\n    enableLongAnimationFrame,\n    _experiments: {\n      enableInteractions,\n      enableStandaloneClsSpans,\n      enableStandaloneLcpSpans\n    },\n    beforeStartSpan,\n    idleTimeout,\n    finalTimeout,\n    childSpanTimeout,\n    markBackgroundSpan,\n    traceFetch,\n    traceXHR,\n    trackFetchStreamPerformance,\n    shouldCreateSpanForRequest,\n    enableHTTPTimings,\n    ignoreResourceSpans,\n    ignorePerformanceApiSpans,\n    instrumentPageLoad,\n    instrumentNavigation,\n    detectRedirects,\n    linkPreviousTrace,\n    consistentTraceSampling,\n    onRequestSpanStart\n  } = {\n    ...DEFAULT_BROWSER_TRACING_OPTIONS,\n    ..._options\n  };\n  let _collectWebVitals;\n  let lastInteractionTimestamp;\n\n  /** Create routing idle transaction. */\n  function _createRouteSpan(client, startSpanOptions, makeActive = true) {\n    const isPageloadTransaction = startSpanOptions.op === 'pageload';\n    const finalStartSpanOptions = beforeStartSpan ? beforeStartSpan(startSpanOptions) : startSpanOptions;\n    const attributes = finalStartSpanOptions.attributes || {};\n\n    // If `finalStartSpanOptions.name` is different than `startSpanOptions.name`\n    // it is because `beforeStartSpan` set a custom name. Therefore we set the source to 'custom'.\n    if (startSpanOptions.name !== finalStartSpanOptions.name) {\n      attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'custom';\n      finalStartSpanOptions.attributes = attributes;\n    }\n    if (!makeActive) {\n      // We want to ensure this has 0s duration\n      const now = dateTimestampInSeconds();\n      startInactiveSpan({\n        ...finalStartSpanOptions,\n        startTime: now\n      }).end(now);\n      return;\n    }\n    latestRoute.name = finalStartSpanOptions.name;\n    latestRoute.source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n    const idleSpan = startIdleSpan(finalStartSpanOptions, {\n      idleTimeout,\n      finalTimeout,\n      childSpanTimeout,\n      // should wait for finish signal if it's a pageload transaction\n      disableAutoFinish: isPageloadTransaction,\n      beforeSpanEnd: span => {\n        // This will generally always be defined here, because it is set in `setup()` of the integration\n        // but technically, it is optional, so we guard here to be extra safe\n        _collectWebVitals?.();\n        addPerformanceEntries(span, {\n          recordClsOnPageloadSpan: !enableStandaloneClsSpans,\n          recordLcpOnPageloadSpan: !enableStandaloneLcpSpans,\n          ignoreResourceSpans,\n          ignorePerformanceApiSpans\n        });\n        setActiveIdleSpan(client, undefined);\n\n        // A trace should stay consistent over the entire timespan of one route - even after the pageload/navigation ended.\n        // Only when another navigation happens, we want to create a new trace.\n        // This way, e.g. errors that occur after the pageload span ended are still associated to the pageload trace.\n        const scope = getCurrentScope();\n        const oldPropagationContext = scope.getPropagationContext();\n        scope.setPropagationContext({\n          ...oldPropagationContext,\n          traceId: idleSpan.spanContext().traceId,\n          sampled: spanIsSampled(idleSpan),\n          dsc: getDynamicSamplingContextFromSpan(span)\n        });\n      }\n    });\n    setActiveIdleSpan(client, idleSpan);\n    function emitFinish() {\n      if (optionalWindowDocument && ['interactive', 'complete'].includes(optionalWindowDocument.readyState)) {\n        client.emit('idleSpanEnableAutoFinish', idleSpan);\n      }\n    }\n    if (isPageloadTransaction && optionalWindowDocument) {\n      optionalWindowDocument.addEventListener('readystatechange', () => {\n        emitFinish();\n      });\n      emitFinish();\n    }\n  }\n  return {\n    name: BROWSER_TRACING_INTEGRATION_ID,\n    setup(client) {\n      registerSpanErrorInstrumentation();\n      _collectWebVitals = startTrackingWebVitals({\n        recordClsStandaloneSpans: enableStandaloneClsSpans || false,\n        recordLcpStandaloneSpans: enableStandaloneLcpSpans || false,\n        client\n      });\n      if (enableInp) {\n        startTrackingINP();\n      }\n      if (enableElementTiming) {\n        startTrackingElementTiming();\n      }\n      if (enableLongAnimationFrame && GLOBAL_OBJ.PerformanceObserver && PerformanceObserver.supportedEntryTypes && PerformanceObserver.supportedEntryTypes.includes('long-animation-frame')) {\n        startTrackingLongAnimationFrames();\n      } else if (enableLongTask) {\n        startTrackingLongTasks();\n      }\n      if (enableInteractions) {\n        startTrackingInteractions();\n      }\n      if (detectRedirects && optionalWindowDocument) {\n        const interactionHandler = () => {\n          lastInteractionTimestamp = timestampInSeconds();\n        };\n        addEventListener('click', interactionHandler, {\n          capture: true\n        });\n        addEventListener('keydown', interactionHandler, {\n          capture: true,\n          passive: true\n        });\n      }\n      function maybeEndActiveSpan() {\n        const activeSpan = getActiveIdleSpan(client);\n        if (activeSpan && !spanToJSON(activeSpan).timestamp) {\n          DEBUG_BUILD && debug.log(`[Tracing] Finishing current active span with op: ${spanToJSON(activeSpan).op}`);\n          // If there's an open active span, we need to finish it before creating an new one.\n          activeSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, 'cancelled');\n          activeSpan.end();\n        }\n      }\n      client.on('startNavigationSpan', (startSpanOptions, navigationOptions) => {\n        if (getClient() !== client) {\n          return;\n        }\n        if (navigationOptions?.isRedirect) {\n          DEBUG_BUILD && debug.warn('[Tracing] Detected redirect, navigation span will not be the root span, but a child span.');\n          _createRouteSpan(client, {\n            op: 'navigation.redirect',\n            ...startSpanOptions\n          }, false);\n          return;\n        }\n        maybeEndActiveSpan();\n        getIsolationScope().setPropagationContext({\n          traceId: generateTraceId(),\n          sampleRand: Math.random()\n        });\n        const scope = getCurrentScope();\n        scope.setPropagationContext({\n          traceId: generateTraceId(),\n          sampleRand: Math.random()\n        });\n        // We reset this to ensure we do not have lingering incorrect data here\n        // places that call this hook may set this where appropriate - else, the URL at span sending time is used\n        scope.setSDKProcessingMetadata({\n          normalizedRequest: undefined\n        });\n        _createRouteSpan(client, {\n          op: 'navigation',\n          ...startSpanOptions\n        });\n      });\n      client.on('startPageLoadSpan', (startSpanOptions, traceOptions = {}) => {\n        if (getClient() !== client) {\n          return;\n        }\n        maybeEndActiveSpan();\n        const sentryTrace = traceOptions.sentryTrace || getMetaContent('sentry-trace');\n        const baggage = traceOptions.baggage || getMetaContent('baggage');\n        const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n        const scope = getCurrentScope();\n        scope.setPropagationContext(propagationContext);\n\n        // We store the normalized request data on the scope, so we get the request data at time of span creation\n        // otherwise, the URL etc. may already be of the following navigation, and we'd report the wrong URL\n        scope.setSDKProcessingMetadata({\n          normalizedRequest: getHttpRequestData()\n        });\n        _createRouteSpan(client, {\n          op: 'pageload',\n          ...startSpanOptions\n        });\n      });\n    },\n    afterAllSetup(client) {\n      let startingUrl = getLocationHref();\n      if (linkPreviousTrace !== 'off') {\n        linkTraces(client, {\n          linkPreviousTrace,\n          consistentTraceSampling\n        });\n      }\n      if (WINDOW.location) {\n        if (instrumentPageLoad) {\n          const origin = browserPerformanceTimeOrigin();\n          startBrowserTracingPageLoadSpan(client, {\n            name: WINDOW.location.pathname,\n            // pageload should always start at timeOrigin (and needs to be in s, not ms)\n            startTime: origin ? origin / 1000 : undefined,\n            attributes: {\n              [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n              [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.browser'\n            }\n          });\n        }\n        if (instrumentNavigation) {\n          addHistoryInstrumentationHandler(({\n            to,\n            from\n          }) => {\n            /**\n             * This early return is there to account for some cases where a navigation transaction starts right after\n             * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n             * create an uneccessary navigation transaction.\n             *\n             * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n             * only be caused in certain development environments where the usage of a hot module reloader is causing\n             * errors.\n             */\n            if (from === undefined && startingUrl?.indexOf(to) !== -1) {\n              startingUrl = undefined;\n              return;\n            }\n            startingUrl = undefined;\n            const parsed = parseStringToURLObject(to);\n            const activeSpan = getActiveIdleSpan(client);\n            const navigationIsRedirect = activeSpan && detectRedirects && isRedirect(activeSpan, lastInteractionTimestamp);\n            startBrowserTracingNavigationSpan(client, {\n              name: parsed?.pathname || WINDOW.location.pathname,\n              attributes: {\n                [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n                [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.browser'\n              }\n            }, {\n              url: to,\n              isRedirect: navigationIsRedirect\n            });\n          });\n        }\n      }\n      if (markBackgroundSpan) {\n        registerBackgroundTabDetection();\n      }\n      if (enableInteractions) {\n        registerInteractionListener(client, idleTimeout, finalTimeout, childSpanTimeout, latestRoute);\n      }\n      if (enableInp) {\n        registerInpInteractionListener();\n      }\n      instrumentOutgoingRequests(client, {\n        traceFetch,\n        traceXHR,\n        trackFetchStreamPerformance,\n        tracePropagationTargets: client.getOptions().tracePropagationTargets,\n        shouldCreateSpanForRequest,\n        enableHTTPTimings,\n        onRequestSpanStart\n      });\n    }\n  };\n};\n\n/**\n * Manually start a page load span.\n * This will only do something if a browser tracing integration integration has been setup.\n *\n * If you provide a custom `traceOptions` object, it will be used to continue the trace\n * instead of the default behavior, which is to look it up on the <meta> tags.\n */\nfunction startBrowserTracingPageLoadSpan(client, spanOptions, traceOptions) {\n  client.emit('startPageLoadSpan', spanOptions, traceOptions);\n  getCurrentScope().setTransactionName(spanOptions.name);\n  const pageloadSpan = getActiveIdleSpan(client);\n  if (pageloadSpan) {\n    client.emit('afterStartPageLoadSpan', pageloadSpan);\n  }\n  return pageloadSpan;\n}\n\n/**\n * Manually start a navigation span.\n * This will only do something if a browser tracing integration has been setup.\n */\nfunction startBrowserTracingNavigationSpan(client, spanOptions, options) {\n  const {\n    url,\n    isRedirect\n  } = options || {};\n  client.emit('beforeStartNavigationSpan', spanOptions, {\n    isRedirect\n  });\n  client.emit('startNavigationSpan', spanOptions, {\n    isRedirect\n  });\n  const scope = getCurrentScope();\n  scope.setTransactionName(spanOptions.name);\n\n  // We store the normalized request data on the scope, so we get the request data at time of span creation\n  // otherwise, the URL etc. may already be of the following navigation, and we'd report the wrong URL\n  if (url && !isRedirect) {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        ...getHttpRequestData(),\n        url\n      }\n    });\n  }\n  return getActiveIdleSpan(client);\n}\n\n/** Returns the value of a meta tag */\nfunction getMetaContent(metaName) {\n  /**\n   * This is just a small wrapper that makes `document` optional.\n   * We want to be extra-safe and always check that this exists, to ensure weird environments do not blow up.\n   */\n  const optionalWindowDocument = WINDOW.document;\n  const metaTag = optionalWindowDocument?.querySelector(`meta[name=${metaName}]`);\n  return metaTag?.getAttribute('content') || undefined;\n}\n\n/** Start listener for interaction transactions */\nfunction registerInteractionListener(client, idleTimeout, finalTimeout, childSpanTimeout, latestRoute) {\n  /**\n   * This is just a small wrapper that makes `document` optional.\n   * We want to be extra-safe and always check that this exists, to ensure weird environments do not blow up.\n   */\n  const optionalWindowDocument = WINDOW.document;\n  let inflightInteractionSpan;\n  const registerInteractionTransaction = () => {\n    const op = 'ui.action.click';\n    const activeIdleSpan = getActiveIdleSpan(client);\n    if (activeIdleSpan) {\n      const currentRootSpanOp = spanToJSON(activeIdleSpan).op;\n      if (['navigation', 'pageload'].includes(currentRootSpanOp)) {\n        DEBUG_BUILD && debug.warn(`[Tracing] Did not create ${op} span because a pageload or navigation span is in progress.`);\n        return undefined;\n      }\n    }\n    if (inflightInteractionSpan) {\n      inflightInteractionSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, 'interactionInterrupted');\n      inflightInteractionSpan.end();\n      inflightInteractionSpan = undefined;\n    }\n    if (!latestRoute.name) {\n      DEBUG_BUILD && debug.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n      return undefined;\n    }\n    inflightInteractionSpan = startIdleSpan({\n      name: latestRoute.name,\n      op,\n      attributes: {\n        [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: latestRoute.source || 'url'\n      }\n    }, {\n      idleTimeout,\n      finalTimeout,\n      childSpanTimeout\n    });\n  };\n  if (optionalWindowDocument) {\n    addEventListener('click', registerInteractionTransaction, {\n      capture: true\n    });\n  }\n}\n\n// We store the active idle span on the client object, so we can access it from exported functions\nconst ACTIVE_IDLE_SPAN_PROPERTY = '_sentry_idleSpan';\nfunction getActiveIdleSpan(client) {\n  return client[ACTIVE_IDLE_SPAN_PROPERTY];\n}\nfunction setActiveIdleSpan(client, span) {\n  addNonEnumerableProperty(client, ACTIVE_IDLE_SPAN_PROPERTY, span);\n}\n\n// The max. time in seconds between two pageload/navigation spans that makes us consider the second one a redirect\nconst REDIRECT_THRESHOLD = 0.3;\nfunction isRedirect(activeSpan, lastInteractionTimestamp) {\n  const spanData = spanToJSON(activeSpan);\n  const now = dateTimestampInSeconds();\n\n  // More than 300ms since last navigation/pageload span?\n  // --> never consider this a redirect\n  const startTimestamp = spanData.start_timestamp;\n  if (now - startTimestamp > REDIRECT_THRESHOLD) {\n    return false;\n  }\n\n  // A click happened in the last 300ms?\n  // --> never consider this a redirect\n  if (lastInteractionTimestamp && now - lastInteractionTimestamp <= REDIRECT_THRESHOLD) {\n    return false;\n  }\n  return true;\n}\nexport { BROWSER_TRACING_INTEGRATION_ID, browserTracingIntegration, getMetaContent, startBrowserTracingNavigationSpan, startBrowserTracingPageLoadSpan };","map":{"version":3,"names":["BROWSER_TRACING_INTEGRATION_ID","DEFAULT_BROWSER_TRACING_OPTIONS","TRACING_DEFAULTS","instrumentNavigation","instrumentPageLoad","markBackgroundSpan","enableLongTask","enableLongAnimationFrame","enableInp","enableElementTiming","ignoreResourceSpans","ignorePerformanceApiSpans","detectRedirects","linkPreviousTrace","consistentTraceSampling","_experiments","defaultRequestInstrumentationOptions","browserTracingIntegration","_options","latestRoute","name","undefined","source","optionalWindowDocument","WINDOW","document","enableInteractions","enableStandaloneClsSpans","enableStandaloneLcpSpans","beforeStartSpan","idleTimeout","finalTimeout","childSpanTimeout","traceFetch","traceXHR","trackFetchStreamPerformance","shouldCreateSpanForRequest","enableHTTPTimings","onRequestSpanStart","_collectWebVitals","lastInteractionTimestamp","_createRouteSpan","client","startSpanOptions","makeActive","isPageloadTransaction","op","finalStartSpanOptions","attributes","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","now","dateTimestampInSeconds","startInactiveSpan","startTime","end","idleSpan","startIdleSpan","disableAutoFinish","beforeSpanEnd","span","addPerformanceEntries","recordClsOnPageloadSpan","recordLcpOnPageloadSpan","setActiveIdleSpan","scope","getCurrentScope","oldPropagationContext","getPropagationContext","setPropagationContext","traceId","spanContext","sampled","spanIsSampled","dsc","getDynamicSamplingContextFromSpan","emitFinish","includes","readyState","emit","addEventListener","setup","registerSpanErrorInstrumentation","startTrackingWebVitals","recordClsStandaloneSpans","recordLcpStandaloneSpans","startTrackingINP","startTrackingElementTiming","GLOBAL_OBJ","PerformanceObserver","supportedEntryTypes","startTrackingLongAnimationFrames","startTrackingLongTasks","startTrackingInteractions","interactionHandler","timestampInSeconds","capture","passive","maybeEndActiveSpan","activeSpan","getActiveIdleSpan","spanToJSON","timestamp","DEBUG_BUILD","debug","log","setAttribute","SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON","on","navigationOptions","getClient","isRedirect","warn","getIsolationScope","generateTraceId","sampleRand","Math","random","setSDKProcessingMetadata","normalizedRequest","traceOptions","sentryTrace","getMetaContent","baggage","propagationContext","propagationContextFromHeaders","getHttpRequestData","afterAllSetup","startingUrl","getLocationHref","linkTraces","location","origin","browserPerformanceTimeOrigin","startBrowserTracingPageLoadSpan","pathname","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","addHistoryInstrumentationHandler","to","from","indexOf","parsed","parseStringToURLObject","navigationIsRedirect","startBrowserTracingNavigationSpan","url","registerBackgroundTabDetection","registerInteractionListener","registerInpInteractionListener","instrumentOutgoingRequests","tracePropagationTargets","getOptions","spanOptions","setTransactionName","pageloadSpan","options","metaName","metaTag","querySelector","getAttribute","inflightInteractionSpan","registerInteractionTransaction","activeIdleSpan","currentRootSpanOp","ACTIVE_IDLE_SPAN_PROPERTY","addNonEnumerableProperty","REDIRECT_THRESHOLD","spanData","startTimestamp","start_timestamp"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/tracing/browserTracingIntegration.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { Client, IntegrationFn, Span, StartSpanOptions, TransactionSource, WebFetchHeaders } from '@sentry/core';\nimport {\n  addNonEnumerableProperty,\n  browserPerformanceTimeOrigin,\n  dateTimestampInSeconds,\n  debug,\n  generateTraceId,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromSpan,\n  getIsolationScope,\n  getLocationHref,\n  GLOBAL_OBJ,\n  parseStringToURLObject,\n  propagationContextFromHeaders,\n  registerSpanErrorInstrumentation,\n  SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  SEMANTIC_ATTRIBUTE_SENTRY_SOURCE,\n  spanIsSampled,\n  spanToJSON,\n  startIdleSpan,\n  startInactiveSpan,\n  timestampInSeconds,\n  TRACING_DEFAULTS,\n} from '@sentry/core';\nimport {\n  addHistoryInstrumentationHandler,\n  addPerformanceEntries,\n  registerInpInteractionListener,\n  startTrackingElementTiming,\n  startTrackingINP,\n  startTrackingInteractions,\n  startTrackingLongAnimationFrames,\n  startTrackingLongTasks,\n  startTrackingWebVitals,\n} from '@sentry-internal/browser-utils';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { getHttpRequestData, WINDOW } from '../helpers';\nimport { registerBackgroundTabDetection } from './backgroundtab';\nimport { linkTraces } from './linkedTraces';\nimport { defaultRequestInstrumentationOptions, instrumentOutgoingRequests } from './request';\n\nexport const BROWSER_TRACING_INTEGRATION_ID = 'BrowserTracing';\n\ninterface RouteInfo {\n  name: string | undefined;\n  source: TransactionSource | undefined;\n}\n\n/** Options for Browser Tracing integration */\nexport interface BrowserTracingOptions {\n  /**\n   * The time that has to pass without any span being created.\n   * If this time is exceeded, the idle span will finish.\n   *\n   * Default: 1000 (ms)\n   */\n  idleTimeout: number;\n\n  /**\n   * The max. time an idle span may run.\n   * If this time is exceeded, the idle span will finish no matter what.\n   *\n   * Default: 30000 (ms)\n   */\n  finalTimeout: number;\n\n  /**\n   The max. time an idle span may run.\n   * If this time is exceeded, the idle span will finish no matter what.\n   *\n   * Default: 15000 (ms)\n   */\n  childSpanTimeout: number;\n\n  /**\n   * If a span should be created on page load.\n   * If this is set to `false`, this integration will not start the default page load span.\n   * Default: true\n   */\n  instrumentPageLoad: boolean;\n\n  /**\n   * If a span should be created on navigation (history change).\n   * If this is set to `false`, this integration will not start the default navigation spans.\n   * Default: true\n   */\n  instrumentNavigation: boolean;\n\n  /**\n   * Flag spans where tabs moved to background with \"cancelled\". Browser background tab timing is\n   * not suited towards doing precise measurements of operations. By default, we recommend that this option\n   * be enabled as background transactions can mess up your statistics in nondeterministic ways.\n   *\n   * Default: true\n   */\n  markBackgroundSpan: boolean;\n\n  /**\n   * If true, Sentry will capture long tasks and add them to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableLongTask: boolean;\n\n  /**\n   * If true, Sentry will capture long animation frames and add them to the corresponding transaction.\n   *\n   * Default: false\n   */\n  enableLongAnimationFrame: boolean;\n\n  /**\n   * If true, Sentry will capture first input delay and add it to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableInp: boolean;\n\n  /**\n   * If true, Sentry will capture [element timing](https://developer.mozilla.org/en-US/docs/Web/API/PerformanceElementTiming)\n   * information and add it to the corresponding transaction.\n   *\n   * Default: true\n   */\n  enableElementTiming: boolean;\n\n  /**\n   * Flag to disable patching all together for fetch requests.\n   *\n   * Default: true\n   */\n  traceFetch: boolean;\n\n  /**\n   * Flag to disable patching all together for xhr requests.\n   *\n   * Default: true\n   */\n  traceXHR: boolean;\n\n  /**\n   * Flag to disable tracking of long-lived streams, like server-sent events (SSE) via fetch.\n   * Do not enable this in case you have live streams or very long running streams.\n   *\n   * Default: false\n   */\n  trackFetchStreamPerformance: boolean;\n\n  /**\n   * If true, Sentry will capture http timings and add them to the corresponding http spans.\n   *\n   * Default: true\n   */\n  enableHTTPTimings: boolean;\n\n  /**\n   * Resource spans with `op`s matching strings in the array will not be emitted.\n   *\n   * Default: []\n   */\n  ignoreResourceSpans: Array<'resouce.script' | 'resource.css' | 'resource.img' | 'resource.other' | string>;\n\n  /**\n   * Spans created from the following browser Performance APIs,\n   *\n   * - [`performance.mark(...)`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/mark)\n   * - [`performance.measure(...)`](https://developer.mozilla.org/en-US/docs/Web/API/Performance/measure)\n   *\n   * will not be emitted if their names match strings in this array.\n   *\n   * This is useful, if you come across `mark` or `measure` spans in your Sentry traces\n   * that you want to ignore. For example, sometimes, browser extensions or libraries\n   * emit these entries on their own, which might not be relevant to your application.\n   *\n   * * @example\n   * ```ts\n   * Sentry.init({\n   *   integrations: [\n   *     Sentry.browserTracingIntegration({\n   *      ignorePerformanceApiSpans: ['myMeasurement', /myMark/],\n   *     }),\n   *   ],\n   * });\n   *\n   * // no spans will be created for these:\n   * performance.mark('myMark');\n   * performance.measure('myMeasurement');\n   *\n   * // spans will be created for these:\n   * performance.mark('authenticated');\n   * performance.measure('input-duration', ...);\n   * ```\n   *\n   * Default: [] - By default, all `mark` and `measure` entries are sent as spans.\n   */\n  ignorePerformanceApiSpans: Array<string | RegExp>;\n\n  /**\n   * By default, the SDK will try to detect redirects and avoid creating separate spans for them.\n   * If you want to opt-out of this behavior, you can set this option to `false`.\n   *\n   * Default: true\n   */\n  detectRedirects: boolean;\n\n  /**\n   * Link the currently started trace to a previous trace (e.g. a prior pageload, navigation or\n   * manually started span). When enabled, this option will allow you to navigate between traces\n   * in the Sentry UI.\n   *\n   * You can set this option to the following values:\n   *\n   * - `'in-memory'`: The previous trace data will be stored in memory.\n   *   This is useful for single-page applications and enabled by default.\n   *\n   * - `'session-storage'`: The previous trace data will be stored in the `sessionStorage`.\n   *   This is useful for multi-page applications or static sites but it means that the\n   *   Sentry SDK writes to the browser's `sessionStorage`.\n   *\n   * - `'off'`: The previous trace data will not be stored or linked.\n   *\n   * You can also use {@link BrowserTracingOptions.consistentTraceSampling} to get\n   * consistent trace sampling of subsequent traces. Otherwise, by default, your\n   * `tracesSampleRate` or `tracesSampler` config significantly influences how often\n   * traces will be linked.\n   *\n   * @default 'in-memory' - see explanation above\n   */\n  linkPreviousTrace: 'in-memory' | 'session-storage' | 'off';\n\n  /**\n   * If true, Sentry will consistently sample subsequent traces based on the\n   * sampling decision of the initial trace. For example, if the initial page\n   * load trace was sampled positively, all subsequent traces (e.g. navigations)\n   * are also sampled positively. In case the initial trace was sampled negatively,\n   * all subsequent traces are also sampled negatively.\n   *\n   * This option allows you to get consistent, linked traces within a user journey\n   * while maintaining an overall quota based on your trace sampling settings.\n   *\n   * This option is only effective if {@link BrowserTracingOptions.linkPreviousTrace}\n   * is enabled (i.e. not set to `'off'`).\n   *\n   * @default `false` - this is an opt-in feature.\n   */\n  consistentTraceSampling: boolean;\n\n  /**\n   * _experiments allows the user to send options to define how this integration works.\n   *\n   * Default: undefined\n   */\n  _experiments: Partial<{\n    enableInteractions: boolean;\n    enableStandaloneClsSpans: boolean;\n    enableStandaloneLcpSpans: boolean;\n  }>;\n\n  /**\n   * A callback which is called before a span for a pageload or navigation is started.\n   * It receives the options passed to `startSpan`, and expects to return an updated options object.\n   */\n  beforeStartSpan?: (options: StartSpanOptions) => StartSpanOptions;\n\n  /**\n   * This function will be called before creating a span for a request with the given url.\n   * Return false if you don't want a span for the given url.\n   *\n   * Default: (url: string) => true\n   */\n  shouldCreateSpanForRequest?(this: void, url: string): boolean;\n\n  /**\n   * This callback is invoked directly after a span is started for an outgoing fetch or XHR request.\n   * You can use it to annotate the span with additional data or attributes, for example by setting\n   * attributes based on the passed request headers.\n   */\n  onRequestSpanStart?(span: Span, requestInformation: { headers?: WebFetchHeaders }): void;\n}\n\nconst DEFAULT_BROWSER_TRACING_OPTIONS: BrowserTracingOptions = {\n  ...TRACING_DEFAULTS,\n  instrumentNavigation: true,\n  instrumentPageLoad: true,\n  markBackgroundSpan: true,\n  enableLongTask: true,\n  enableLongAnimationFrame: true,\n  enableInp: true,\n  enableElementTiming: true,\n  ignoreResourceSpans: [],\n  ignorePerformanceApiSpans: [],\n  detectRedirects: true,\n  linkPreviousTrace: 'in-memory',\n  consistentTraceSampling: false,\n  _experiments: {},\n  ...defaultRequestInstrumentationOptions,\n};\n\n/**\n * The Browser Tracing integration automatically instruments browser pageload/navigation\n * actions as transactions, and captures requests, metrics and errors as spans.\n *\n * The integration can be configured with a variety of options, and can be extended to use\n * any routing library.\n *\n * We explicitly export the proper type here, as this has to be extended in some cases.\n */\nexport const browserTracingIntegration = ((_options: Partial<BrowserTracingOptions> = {}) => {\n  const latestRoute: RouteInfo = {\n    name: undefined,\n    source: undefined,\n  };\n\n  /**\n   * This is just a small wrapper that makes `document` optional.\n   * We want to be extra-safe and always check that this exists, to ensure weird environments do not blow up.\n   */\n  const optionalWindowDocument = WINDOW.document as (typeof WINDOW)['document'] | undefined;\n\n  const {\n    enableInp,\n    enableElementTiming,\n    enableLongTask,\n    enableLongAnimationFrame,\n    _experiments: { enableInteractions, enableStandaloneClsSpans, enableStandaloneLcpSpans },\n    beforeStartSpan,\n    idleTimeout,\n    finalTimeout,\n    childSpanTimeout,\n    markBackgroundSpan,\n    traceFetch,\n    traceXHR,\n    trackFetchStreamPerformance,\n    shouldCreateSpanForRequest,\n    enableHTTPTimings,\n    ignoreResourceSpans,\n    ignorePerformanceApiSpans,\n    instrumentPageLoad,\n    instrumentNavigation,\n    detectRedirects,\n    linkPreviousTrace,\n    consistentTraceSampling,\n    onRequestSpanStart,\n  } = {\n    ...DEFAULT_BROWSER_TRACING_OPTIONS,\n    ..._options,\n  };\n\n  let _collectWebVitals: undefined | (() => void);\n  let lastInteractionTimestamp: number | undefined;\n\n  /** Create routing idle transaction. */\n  function _createRouteSpan(client: Client, startSpanOptions: StartSpanOptions, makeActive = true): void {\n    const isPageloadTransaction = startSpanOptions.op === 'pageload';\n\n    const finalStartSpanOptions: StartSpanOptions = beforeStartSpan\n      ? beforeStartSpan(startSpanOptions)\n      : startSpanOptions;\n\n    const attributes = finalStartSpanOptions.attributes || {};\n\n    // If `finalStartSpanOptions.name` is different than `startSpanOptions.name`\n    // it is because `beforeStartSpan` set a custom name. Therefore we set the source to 'custom'.\n    if (startSpanOptions.name !== finalStartSpanOptions.name) {\n      attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] = 'custom';\n      finalStartSpanOptions.attributes = attributes;\n    }\n\n    if (!makeActive) {\n      // We want to ensure this has 0s duration\n      const now = dateTimestampInSeconds();\n      startInactiveSpan({\n        ...finalStartSpanOptions,\n        startTime: now,\n      }).end(now);\n      return;\n    }\n\n    latestRoute.name = finalStartSpanOptions.name;\n    latestRoute.source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    const idleSpan = startIdleSpan(finalStartSpanOptions, {\n      idleTimeout,\n      finalTimeout,\n      childSpanTimeout,\n      // should wait for finish signal if it's a pageload transaction\n      disableAutoFinish: isPageloadTransaction,\n      beforeSpanEnd: span => {\n        // This will generally always be defined here, because it is set in `setup()` of the integration\n        // but technically, it is optional, so we guard here to be extra safe\n        _collectWebVitals?.();\n        addPerformanceEntries(span, {\n          recordClsOnPageloadSpan: !enableStandaloneClsSpans,\n          recordLcpOnPageloadSpan: !enableStandaloneLcpSpans,\n          ignoreResourceSpans,\n          ignorePerformanceApiSpans,\n        });\n        setActiveIdleSpan(client, undefined);\n\n        // A trace should stay consistent over the entire timespan of one route - even after the pageload/navigation ended.\n        // Only when another navigation happens, we want to create a new trace.\n        // This way, e.g. errors that occur after the pageload span ended are still associated to the pageload trace.\n        const scope = getCurrentScope();\n        const oldPropagationContext = scope.getPropagationContext();\n\n        scope.setPropagationContext({\n          ...oldPropagationContext,\n          traceId: idleSpan.spanContext().traceId,\n          sampled: spanIsSampled(idleSpan),\n          dsc: getDynamicSamplingContextFromSpan(span),\n        });\n      },\n    });\n\n    setActiveIdleSpan(client, idleSpan);\n\n    function emitFinish(): void {\n      if (optionalWindowDocument && ['interactive', 'complete'].includes(optionalWindowDocument.readyState)) {\n        client.emit('idleSpanEnableAutoFinish', idleSpan);\n      }\n    }\n\n    if (isPageloadTransaction && optionalWindowDocument) {\n      optionalWindowDocument.addEventListener('readystatechange', () => {\n        emitFinish();\n      });\n\n      emitFinish();\n    }\n  }\n\n  return {\n    name: BROWSER_TRACING_INTEGRATION_ID,\n    setup(client) {\n      registerSpanErrorInstrumentation();\n\n      _collectWebVitals = startTrackingWebVitals({\n        recordClsStandaloneSpans: enableStandaloneClsSpans || false,\n        recordLcpStandaloneSpans: enableStandaloneLcpSpans || false,\n        client,\n      });\n\n      if (enableInp) {\n        startTrackingINP();\n      }\n\n      if (enableElementTiming) {\n        startTrackingElementTiming();\n      }\n\n      if (\n        enableLongAnimationFrame &&\n        GLOBAL_OBJ.PerformanceObserver &&\n        PerformanceObserver.supportedEntryTypes &&\n        PerformanceObserver.supportedEntryTypes.includes('long-animation-frame')\n      ) {\n        startTrackingLongAnimationFrames();\n      } else if (enableLongTask) {\n        startTrackingLongTasks();\n      }\n\n      if (enableInteractions) {\n        startTrackingInteractions();\n      }\n\n      if (detectRedirects && optionalWindowDocument) {\n        const interactionHandler = (): void => {\n          lastInteractionTimestamp = timestampInSeconds();\n        };\n        addEventListener('click', interactionHandler, { capture: true });\n        addEventListener('keydown', interactionHandler, { capture: true, passive: true });\n      }\n\n      function maybeEndActiveSpan(): void {\n        const activeSpan = getActiveIdleSpan(client);\n\n        if (activeSpan && !spanToJSON(activeSpan).timestamp) {\n          DEBUG_BUILD && debug.log(`[Tracing] Finishing current active span with op: ${spanToJSON(activeSpan).op}`);\n          // If there's an open active span, we need to finish it before creating an new one.\n          activeSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, 'cancelled');\n          activeSpan.end();\n        }\n      }\n\n      client.on('startNavigationSpan', (startSpanOptions, navigationOptions) => {\n        if (getClient() !== client) {\n          return;\n        }\n\n        if (navigationOptions?.isRedirect) {\n          DEBUG_BUILD &&\n            debug.warn('[Tracing] Detected redirect, navigation span will not be the root span, but a child span.');\n          _createRouteSpan(\n            client,\n            {\n              op: 'navigation.redirect',\n              ...startSpanOptions,\n            },\n            false,\n          );\n          return;\n        }\n\n        maybeEndActiveSpan();\n\n        getIsolationScope().setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });\n\n        const scope = getCurrentScope();\n        scope.setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });\n        // We reset this to ensure we do not have lingering incorrect data here\n        // places that call this hook may set this where appropriate - else, the URL at span sending time is used\n        scope.setSDKProcessingMetadata({\n          normalizedRequest: undefined,\n        });\n\n        _createRouteSpan(client, {\n          op: 'navigation',\n          ...startSpanOptions,\n        });\n      });\n\n      client.on('startPageLoadSpan', (startSpanOptions, traceOptions = {}) => {\n        if (getClient() !== client) {\n          return;\n        }\n        maybeEndActiveSpan();\n\n        const sentryTrace = traceOptions.sentryTrace || getMetaContent('sentry-trace');\n        const baggage = traceOptions.baggage || getMetaContent('baggage');\n\n        const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n\n        const scope = getCurrentScope();\n        scope.setPropagationContext(propagationContext);\n\n        // We store the normalized request data on the scope, so we get the request data at time of span creation\n        // otherwise, the URL etc. may already be of the following navigation, and we'd report the wrong URL\n        scope.setSDKProcessingMetadata({\n          normalizedRequest: getHttpRequestData(),\n        });\n\n        _createRouteSpan(client, {\n          op: 'pageload',\n          ...startSpanOptions,\n        });\n      });\n    },\n    afterAllSetup(client) {\n      let startingUrl: string | undefined = getLocationHref();\n\n      if (linkPreviousTrace !== 'off') {\n        linkTraces(client, { linkPreviousTrace, consistentTraceSampling });\n      }\n\n      if (WINDOW.location) {\n        if (instrumentPageLoad) {\n          const origin = browserPerformanceTimeOrigin();\n          startBrowserTracingPageLoadSpan(client, {\n            name: WINDOW.location.pathname,\n            // pageload should always start at timeOrigin (and needs to be in s, not ms)\n            startTime: origin ? origin / 1000 : undefined,\n            attributes: {\n              [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n              [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.pageload.browser',\n            },\n          });\n        }\n\n        if (instrumentNavigation) {\n          addHistoryInstrumentationHandler(({ to, from }) => {\n            /**\n             * This early return is there to account for some cases where a navigation transaction starts right after\n             * long-running pageload. We make sure that if `from` is undefined and a valid `startingURL` exists, we don't\n             * create an uneccessary navigation transaction.\n             *\n             * This was hard to duplicate, but this behavior stopped as soon as this fix was applied. This issue might also\n             * only be caused in certain development environments where the usage of a hot module reloader is causing\n             * errors.\n             */\n            if (from === undefined && startingUrl?.indexOf(to) !== -1) {\n              startingUrl = undefined;\n              return;\n            }\n\n            startingUrl = undefined;\n            const parsed = parseStringToURLObject(to);\n            const activeSpan = getActiveIdleSpan(client);\n            const navigationIsRedirect =\n              activeSpan && detectRedirects && isRedirect(activeSpan, lastInteractionTimestamp);\n            startBrowserTracingNavigationSpan(\n              client,\n              {\n                name: parsed?.pathname || WINDOW.location.pathname,\n                attributes: {\n                  [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: 'url',\n                  [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.navigation.browser',\n                },\n              },\n              { url: to, isRedirect: navigationIsRedirect },\n            );\n          });\n        }\n      }\n\n      if (markBackgroundSpan) {\n        registerBackgroundTabDetection();\n      }\n\n      if (enableInteractions) {\n        registerInteractionListener(client, idleTimeout, finalTimeout, childSpanTimeout, latestRoute);\n      }\n\n      if (enableInp) {\n        registerInpInteractionListener();\n      }\n\n      instrumentOutgoingRequests(client, {\n        traceFetch,\n        traceXHR,\n        trackFetchStreamPerformance,\n        tracePropagationTargets: client.getOptions().tracePropagationTargets,\n        shouldCreateSpanForRequest,\n        enableHTTPTimings,\n        onRequestSpanStart,\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Manually start a page load span.\n * This will only do something if a browser tracing integration integration has been setup.\n *\n * If you provide a custom `traceOptions` object, it will be used to continue the trace\n * instead of the default behavior, which is to look it up on the <meta> tags.\n */\nexport function startBrowserTracingPageLoadSpan(\n  client: Client,\n  spanOptions: StartSpanOptions,\n  traceOptions?: { sentryTrace?: string | undefined; baggage?: string | undefined },\n): Span | undefined {\n  client.emit('startPageLoadSpan', spanOptions, traceOptions);\n  getCurrentScope().setTransactionName(spanOptions.name);\n\n  const pageloadSpan = getActiveIdleSpan(client);\n\n  if (pageloadSpan) {\n    client.emit('afterStartPageLoadSpan', pageloadSpan);\n  }\n\n  return pageloadSpan;\n}\n\n/**\n * Manually start a navigation span.\n * This will only do something if a browser tracing integration has been setup.\n */\nexport function startBrowserTracingNavigationSpan(\n  client: Client,\n  spanOptions: StartSpanOptions,\n  options?: { url?: string; isRedirect?: boolean },\n): Span | undefined {\n  const { url, isRedirect } = options || {};\n  client.emit('beforeStartNavigationSpan', spanOptions, { isRedirect });\n  client.emit('startNavigationSpan', spanOptions, { isRedirect });\n\n  const scope = getCurrentScope();\n  scope.setTransactionName(spanOptions.name);\n\n  // We store the normalized request data on the scope, so we get the request data at time of span creation\n  // otherwise, the URL etc. may already be of the following navigation, and we'd report the wrong URL\n  if (url && !isRedirect) {\n    scope.setSDKProcessingMetadata({\n      normalizedRequest: {\n        ...getHttpRequestData(),\n        url,\n      },\n    });\n  }\n\n  return getActiveIdleSpan(client);\n}\n\n/** Returns the value of a meta tag */\nexport function getMetaContent(metaName: string): string | undefined {\n  /**\n   * This is just a small wrapper that makes `document` optional.\n   * We want to be extra-safe and always check that this exists, to ensure weird environments do not blow up.\n   */\n  const optionalWindowDocument = WINDOW.document as (typeof WINDOW)['document'] | undefined;\n\n  const metaTag = optionalWindowDocument?.querySelector(`meta[name=${metaName}]`);\n  return metaTag?.getAttribute('content') || undefined;\n}\n\n/** Start listener for interaction transactions */\nfunction registerInteractionListener(\n  client: Client,\n  idleTimeout: BrowserTracingOptions['idleTimeout'],\n  finalTimeout: BrowserTracingOptions['finalTimeout'],\n  childSpanTimeout: BrowserTracingOptions['childSpanTimeout'],\n  latestRoute: RouteInfo,\n): void {\n  /**\n   * This is just a small wrapper that makes `document` optional.\n   * We want to be extra-safe and always check that this exists, to ensure weird environments do not blow up.\n   */\n  const optionalWindowDocument = WINDOW.document as (typeof WINDOW)['document'] | undefined;\n\n  let inflightInteractionSpan: Span | undefined;\n  const registerInteractionTransaction = (): void => {\n    const op = 'ui.action.click';\n\n    const activeIdleSpan = getActiveIdleSpan(client);\n    if (activeIdleSpan) {\n      const currentRootSpanOp = spanToJSON(activeIdleSpan).op;\n      if (['navigation', 'pageload'].includes(currentRootSpanOp as string)) {\n        DEBUG_BUILD &&\n          debug.warn(`[Tracing] Did not create ${op} span because a pageload or navigation span is in progress.`);\n        return undefined;\n      }\n    }\n\n    if (inflightInteractionSpan) {\n      inflightInteractionSpan.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_IDLE_SPAN_FINISH_REASON, 'interactionInterrupted');\n      inflightInteractionSpan.end();\n      inflightInteractionSpan = undefined;\n    }\n\n    if (!latestRoute.name) {\n      DEBUG_BUILD && debug.warn(`[Tracing] Did not create ${op} transaction because _latestRouteName is missing.`);\n      return undefined;\n    }\n\n    inflightInteractionSpan = startIdleSpan(\n      {\n        name: latestRoute.name,\n        op,\n        attributes: {\n          [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: latestRoute.source || 'url',\n        },\n      },\n      {\n        idleTimeout,\n        finalTimeout,\n        childSpanTimeout,\n      },\n    );\n  };\n\n  if (optionalWindowDocument) {\n    addEventListener('click', registerInteractionTransaction, { capture: true });\n  }\n}\n\n// We store the active idle span on the client object, so we can access it from exported functions\nconst ACTIVE_IDLE_SPAN_PROPERTY = '_sentry_idleSpan';\nfunction getActiveIdleSpan(client: Client): Span | undefined {\n  return (client as { [ACTIVE_IDLE_SPAN_PROPERTY]?: Span })[ACTIVE_IDLE_SPAN_PROPERTY];\n}\n\nfunction setActiveIdleSpan(client: Client, span: Span | undefined): void {\n  addNonEnumerableProperty(client, ACTIVE_IDLE_SPAN_PROPERTY, span);\n}\n\n// The max. time in seconds between two pageload/navigation spans that makes us consider the second one a redirect\nconst REDIRECT_THRESHOLD = 0.3;\n\nfunction isRedirect(activeSpan: Span, lastInteractionTimestamp: number | undefined): boolean {\n  const spanData = spanToJSON(activeSpan);\n\n  const now = dateTimestampInSeconds();\n\n  // More than 300ms since last navigation/pageload span?\n  // --> never consider this a redirect\n  const startTimestamp = spanData.start_timestamp;\n  if (now - startTimestamp > REDIRECT_THRESHOLD) {\n    return false;\n  }\n\n  // A click happened in the last 300ms?\n  // --> never consider this a redirect\n  if (lastInteractionTimestamp && now - lastInteractionTimestamp <= REDIRECT_THRESHOLD) {\n    return false;\n  }\n\n  return true;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}