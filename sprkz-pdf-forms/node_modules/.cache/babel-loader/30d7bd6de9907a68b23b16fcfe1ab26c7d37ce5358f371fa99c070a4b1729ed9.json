{"ast":null,"code":"import React,{createContext,useContext,useReducer,useCallback,useEffect}from'react';import{useForm}from'./FormContext';import{useFeatureFlag}from'../hooks/useFeatureFlags';// Wizard States\n// Wizard Button States\n// Wizard Context State\n// Wizard Actions\n// Wizard Context Type\nimport{jsx as _jsx}from\"react/jsx-runtime\";const WizardContext=/*#__PURE__*/createContext(undefined);// Initial state\nconst initialState={wizardState:'idle',currentFieldIndex:-1,currentField:null,requiredFields:[],signatureFields:[],completedFields:[],totalRequiredFields:0,completionPercentage:0,isFormValid:false,showFieldTooltip:false,tooltipField:null};// Wizard reducer\nfunction wizardReducer(state,action){switch(action.type){case'INITIALIZE':{const{requiredFields,signatureFields}=action.payload;return{...state,requiredFields,signatureFields,totalRequiredFields:requiredFields.length,wizardState:'start'};}case'SET_WIZARD_STATE':{return{...state,wizardState:action.payload};}case'SET_CURRENT_FIELD':{const{field,index}=action.payload;return{...state,currentField:field,currentFieldIndex:index};}case'FIELD_COMPLETED':{const fieldName=action.payload;const completedFields=[...state.completedFields];if(!completedFields.includes(fieldName)){completedFields.push(fieldName);}return{...state,completedFields,completionPercentage:Math.round(completedFields.length/Math.max(state.totalRequiredFields,1)*100)};}case'UPDATE_PROGRESS':{const{completed,percentage}=action.payload;return{...state,completedFields:completed,completionPercentage:percentage};}case'SET_FORM_VALID':{return{...state,isFormValid:action.payload};}case'SHOW_TOOLTIP':{return{...state,showFieldTooltip:true,tooltipField:action.payload};}case'HIDE_TOOLTIP':{return{...state,showFieldTooltip:false,tooltipField:null};}case'RESET_WIZARD':{return{...initialState};}default:return state;}}// Wizard Provider\nexport const WizardProvider=_ref=>{let{children}=_ref;const[state,dispatch]=useReducer(wizardReducer,initialState);const formContext=useForm();// Feature flags for wizard behavior\nconst{isEnabled:enhancedWizardMode}=useFeatureFlag('ENHANCED_WIZARD_MODE');const{isEnabled:progressiveFormFilling}=useFeatureFlag('PROGRESSIVE_FORM_FILLING');const{isEnabled:smartFieldDetection}=useFeatureFlag('SMART_FIELD_DETECTION');// Show field tooltip\nconst showFieldTooltip=useCallback(field=>{dispatch({type:'SHOW_TOOLTIP',payload:field});},[]);// Hide field tooltip\nconst hideFieldTooltip=useCallback(()=>{dispatch({type:'HIDE_TOOLTIP'});},[]);// Initialize wizard with form fields\nconst initializeWizard=useCallback(allFields=>{const requiredFields=allFields.filter(field=>field.required&&!field.readOnly);const signatureFields=allFields.filter(field=>field.type==='signature'||field.name.toLowerCase().includes('signature')||field.name.toLowerCase().includes('sign'));dispatch({type:'INITIALIZE',payload:{requiredFields,signatureFields}});},[]);// Start the wizard\nconst startWizard=useCallback(()=>{const firstIncompleteField=state.requiredFields.find(field=>!state.completedFields.includes(field.name));if(firstIncompleteField){dispatch({type:'SET_CURRENT_FIELD',payload:{field:firstIncompleteField,index:0}});dispatch({type:'SET_WIZARD_STATE',payload:'next'});// Show tooltip for the field\nshowFieldTooltip(firstIncompleteField);}else{// All required fields complete, check signatures\nif(state.signatureFields.length>0){dispatch({type:'SET_WIZARD_STATE',payload:'sign'});}else{dispatch({type:'SET_WIZARD_STATE',payload:'submit'});}}},[state.requiredFields,state.completedFields,state.signatureFields,showFieldTooltip]);// Navigate to next field\nconst nextField=useCallback(()=>{const incompleteRequired=state.requiredFields.filter(field=>!state.completedFields.includes(field.name));if(incompleteRequired.length>0){const nextField=incompleteRequired[0];const fieldIndex=state.requiredFields.findIndex(f=>f.name===nextField.name);dispatch({type:'SET_CURRENT_FIELD',payload:{field:nextField,index:fieldIndex}});showFieldTooltip(nextField);}else{// All required fields complete\nif(state.signatureFields.length>0){const incompleteSignatures=state.signatureFields.filter(field=>!state.completedFields.includes(field.name));if(incompleteSignatures.length>0){dispatch({type:'SET_WIZARD_STATE',payload:'sign'});const firstSignature=incompleteSignatures[0];dispatch({type:'SET_CURRENT_FIELD',payload:{field:firstSignature,index:0}});showFieldTooltip(firstSignature);}else{dispatch({type:'SET_WIZARD_STATE',payload:'submit'});}}else{dispatch({type:'SET_WIZARD_STATE',payload:'submit'});}}},[state.requiredFields,state.signatureFields,state.completedFields,showFieldTooltip]);// Go to signature fields\nconst goToSignatures=useCallback(()=>{if(state.signatureFields.length>0){const firstIncompleteSignature=state.signatureFields.find(field=>!state.completedFields.includes(field.name));if(firstIncompleteSignature){dispatch({type:'SET_CURRENT_FIELD',payload:{field:firstIncompleteSignature,index:0}});dispatch({type:'SET_WIZARD_STATE',payload:'sign'});showFieldTooltip(firstIncompleteSignature);}else{// All signatures complete\ndispatch({type:'SET_WIZARD_STATE',payload:'submit'});}}},[state.signatureFields,state.completedFields,showFieldTooltip]);// Submit form\nconst submitForm=useCallback(()=>{if(state.isFormValid){dispatch({type:'SET_WIZARD_STATE',payload:'complete'});console.log('Form submitted successfully!');// TODO: Implement actual form submission in Phase 7\nalert('Form submission will be implemented in Phase 7. All fields completed!');}else{console.warn('Form is not valid for submission');}},[state.isFormValid]);// Jump to specific field\nconst jumpToField=useCallback(field=>{const fieldIndex=state.requiredFields.findIndex(f=>f.name===field.name);dispatch({type:'SET_CURRENT_FIELD',payload:{field,index:fieldIndex>=0?fieldIndex:0}});// Update wizard state based on field type\nif(field.type==='signature'){dispatch({type:'SET_WIZARD_STATE',payload:'sign'});}else if(field.required){dispatch({type:'SET_WIZARD_STATE',payload:'next'});}showFieldTooltip(field);},[state.requiredFields,showFieldTooltip]);// Mark field as complete\nconst markFieldComplete=useCallback(fieldName=>{dispatch({type:'FIELD_COMPLETED',payload:fieldName});// Update form context as well\nformContext.markFieldComplete(fieldName);},[formContext]);// Get current button state\nconst getCurrentButtonState=useCallback(()=>{switch(state.wizardState){case'idle':case'start':return{text:'Start',color:'primary',// Blue\ndisabled:state.totalRequiredFields===0,action:startWizard};case'next':{const incompleteRequired=state.requiredFields.filter(field=>!state.completedFields.includes(field.name));if(incompleteRequired.length>0){return{text:'Next',color:'secondary',// Orange\ndisabled:false,action:nextField};}else{// All required complete, check signatures\nif(state.signatureFields.length>0){return{text:'Sign',color:'info',// Purple\ndisabled:false,action:goToSignatures};}else{return{text:'Submit',color:'success',// Green\ndisabled:!state.isFormValid,action:submitForm};}}}case'sign':{const incompleteSignatures=state.signatureFields.filter(field=>!state.completedFields.includes(field.name));if(incompleteSignatures.length>0){return{text:'Sign',color:'info',// Purple\ndisabled:false,action:nextField};}else{return{text:'Submit',color:'success',// Green\ndisabled:!state.isFormValid,action:submitForm};}}case'submit':return{text:'Submit',color:'success',// Green\ndisabled:!state.isFormValid,action:submitForm};case'complete':return{text:'Complete',color:'success',// Green\ndisabled:true,action:()=>{}};default:return{text:'Start',color:'primary',disabled:true,action:startWizard};}},[state.wizardState,state.requiredFields,state.signatureFields,state.completedFields,state.isFormValid,state.totalRequiredFields,startWizard,nextField,goToSignatures,submitForm]);// Reset wizard\nconst resetWizard=useCallback(()=>{dispatch({type:'RESET_WIZARD'});},[]);// Update form validity when form context changes\nuseEffect(()=>{const formValid=formContext.isFormValid();dispatch({type:'SET_FORM_VALID',payload:formValid});},[formContext]);// Update completion progress when form context changes\nuseEffect(()=>{const percentage=formContext.getCompletionPercentage();const{completed}=formContext.getRequiredFieldsStatus();dispatch({type:'UPDATE_PROGRESS',payload:{completed:Array.from(formContext.state.fields.keys()).filter(fieldName=>formContext.state.completedFields.includes(fieldName)),percentage}});},[formContext]);const contextValue={state,startWizard,nextField,goToSignatures,submitForm,jumpToField,markFieldComplete,getCurrentButtonState,showFieldTooltip,hideFieldTooltip,resetWizard,initializeWizard};return/*#__PURE__*/_jsx(WizardContext.Provider,{value:contextValue,children:children});};// Hook to use wizard context\nexport const useWizard=()=>{const context=useContext(WizardContext);if(context===undefined){throw new Error('useWizard must be used within a WizardProvider');}return context;};","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}