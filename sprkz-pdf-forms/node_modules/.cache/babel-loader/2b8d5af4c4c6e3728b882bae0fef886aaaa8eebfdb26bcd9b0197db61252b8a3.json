{"ast":null,"code":"import { getClient, getIsolationScope } from './currentScopes.js';\nimport { consoleSandbox } from './utils/debug-logger.js';\nimport { dateTimestampInSeconds } from './utils/time.js';\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nfunction addBreadcrumb(breadcrumb, hint) {\n  const client = getClient();\n  const isolationScope = getIsolationScope();\n  if (!client) return;\n  const {\n    beforeBreadcrumb = null,\n    maxBreadcrumbs = DEFAULT_BREADCRUMBS\n  } = client.getOptions();\n  if (maxBreadcrumbs <= 0) return;\n  const timestamp = dateTimestampInSeconds();\n  const mergedBreadcrumb = {\n    timestamp,\n    ...breadcrumb\n  };\n  const finalBreadcrumb = beforeBreadcrumb ? consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) : mergedBreadcrumb;\n  if (finalBreadcrumb === null) return;\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\nexport { addBreadcrumb };","map":{"version":3,"names":["DEFAULT_BREADCRUMBS","addBreadcrumb","breadcrumb","hint","client","getClient","isolationScope","getIsolationScope","beforeBreadcrumb","maxBreadcrumbs","getOptions","timestamp","dateTimestampInSeconds","mergedBreadcrumb","finalBreadcrumb","consoleSandbox","emit"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/breadcrumbs.ts"],"sourcesContent":["import { getClient, getIsolationScope } from './currentScopes';\nimport type { Breadcrumb, BreadcrumbHint } from './types-hoist/breadcrumb';\nimport { consoleSandbox } from './utils/debug-logger';\nimport { dateTimestampInSeconds } from './utils/time';\n\n/**\n * Default maximum number of breadcrumbs added to an event. Can be overwritten\n * with {@link Options.maxBreadcrumbs}.\n */\nconst DEFAULT_BREADCRUMBS = 100;\n\n/**\n * Records a new breadcrumb which will be attached to future events.\n *\n * Breadcrumbs will be added to subsequent events to provide more context on\n * user's actions prior to an error or crash.\n */\nexport function addBreadcrumb(breadcrumb: Breadcrumb, hint?: BreadcrumbHint): void {\n  const client = getClient();\n  const isolationScope = getIsolationScope();\n\n  if (!client) return;\n\n  const { beforeBreadcrumb = null, maxBreadcrumbs = DEFAULT_BREADCRUMBS } = client.getOptions();\n\n  if (maxBreadcrumbs <= 0) return;\n\n  const timestamp = dateTimestampInSeconds();\n  const mergedBreadcrumb = { timestamp, ...breadcrumb };\n  const finalBreadcrumb = beforeBreadcrumb\n    ? (consoleSandbox(() => beforeBreadcrumb(mergedBreadcrumb, hint)) as Breadcrumb | null)\n    : mergedBreadcrumb;\n\n  if (finalBreadcrumb === null) return;\n\n  if (client.emit) {\n    client.emit('beforeAddBreadcrumb', finalBreadcrumb, hint);\n  }\n\n  isolationScope.addBreadcrumb(finalBreadcrumb, maxBreadcrumbs);\n}\n"],"mappings":";;;;AAKA;AACA;AACA;AACA;AACA,MAAMA,mBAAA,GAAsB,GAAG;;AAE/B;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,aAAaA,CAACC,UAAU,EAAcC,IAAI,EAAyB;EACjF,MAAMC,MAAA,GAASC,SAAS,EAAE;EAC1B,MAAMC,cAAA,GAAiBC,iBAAiB,EAAE;EAE1C,IAAI,CAACH,MAAM,EAAE;EAEb,MAAM;IAAEI,gBAAA,GAAmB,IAAI;IAAEC,cAAA,GAAiBT;EAAA,IAAwBI,MAAM,CAACM,UAAU,EAAE;EAE7F,IAAID,cAAA,IAAkB,CAAC,EAAE;EAEzB,MAAME,SAAA,GAAYC,sBAAsB,EAAE;EAC1C,MAAMC,gBAAA,GAAmB;IAAEF,SAAS;IAAE,GAAGT;EAAA,CAAY;EACrD,MAAMY,eAAA,GAAkBN,gBAAA,GACnBO,cAAc,CAAC,MAAMP,gBAAgB,CAACK,gBAAgB,EAAEV,IAAI,CAAC,IAC9DU,gBAAgB;EAEpB,IAAIC,eAAA,KAAoB,IAAI,EAAE;EAE9B,IAAIV,MAAM,CAACY,IAAI,EAAE;IACfZ,MAAM,CAACY,IAAI,CAAC,qBAAqB,EAAEF,eAAe,EAAEX,IAAI,CAAC;EAC7D;EAEEG,cAAc,CAACL,aAAa,CAACa,eAAe,EAAEL,cAAc,CAAC;AAC/D","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}