{"ast":null,"code":"import { defineIntegration, GLOBAL_OBJ, stripUrlQueryAndFragment, addContextToFrame } from '@sentry/core';\nconst WINDOW = GLOBAL_OBJ;\nconst DEFAULT_LINES_OF_CONTEXT = 7;\nconst INTEGRATION_NAME = 'ContextLines';\nconst _contextLinesIntegration = (options = {}) => {\n  const contextLines = options.frameContextLines != null ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    }\n  };\n};\n\n/**\n * Collects source context lines around the lines of stackframes pointing to JS embedded in\n * the current page's HTML.\n *\n * This integration DOES NOT work for stack frames pointing to JS files that are loaded by the browser.\n * For frames pointing to files, context lines are added during ingestion and symbolication\n * by attempting to download the JS files to the Sentry backend.\n *\n * Use this integration if you have inline JS code in HTML pages that can't be accessed\n * by our backend (e.g. due to a login-protected page).\n */\nconst contextLinesIntegration = defineIntegration(_contextLinesIntegration);\n\n/**\n * Processes an event and adds context lines.\n */\nfunction addSourceContext(event, contextLines) {\n  const doc = WINDOW.document;\n  const htmlFilename = WINDOW.location && stripUrlQueryAndFragment(WINDOW.location.href);\n  if (!doc || !htmlFilename) {\n    return event;\n  }\n  const exceptions = event.exception?.values;\n  if (!exceptions?.length) {\n    return event;\n  }\n  const html = doc.documentElement.innerHTML;\n  if (!html) {\n    return event;\n  }\n  const htmlLines = ['<!DOCTYPE html>', '<html>', ...html.split('\\n'), '</html>'];\n  exceptions.forEach(exception => {\n    const stacktrace = exception.stacktrace;\n    if (stacktrace?.frames) {\n      stacktrace.frames = stacktrace.frames.map(frame => applySourceContextToFrame(frame, htmlLines, htmlFilename, contextLines));\n    }\n  });\n  return event;\n}\n\n/**\n * Only exported for testing\n */\nfunction applySourceContextToFrame(frame, htmlLines, htmlFilename, linesOfContext) {\n  if (frame.filename !== htmlFilename || !frame.lineno || !htmlLines.length) {\n    return frame;\n  }\n  addContextToFrame(htmlLines, frame, linesOfContext);\n  return frame;\n}\nexport { applySourceContextToFrame, contextLinesIntegration };","map":{"version":3,"names":["WINDOW","GLOBAL_OBJ","DEFAULT_LINES_OF_CONTEXT","INTEGRATION_NAME","_contextLinesIntegration","options","contextLines","frameContextLines","name","processEvent","event","addSourceContext","contextLinesIntegration","defineIntegration","doc","document","htmlFilename","location","stripUrlQueryAndFragment","href","exceptions","exception","values","length","html","documentElement","innerHTML","htmlLines","split","forEach","stacktrace","frames","map","frame","applySourceContextToFrame","linesOfContext","filename","lineno","addContextToFrame"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/integrations/contextlines.ts"],"sourcesContent":["import type { Event, IntegrationFn, StackFrame } from '@sentry/core';\nimport { addContextToFrame, defineIntegration, GLOBAL_OBJ, stripUrlQueryAndFragment } from '@sentry/core';\n\nconst WINDOW = GLOBAL_OBJ as typeof GLOBAL_OBJ & Window;\n\nconst DEFAULT_LINES_OF_CONTEXT = 7;\n\nconst INTEGRATION_NAME = 'ContextLines';\n\ninterface ContextLinesOptions {\n  /**\n   * Sets the number of context lines for each frame when loading a file.\n   * Defaults to 7.\n   *\n   * Set to 0 to disable loading and inclusion of source files.\n   **/\n  frameContextLines?: number;\n}\n\nconst _contextLinesIntegration = ((options: ContextLinesOptions = {}) => {\n  const contextLines = options.frameContextLines != null ? options.frameContextLines : DEFAULT_LINES_OF_CONTEXT;\n\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event) {\n      return addSourceContext(event, contextLines);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Collects source context lines around the lines of stackframes pointing to JS embedded in\n * the current page's HTML.\n *\n * This integration DOES NOT work for stack frames pointing to JS files that are loaded by the browser.\n * For frames pointing to files, context lines are added during ingestion and symbolication\n * by attempting to download the JS files to the Sentry backend.\n *\n * Use this integration if you have inline JS code in HTML pages that can't be accessed\n * by our backend (e.g. due to a login-protected page).\n */\nexport const contextLinesIntegration = defineIntegration(_contextLinesIntegration);\n\n/**\n * Processes an event and adds context lines.\n */\nfunction addSourceContext(event: Event, contextLines: number): Event {\n  const doc = WINDOW.document;\n  const htmlFilename = WINDOW.location && stripUrlQueryAndFragment(WINDOW.location.href);\n  if (!doc || !htmlFilename) {\n    return event;\n  }\n\n  const exceptions = event.exception?.values;\n  if (!exceptions?.length) {\n    return event;\n  }\n\n  const html = doc.documentElement.innerHTML;\n  if (!html) {\n    return event;\n  }\n\n  const htmlLines = ['<!DOCTYPE html>', '<html>', ...html.split('\\n'), '</html>'];\n\n  exceptions.forEach(exception => {\n    const stacktrace = exception.stacktrace;\n    if (stacktrace?.frames) {\n      stacktrace.frames = stacktrace.frames.map(frame =>\n        applySourceContextToFrame(frame, htmlLines, htmlFilename, contextLines),\n      );\n    }\n  });\n\n  return event;\n}\n\n/**\n * Only exported for testing\n */\nexport function applySourceContextToFrame(\n  frame: StackFrame,\n  htmlLines: string[],\n  htmlFilename: string,\n  linesOfContext: number,\n): StackFrame {\n  if (frame.filename !== htmlFilename || !frame.lineno || !htmlLines.length) {\n    return frame;\n  }\n\n  addContextToFrame(htmlLines, frame, linesOfContext);\n\n  return frame;\n}\n"],"mappings":";AAGA,MAAMA,MAAA,GAASC,UAAA;AAEf,MAAMC,wBAAA,GAA2B,CAAC;AAElC,MAAMC,gBAAA,GAAmB,cAAc;AAYvC,MAAMC,wBAAA,GAA4BA,CAACC,OAAO,GAAwB,EAAE,KAAK;EACvE,MAAMC,YAAA,GAAeD,OAAO,CAACE,iBAAA,IAAqB,OAAOF,OAAO,CAACE,iBAAA,GAAoBL,wBAAwB;EAE7G,OAAO;IACLM,IAAI,EAAEL,gBAAgB;IACtBM,YAAYA,CAACC,KAAK,EAAE;MAClB,OAAOC,gBAAgB,CAACD,KAAK,EAAEJ,YAAY,CAAC;IAClD;EACA,CAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaM,uBAAA,GAA0BC,iBAAiB,CAACT,wBAAwB;;AAEjF;AACA;AACA;AACA,SAASO,gBAAgBA,CAACD,KAAK,EAASJ,YAAY,EAAiB;EACnE,MAAMQ,GAAA,GAAMd,MAAM,CAACe,QAAQ;EAC3B,MAAMC,YAAA,GAAehB,MAAM,CAACiB,QAAA,IAAYC,wBAAwB,CAAClB,MAAM,CAACiB,QAAQ,CAACE,IAAI,CAAC;EACtF,IAAI,CAACL,GAAA,IAAO,CAACE,YAAY,EAAE;IACzB,OAAON,KAAK;EAChB;EAEE,MAAMU,UAAA,GAAaV,KAAK,CAACW,SAAS,EAAEC,MAAM;EAC1C,IAAI,CAACF,UAAU,EAAEG,MAAM,EAAE;IACvB,OAAOb,KAAK;EAChB;EAEE,MAAMc,IAAA,GAAOV,GAAG,CAACW,eAAe,CAACC,SAAS;EAC1C,IAAI,CAACF,IAAI,EAAE;IACT,OAAOd,KAAK;EAChB;EAEE,MAAMiB,SAAA,GAAY,CAAC,iBAAiB,EAAE,QAAQ,EAAE,GAAGH,IAAI,CAACI,KAAK,CAAC,IAAI,CAAC,EAAE,SAAS,CAAC;EAE/ER,UAAU,CAACS,OAAO,CAACR,SAAA,IAAa;IAC9B,MAAMS,UAAA,GAAaT,SAAS,CAACS,UAAU;IACvC,IAAIA,UAAU,EAAEC,MAAM,EAAE;MACtBD,UAAU,CAACC,MAAA,GAASD,UAAU,CAACC,MAAM,CAACC,GAAG,CAACC,KAAA,IACxCC,yBAAyB,CAACD,KAAK,EAAEN,SAAS,EAAEX,YAAY,EAAEV,YAAY,CAC9E,CAAO;IACP;EACA,CAAG,CAAC;EAEF,OAAOI,KAAK;AACd;;AAEA;AACA;AACA;AACO,SAASwB,yBAAyBA,CACvCD,KAAK,EACLN,SAAS,EACTX,YAAY,EACZmB,cAAc,EACF;EACZ,IAAIF,KAAK,CAACG,QAAA,KAAapB,YAAA,IAAgB,CAACiB,KAAK,CAACI,MAAA,IAAU,CAACV,SAAS,CAACJ,MAAM,EAAE;IACzE,OAAOU,KAAK;EAChB;EAEEK,iBAAiB,CAACX,SAAS,EAAEM,KAAK,EAAEE,cAAc,CAAC;EAEnD,OAAOF,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}