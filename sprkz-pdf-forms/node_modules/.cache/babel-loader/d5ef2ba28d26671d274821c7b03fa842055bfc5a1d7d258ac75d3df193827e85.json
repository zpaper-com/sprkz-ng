{"ast":null,"code":"import { DEBUG_BUILD } from './debug-build.js';\nimport { updateSession } from './session.js';\nimport { debug } from './utils/debug-logger.js';\nimport { isPlainObject } from './utils/is.js';\nimport { merge } from './utils/merge.js';\nimport { uuid4 } from './utils/misc.js';\nimport { generateTraceId } from './utils/propagationContext.js';\nimport { _setSpanForScope, _getSpanForScope } from './utils/spanOnScope.js';\nimport { truncate } from './utils/string.js';\nimport { dateTimestampInSeconds } from './utils/time.js';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * A context to be used for capturing an event.\n * This can either be a Scope, or a partial ScopeContext,\n * or a callback that receives the current scope and returns a new scope to use.\n */\n\n/**\n * Holds additional event information.\n */\nclass Scope {\n  /** Flag if notifying is happening. */\n\n  /** Callback for client to receive scope changes. */\n\n  /** Callback list that will be called during event processing. */\n\n  /** Array of breadcrumbs. */\n\n  /** User */\n\n  /** Tags */\n\n  /** Extra */\n\n  /** Contexts */\n\n  /** Attachments */\n\n  /** Propagation Context for distributed tracing */\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n\n  /** Fingerprint */\n\n  /** Severity */\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n\n  /** Session */\n\n  /** The client on this scope */\n\n  /** Contains the last event id of a captured event.  */\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: generateTraceId(),\n      sampleRand: Math.random()\n    };\n  }\n\n  /**\n   * Clone all data from this scope into a new scope.\n   */\n  clone() {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = {\n      ...this._tags\n    };\n    newScope._extra = {\n      ...this._extra\n    };\n    newScope._contexts = {\n      ...this._contexts\n    };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values]\n      };\n    }\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = {\n      ...this._sdkProcessingMetadata\n    };\n    newScope._propagationContext = {\n      ...this._propagationContext\n    };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n    _setSpanForScope(newScope, _getSpanForScope(this));\n    return newScope;\n  }\n\n  /**\n   * Update the client assigned to this scope.\n   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,\n   * as well as manually created scopes.\n   */\n  setClient(client) {\n    this._client = client;\n  }\n\n  /**\n   * Set the ID of the last captured error event.\n   * This is generally only captured on the isolation scope.\n   */\n  setLastEventId(lastEventId) {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   */\n  getClient() {\n    return this._client;\n  }\n\n  /**\n   * Get the ID of the last captured error event.\n   * This is generally only available on the isolation scope.\n   */\n  lastEventId() {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  addScopeListener(callback) {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * Add an event processor that will be called before an event is sent.\n   */\n  addEventProcessor(callback) {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * Set the user for this scope.\n   * Set to `null` to unset the user.\n   */\n  setUser(user) {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined\n    };\n    if (this._session) {\n      updateSession(this._session, {\n        user\n      });\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the user from this scope.\n   */\n  getUser() {\n    return this._user;\n  }\n\n  /**\n   * Set an object that will be merged into existing tags on the scope,\n   * and will be sent as tags data with the event.\n   */\n  setTags(tags) {\n    this._tags = {\n      ...this._tags,\n      ...tags\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single tag that will be sent as tags data with the event.\n   */\n  setTag(key, value) {\n    this._tags = {\n      ...this._tags,\n      [key]: value\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set an object that will be merged into existing extra on the scope,\n   * and will be sent as extra data with the event.\n   */\n  setExtras(extras) {\n    this._extra = {\n      ...this._extra,\n      ...extras\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single key:value extra entry that will be sent as extra data with the event.\n   */\n  setExtra(key, extra) {\n    this._extra = {\n      ...this._extra,\n      [key]: extra\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param {string[]} fingerprint Fingerprint to group events in Sentry.\n   */\n  setFingerprint(fingerprint) {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   */\n  setLevel(level) {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */\n  setTransactionName(name) {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets context data with the given name.\n   * Data passed as context will be normalized. You can also pass `null` to unset the context.\n   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.\n   */\n  setContext(key, context) {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set the session for the scope.\n   */\n  setSession(session) {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the session from the scope.\n   */\n  getSession() {\n    return this._session;\n  }\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   */\n  update(captureContext) {\n    if (!captureContext) {\n      return this;\n    }\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n    const scopeInstance = scopeToMerge instanceof Scope ? scopeToMerge.getScopeData() : isPlainObject(scopeToMerge) ? captureContext : undefined;\n    const {\n      tags,\n      extra,\n      user,\n      contexts,\n      level,\n      fingerprint = [],\n      propagationContext\n    } = scopeInstance || {};\n    this._tags = {\n      ...this._tags,\n      ...tags\n    };\n    this._extra = {\n      ...this._extra,\n      ...extra\n    };\n    this._contexts = {\n      ...this._contexts,\n      ...contexts\n    };\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n    if (level) {\n      this._level = level;\n    }\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n    return this;\n  }\n\n  /**\n   * Clears the current scope and resets its properties.\n   * Note: The client will not be cleared.\n   */\n  clear() {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._session = undefined;\n    _setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({\n      traceId: generateTraceId(),\n      sampleRand: Math.random()\n    });\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Adds a breadcrumb to the scope.\n   * By default, the last 100 breadcrumbs are kept.\n   */\n  addBreadcrumb(breadcrumb, maxBreadcrumbs) {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n    const mergedBreadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory\n      message: breadcrumb.message ? truncate(breadcrumb.message, 2048) : breadcrumb.message\n    };\n    this._breadcrumbs.push(mergedBreadcrumb);\n    if (this._breadcrumbs.length > maxCrumbs) {\n      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n      this._client?.recordDroppedEvent('buffer_overflow', 'log_item');\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the last breadcrumb of the scope.\n   */\n  getLastBreadcrumb() {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * Clear all breadcrumbs from the scope.\n   */\n  clearBreadcrumbs() {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Add an attachment to the scope.\n   */\n  addAttachment(attachment) {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * Clear all attachments from the scope.\n   */\n  clearAttachments() {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Get the data of this scope, which should be applied to an event during processing.\n   */\n  getScopeData() {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: _getSpanForScope(this)\n    };\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry.\n   */\n  setSDKProcessingMetadata(newData) {\n    this._sdkProcessingMetadata = merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * Add propagation context to the scope, used for distributed tracing\n   */\n  setPropagationContext(context) {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * Get propagation context from the scope, used for distributed tracing\n   */\n  getPropagationContext() {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @returns {string} The id of the captured Sentry event.\n   */\n  captureException(exception, hint) {\n    const eventId = hint?.event_id || uuid4();\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n    const syntheticException = new Error('Sentry syntheticException');\n    this._client.captureException(exception, {\n      originalException: exception,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @returns {string} The id of the captured message.\n   */\n  captureMessage(message, level, hint) {\n    const eventId = hint?.event_id || uuid4();\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n    const syntheticException = new Error(message);\n    this._client.captureMessage(message, level, {\n      originalException: message,\n      syntheticException,\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * Capture a Sentry event for this scope.\n   *\n   * @returns {string} The id of the captured event.\n   */\n  captureEvent(event, hint) {\n    const eventId = hint?.event_id || uuid4();\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n    this._client.captureEvent(event, {\n      ...hint,\n      event_id: eventId\n    }, this);\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  _notifyScopeListeners() {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\nexport { Scope };","map":{"version":3,"names":["DEFAULT_MAX_BREADCRUMBS","Scope","constructor","_notifyingListeners","_scopeListeners","_eventProcessors","_breadcrumbs","_attachments","_user","_tags","_extra","_contexts","_sdkProcessingMetadata","_propagationContext","traceId","generateTraceId","sampleRand","Math","random","clone","newScope","flags","values","_level","_session","_transactionName","_fingerprint","_client","_lastEventId","_setSpanForScope","_getSpanForScope","setClient","client","setLastEventId","lastEventId","getClient","addScopeListener","callback","push","addEventProcessor","setUser","user","email","undefined","id","ip_address","username","updateSession","_notifyScopeListeners","getUser","setTags","tags","setTag","key","value","setExtras","extras","setExtra","extra","setFingerprint","fingerprint","setLevel","level","setTransactionName","name","setContext","context","setSession","session","getSession","update","captureContext","scopeToMerge","scopeInstance","getScopeData","isPlainObject","contexts","propagationContext","Object","keys","length","clear","setPropagationContext","addBreadcrumb","breadcrumb","maxBreadcrumbs","maxCrumbs","mergedBreadcrumb","timestamp","dateTimestampInSeconds","message","truncate","slice","recordDroppedEvent","getLastBreadcrumb","clearBreadcrumbs","addAttachment","attachment","clearAttachments","breadcrumbs","attachments","eventProcessors","sdkProcessingMetadata","transactionName","span","setSDKProcessingMetadata","newData","merge","getPropagationContext","captureException","exception","hint","eventId","event_id","uuid4","DEBUG_BUILD","debug","warn","syntheticException","Error","originalException","captureMessage","captureEvent","event","forEach"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/scope.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport type { Client } from './client';\nimport { DEBUG_BUILD } from './debug-build';\nimport { updateSession } from './session';\nimport type { Attachment } from './types-hoist/attachment';\nimport type { Breadcrumb } from './types-hoist/breadcrumb';\nimport type { Context, Contexts } from './types-hoist/context';\nimport type { DynamicSamplingContext } from './types-hoist/envelope';\nimport type { Event, EventHint } from './types-hoist/event';\nimport type { EventProcessor } from './types-hoist/eventprocessor';\nimport type { Extra, Extras } from './types-hoist/extra';\nimport type { Primitive } from './types-hoist/misc';\nimport type { RequestEventData } from './types-hoist/request';\nimport type { Session } from './types-hoist/session';\nimport type { SeverityLevel } from './types-hoist/severity';\nimport type { Span } from './types-hoist/span';\nimport type { PropagationContext } from './types-hoist/tracing';\nimport type { User } from './types-hoist/user';\nimport { debug } from './utils/debug-logger';\nimport { isPlainObject } from './utils/is';\nimport { merge } from './utils/merge';\nimport { uuid4 } from './utils/misc';\nimport { generateTraceId } from './utils/propagationContext';\nimport { _getSpanForScope, _setSpanForScope } from './utils/spanOnScope';\nimport { truncate } from './utils/string';\nimport { dateTimestampInSeconds } from './utils/time';\n\n/**\n * Default value for maximum number of breadcrumbs added to an event.\n */\nconst DEFAULT_MAX_BREADCRUMBS = 100;\n\n/**\n * A context to be used for capturing an event.\n * This can either be a Scope, or a partial ScopeContext,\n * or a callback that receives the current scope and returns a new scope to use.\n */\nexport type CaptureContext = Scope | Partial<ScopeContext> | ((scope: Scope) => Scope);\n\n/**\n * Data that can be converted to a Scope.\n */\nexport interface ScopeContext {\n  user: User;\n  level: SeverityLevel;\n  extra: Extras;\n  contexts: Contexts;\n  tags: { [key: string]: Primitive };\n  fingerprint: string[];\n  propagationContext: PropagationContext;\n}\n\nexport interface SdkProcessingMetadata {\n  [key: string]: unknown;\n  requestSession?: {\n    status: 'ok' | 'errored' | 'crashed';\n  };\n  normalizedRequest?: RequestEventData;\n  dynamicSamplingContext?: Partial<DynamicSamplingContext>;\n  capturedSpanScope?: Scope;\n  capturedSpanIsolationScope?: Scope;\n  spanCountBeforeProcessing?: number;\n  ipAddress?: string;\n}\n\n/**\n * Normalized data of the Scope, ready to be used.\n */\nexport interface ScopeData {\n  eventProcessors: EventProcessor[];\n  breadcrumbs: Breadcrumb[];\n  user: User;\n  tags: { [key: string]: Primitive };\n  extra: Extras;\n  contexts: Contexts;\n  attachments: Attachment[];\n  propagationContext: PropagationContext;\n  sdkProcessingMetadata: SdkProcessingMetadata;\n  fingerprint: string[];\n  level?: SeverityLevel;\n  transactionName?: string;\n  span?: Span;\n}\n\n/**\n * Holds additional event information.\n */\nexport class Scope {\n  /** Flag if notifying is happening. */\n  protected _notifyingListeners: boolean;\n\n  /** Callback for client to receive scope changes. */\n  protected _scopeListeners: Array<(scope: Scope) => void>;\n\n  /** Callback list that will be called during event processing. */\n  protected _eventProcessors: EventProcessor[];\n\n  /** Array of breadcrumbs. */\n  protected _breadcrumbs: Breadcrumb[];\n\n  /** User */\n  protected _user: User;\n\n  /** Tags */\n  protected _tags: { [key: string]: Primitive };\n\n  /** Extra */\n  protected _extra: Extras;\n\n  /** Contexts */\n  protected _contexts: Contexts;\n\n  /** Attachments */\n  protected _attachments: Attachment[];\n\n  /** Propagation Context for distributed tracing */\n  protected _propagationContext: PropagationContext;\n\n  /**\n   * A place to stash data which is needed at some point in the SDK's event processing pipeline but which shouldn't get\n   * sent to Sentry\n   */\n  protected _sdkProcessingMetadata: SdkProcessingMetadata;\n\n  /** Fingerprint */\n  protected _fingerprint?: string[];\n\n  /** Severity */\n  protected _level?: SeverityLevel;\n\n  /**\n   * Transaction Name\n   *\n   * IMPORTANT: The transaction name on the scope has nothing to do with root spans/transaction objects.\n   * It's purpose is to assign a transaction to the scope that's added to non-transaction events.\n   */\n  protected _transactionName?: string;\n\n  /** Session */\n  protected _session?: Session;\n\n  /** The client on this scope */\n  protected _client?: Client;\n\n  /** Contains the last event id of a captured event.  */\n  protected _lastEventId?: string;\n\n  // NOTE: Any field which gets added here should get added not only to the constructor but also to the `clone` method.\n\n  public constructor() {\n    this._notifyingListeners = false;\n    this._scopeListeners = [];\n    this._eventProcessors = [];\n    this._breadcrumbs = [];\n    this._attachments = [];\n    this._user = {};\n    this._tags = {};\n    this._extra = {};\n    this._contexts = {};\n    this._sdkProcessingMetadata = {};\n    this._propagationContext = {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  /**\n   * Clone all data from this scope into a new scope.\n   */\n  public clone(): Scope {\n    const newScope = new Scope();\n    newScope._breadcrumbs = [...this._breadcrumbs];\n    newScope._tags = { ...this._tags };\n    newScope._extra = { ...this._extra };\n    newScope._contexts = { ...this._contexts };\n    if (this._contexts.flags) {\n      // We need to copy the `values` array so insertions on a cloned scope\n      // won't affect the original array.\n      newScope._contexts.flags = {\n        values: [...this._contexts.flags.values],\n      };\n    }\n\n    newScope._user = this._user;\n    newScope._level = this._level;\n    newScope._session = this._session;\n    newScope._transactionName = this._transactionName;\n    newScope._fingerprint = this._fingerprint;\n    newScope._eventProcessors = [...this._eventProcessors];\n    newScope._attachments = [...this._attachments];\n    newScope._sdkProcessingMetadata = { ...this._sdkProcessingMetadata };\n    newScope._propagationContext = { ...this._propagationContext };\n    newScope._client = this._client;\n    newScope._lastEventId = this._lastEventId;\n\n    _setSpanForScope(newScope, _getSpanForScope(this));\n\n    return newScope;\n  }\n\n  /**\n   * Update the client assigned to this scope.\n   * Note that not every scope will have a client assigned - isolation scopes & the global scope will generally not have a client,\n   * as well as manually created scopes.\n   */\n  public setClient(client: Client | undefined): void {\n    this._client = client;\n  }\n\n  /**\n   * Set the ID of the last captured error event.\n   * This is generally only captured on the isolation scope.\n   */\n  public setLastEventId(lastEventId: string | undefined): void {\n    this._lastEventId = lastEventId;\n  }\n\n  /**\n   * Get the client assigned to this scope.\n   */\n  public getClient<C extends Client>(): C | undefined {\n    return this._client as C | undefined;\n  }\n\n  /**\n   * Get the ID of the last captured error event.\n   * This is generally only available on the isolation scope.\n   */\n  public lastEventId(): string | undefined {\n    return this._lastEventId;\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public addScopeListener(callback: (scope: Scope) => void): void {\n    this._scopeListeners.push(callback);\n  }\n\n  /**\n   * Add an event processor that will be called before an event is sent.\n   */\n  public addEventProcessor(callback: EventProcessor): this {\n    this._eventProcessors.push(callback);\n    return this;\n  }\n\n  /**\n   * Set the user for this scope.\n   * Set to `null` to unset the user.\n   */\n  public setUser(user: User | null): this {\n    // If null is passed we want to unset everything, but still define keys,\n    // so that later down in the pipeline any existing values are cleared.\n    this._user = user || {\n      email: undefined,\n      id: undefined,\n      ip_address: undefined,\n      username: undefined,\n    };\n\n    if (this._session) {\n      updateSession(this._session, { user });\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the user from this scope.\n   */\n  public getUser(): User | undefined {\n    return this._user;\n  }\n\n  /**\n   * Set an object that will be merged into existing tags on the scope,\n   * and will be sent as tags data with the event.\n   */\n  public setTags(tags: { [key: string]: Primitive }): this {\n    this._tags = {\n      ...this._tags,\n      ...tags,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single tag that will be sent as tags data with the event.\n   */\n  public setTag(key: string, value: Primitive): this {\n    this._tags = { ...this._tags, [key]: value };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set an object that will be merged into existing extra on the scope,\n   * and will be sent as extra data with the event.\n   */\n  public setExtras(extras: Extras): this {\n    this._extra = {\n      ...this._extra,\n      ...extras,\n    };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set a single key:value extra entry that will be sent as extra data with the event.\n   */\n  public setExtra(key: string, extra: Extra): this {\n    this._extra = { ...this._extra, [key]: extra };\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the fingerprint on the scope to send with the events.\n   * @param {string[]} fingerprint Fingerprint to group events in Sentry.\n   */\n  public setFingerprint(fingerprint: string[]): this {\n    this._fingerprint = fingerprint;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the level on the scope for future events.\n   */\n  public setLevel(level: SeverityLevel): this {\n    this._level = level;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets the transaction name on the scope so that the name of e.g. taken server route or\n   * the page location is attached to future events.\n   *\n   * IMPORTANT: Calling this function does NOT change the name of the currently active\n   * root span. If you want to change the name of the active root span, use\n   * `Sentry.updateSpanName(rootSpan, 'new name')` instead.\n   *\n   * By default, the SDK updates the scope's transaction name automatically on sensible\n   * occasions, such as a page navigation or when handling a new request on the server.\n   */\n  public setTransactionName(name?: string): this {\n    this._transactionName = name;\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Sets context data with the given name.\n   * Data passed as context will be normalized. You can also pass `null` to unset the context.\n   * Note that context data will not be merged - calling `setContext` will overwrite an existing context with the same key.\n   */\n  public setContext(key: string, context: Context | null): this {\n    if (context === null) {\n      // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n      delete this._contexts[key];\n    } else {\n      this._contexts[key] = context;\n    }\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Set the session for the scope.\n   */\n  public setSession(session?: Session): this {\n    if (!session) {\n      delete this._session;\n    } else {\n      this._session = session;\n    }\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Get the session from the scope.\n   */\n  public getSession(): Session | undefined {\n    return this._session;\n  }\n\n  /**\n   * Updates the scope with provided data. Can work in three variations:\n   * - plain object containing updatable attributes\n   * - Scope instance that'll extract the attributes from\n   * - callback function that'll receive the current scope as an argument and allow for modifications\n   */\n  public update(captureContext?: CaptureContext): this {\n    if (!captureContext) {\n      return this;\n    }\n\n    const scopeToMerge = typeof captureContext === 'function' ? captureContext(this) : captureContext;\n\n    const scopeInstance =\n      scopeToMerge instanceof Scope\n        ? scopeToMerge.getScopeData()\n        : isPlainObject(scopeToMerge)\n          ? (captureContext as ScopeContext)\n          : undefined;\n\n    const { tags, extra, user, contexts, level, fingerprint = [], propagationContext } = scopeInstance || {};\n\n    this._tags = { ...this._tags, ...tags };\n    this._extra = { ...this._extra, ...extra };\n    this._contexts = { ...this._contexts, ...contexts };\n\n    if (user && Object.keys(user).length) {\n      this._user = user;\n    }\n\n    if (level) {\n      this._level = level;\n    }\n\n    if (fingerprint.length) {\n      this._fingerprint = fingerprint;\n    }\n\n    if (propagationContext) {\n      this._propagationContext = propagationContext;\n    }\n\n    return this;\n  }\n\n  /**\n   * Clears the current scope and resets its properties.\n   * Note: The client will not be cleared.\n   */\n  public clear(): this {\n    // client is not cleared here on purpose!\n    this._breadcrumbs = [];\n    this._tags = {};\n    this._extra = {};\n    this._user = {};\n    this._contexts = {};\n    this._level = undefined;\n    this._transactionName = undefined;\n    this._fingerprint = undefined;\n    this._session = undefined;\n    _setSpanForScope(this, undefined);\n    this._attachments = [];\n    this.setPropagationContext({ traceId: generateTraceId(), sampleRand: Math.random() });\n\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Adds a breadcrumb to the scope.\n   * By default, the last 100 breadcrumbs are kept.\n   */\n  public addBreadcrumb(breadcrumb: Breadcrumb, maxBreadcrumbs?: number): this {\n    const maxCrumbs = typeof maxBreadcrumbs === 'number' ? maxBreadcrumbs : DEFAULT_MAX_BREADCRUMBS;\n\n    // No data has been changed, so don't notify scope listeners\n    if (maxCrumbs <= 0) {\n      return this;\n    }\n\n    const mergedBreadcrumb: Breadcrumb = {\n      timestamp: dateTimestampInSeconds(),\n      ...breadcrumb,\n      // Breadcrumb messages can theoretically be infinitely large and they're held in memory so we truncate them not to leak (too much) memory\n      message: breadcrumb.message ? truncate(breadcrumb.message, 2048) : breadcrumb.message,\n    };\n\n    this._breadcrumbs.push(mergedBreadcrumb);\n    if (this._breadcrumbs.length > maxCrumbs) {\n      this._breadcrumbs = this._breadcrumbs.slice(-maxCrumbs);\n      this._client?.recordDroppedEvent('buffer_overflow', 'log_item');\n    }\n\n    this._notifyScopeListeners();\n\n    return this;\n  }\n\n  /**\n   * Get the last breadcrumb of the scope.\n   */\n  public getLastBreadcrumb(): Breadcrumb | undefined {\n    return this._breadcrumbs[this._breadcrumbs.length - 1];\n  }\n\n  /**\n   * Clear all breadcrumbs from the scope.\n   */\n  public clearBreadcrumbs(): this {\n    this._breadcrumbs = [];\n    this._notifyScopeListeners();\n    return this;\n  }\n\n  /**\n   * Add an attachment to the scope.\n   */\n  public addAttachment(attachment: Attachment): this {\n    this._attachments.push(attachment);\n    return this;\n  }\n\n  /**\n   * Clear all attachments from the scope.\n   */\n  public clearAttachments(): this {\n    this._attachments = [];\n    return this;\n  }\n\n  /**\n   * Get the data of this scope, which should be applied to an event during processing.\n   */\n  public getScopeData(): ScopeData {\n    return {\n      breadcrumbs: this._breadcrumbs,\n      attachments: this._attachments,\n      contexts: this._contexts,\n      tags: this._tags,\n      extra: this._extra,\n      user: this._user,\n      level: this._level,\n      fingerprint: this._fingerprint || [],\n      eventProcessors: this._eventProcessors,\n      propagationContext: this._propagationContext,\n      sdkProcessingMetadata: this._sdkProcessingMetadata,\n      transactionName: this._transactionName,\n      span: _getSpanForScope(this),\n    };\n  }\n\n  /**\n   * Add data which will be accessible during event processing but won't get sent to Sentry.\n   */\n  public setSDKProcessingMetadata(newData: SdkProcessingMetadata): this {\n    this._sdkProcessingMetadata = merge(this._sdkProcessingMetadata, newData, 2);\n    return this;\n  }\n\n  /**\n   * Add propagation context to the scope, used for distributed tracing\n   */\n  public setPropagationContext(context: PropagationContext): this {\n    this._propagationContext = context;\n    return this;\n  }\n\n  /**\n   * Get propagation context from the scope, used for distributed tracing\n   */\n  public getPropagationContext(): PropagationContext {\n    return this._propagationContext;\n  }\n\n  /**\n   * Capture an exception for this scope.\n   *\n   * @returns {string} The id of the captured Sentry event.\n   */\n  public captureException(exception: unknown, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture exception!');\n      return eventId;\n    }\n\n    const syntheticException = new Error('Sentry syntheticException');\n\n    this._client.captureException(\n      exception,\n      {\n        originalException: exception,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a message for this scope.\n   *\n   * @returns {string} The id of the captured message.\n   */\n  public captureMessage(message: string, level?: SeverityLevel, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture message!');\n      return eventId;\n    }\n\n    const syntheticException = new Error(message);\n\n    this._client.captureMessage(\n      message,\n      level,\n      {\n        originalException: message,\n        syntheticException,\n        ...hint,\n        event_id: eventId,\n      },\n      this,\n    );\n\n    return eventId;\n  }\n\n  /**\n   * Capture a Sentry event for this scope.\n   *\n   * @returns {string} The id of the captured event.\n   */\n  public captureEvent(event: Event, hint?: EventHint): string {\n    const eventId = hint?.event_id || uuid4();\n\n    if (!this._client) {\n      DEBUG_BUILD && debug.warn('No client configured on scope - will not capture event!');\n      return eventId;\n    }\n\n    this._client.captureEvent(event, { ...hint, event_id: eventId }, this);\n\n    return eventId;\n  }\n\n  /**\n   * This will be called on every set call.\n   */\n  protected _notifyScopeListeners(): void {\n    // We need this check for this._notifyingListeners to be able to work on scope during updates\n    // If this check is not here we'll produce endless recursion when something is done with the scope\n    // during the callback.\n    if (!this._notifyingListeners) {\n      this._notifyingListeners = true;\n      this._scopeListeners.forEach(callback => {\n        callback(this);\n      });\n      this._notifyingListeners = false;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}