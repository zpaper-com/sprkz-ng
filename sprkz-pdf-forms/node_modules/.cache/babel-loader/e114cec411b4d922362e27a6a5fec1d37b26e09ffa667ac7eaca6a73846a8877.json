{"ast":null,"code":"import { DEBUG_BUILD } from '../debug-build.js';\nimport { defineIntegration } from '../integration.js';\nimport { debug } from '../utils/debug-logger.js';\nimport { isError, isPlainObject } from '../utils/is.js';\nimport { normalize } from '../utils/normalize.js';\nimport { addNonEnumerableProperty } from '../utils/object.js';\nimport { truncate } from '../utils/string.js';\nconst INTEGRATION_NAME = 'ExtraErrorData';\n\n/**\n * Extract additional data for from original exceptions.\n */\nconst _extraErrorDataIntegration = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const {\n    depth = 3,\n    captureErrorCause = true\n  } = options;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, hint, client) {\n      const {\n        maxValueLength = 250\n      } = client.getOptions();\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause, maxValueLength);\n    }\n  };\n};\nconst extraErrorDataIntegration = defineIntegration(_extraErrorDataIntegration);\nfunction _enhanceEventWithErrorData(event) {\n  let hint = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  let depth = arguments.length > 2 ? arguments[2] : undefined;\n  let captureErrorCause = arguments.length > 3 ? arguments[3] : undefined;\n  let maxValueLength = arguments.length > 4 ? arguments[4] : undefined;\n  if (!hint.originalException || !isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = hint.originalException.name || hint.originalException.constructor.name;\n  const errorData = _extractErrorData(hint.originalException, captureErrorCause, maxValueLength);\n  if (errorData) {\n    const contexts = {\n      ...event.contexts\n    };\n    const normalizedErrorData = normalize(errorData, depth);\n    if (isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n    return {\n      ...event,\n      contexts\n    };\n  }\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(error, captureErrorCause, maxValueLength) {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber', 'toJSON'];\n    const extraErrorInfo = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = isError(value) || typeof value === 'string' ? truncate(`${value}`, maxValueLength) : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = isError(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON();\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = isError(value) ? value.toString() : value;\n      }\n    }\n    return extraErrorInfo;\n  } catch (oO) {\n    DEBUG_BUILD && debug.error('Unable to extract extra data from the Error object:', oO);\n  }\n  return null;\n}\nexport { extraErrorDataIntegration };\n//# sourceMappingURL=extraerrordata.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}