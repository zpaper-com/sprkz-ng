{"ast":null,"code":"import { DEBUG_BUILD } from '../debug-build.js';\nimport { defineIntegration } from '../integration.js';\nimport { debug } from '../utils/debug-logger.js';\nimport { isError, isPlainObject } from '../utils/is.js';\nimport { normalize } from '../utils/normalize.js';\nimport { addNonEnumerableProperty } from '../utils/object.js';\nimport { truncate } from '../utils/string.js';\nconst INTEGRATION_NAME = 'ExtraErrorData';\n\n/**\n * Extract additional data for from original exceptions.\n */\nconst _extraErrorDataIntegration = (options = {}) => {\n  const {\n    depth = 3,\n    captureErrorCause = true\n  } = options;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, hint, client) {\n      const {\n        maxValueLength = 250\n      } = client.getOptions();\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause, maxValueLength);\n    }\n  };\n};\nconst extraErrorDataIntegration = defineIntegration(_extraErrorDataIntegration);\nfunction _enhanceEventWithErrorData(event, hint = {}, depth, captureErrorCause, maxValueLength) {\n  if (!hint.originalException || !isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = hint.originalException.name || hint.originalException.constructor.name;\n  const errorData = _extractErrorData(hint.originalException, captureErrorCause, maxValueLength);\n  if (errorData) {\n    const contexts = {\n      ...event.contexts\n    };\n    const normalizedErrorData = normalize(errorData, depth);\n    if (isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n    return {\n      ...event,\n      contexts\n    };\n  }\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(error, captureErrorCause, maxValueLength) {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = ['name', 'message', 'stack', 'line', 'column', 'fileName', 'lineNumber', 'columnNumber', 'toJSON'];\n    const extraErrorInfo = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = isError(value) || typeof value === 'string' ? truncate(`${value}`, maxValueLength) : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = isError(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON();\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = isError(value) ? value.toString() : value;\n      }\n    }\n    return extraErrorInfo;\n  } catch (oO) {\n    DEBUG_BUILD && debug.error('Unable to extract extra data from the Error object:', oO);\n  }\n  return null;\n}\nexport { extraErrorDataIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_extraErrorDataIntegration","options","depth","captureErrorCause","name","processEvent","event","hint","client","maxValueLength","getOptions","_enhanceEventWithErrorData","extraErrorDataIntegration","defineIntegration","originalException","isError","exceptionName","constructor","errorData","_extractErrorData","contexts","normalizedErrorData","normalize","isPlainObject","addNonEnumerableProperty","error","nativeKeys","extraErrorInfo","key","Object","keys","indexOf","value","truncate","cause","undefined","toString","toJSON","serializedError","oO","DEBUG_BUILD","debug"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/integrations/extraerrordata.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport { defineIntegration } from '../integration';\nimport type { Contexts } from '../types-hoist/context';\nimport type { ExtendedError } from '../types-hoist/error';\nimport type { Event, EventHint } from '../types-hoist/event';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { debug } from '../utils/debug-logger';\nimport { isError, isPlainObject } from '../utils/is';\nimport { normalize } from '../utils/normalize';\nimport { addNonEnumerableProperty } from '../utils/object';\nimport { truncate } from '../utils/string';\n\nconst INTEGRATION_NAME = 'ExtraErrorData';\n\ninterface ExtraErrorDataOptions {\n  /**\n   * The object depth up to which to capture data on error objects.\n   */\n  depth: number;\n\n  /**\n   * Whether to capture error causes. Defaults to true.\n   *\n   * More information: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n   */\n  captureErrorCause: boolean;\n}\n\n/**\n * Extract additional data for from original exceptions.\n */\nconst _extraErrorDataIntegration = ((options: Partial<ExtraErrorDataOptions> = {}) => {\n  const { depth = 3, captureErrorCause = true } = options;\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, hint, client) {\n      const { maxValueLength = 250 } = client.getOptions();\n      return _enhanceEventWithErrorData(event, hint, depth, captureErrorCause, maxValueLength);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const extraErrorDataIntegration = defineIntegration(_extraErrorDataIntegration);\n\nfunction _enhanceEventWithErrorData(\n  event: Event,\n  hint: EventHint = {},\n  depth: number,\n  captureErrorCause: boolean,\n  maxValueLength: number,\n): Event {\n  if (!hint.originalException || !isError(hint.originalException)) {\n    return event;\n  }\n  const exceptionName = (hint.originalException as ExtendedError).name || hint.originalException.constructor.name;\n\n  const errorData = _extractErrorData(hint.originalException as ExtendedError, captureErrorCause, maxValueLength);\n\n  if (errorData) {\n    const contexts: Contexts = {\n      ...event.contexts,\n    };\n\n    const normalizedErrorData = normalize(errorData, depth);\n\n    if (isPlainObject(normalizedErrorData)) {\n      // We mark the error data as \"already normalized\" here, because we don't want other normalization procedures to\n      // potentially truncate the data we just already normalized, with a certain depth setting.\n      addNonEnumerableProperty(normalizedErrorData, '__sentry_skip_normalization__', true);\n      contexts[exceptionName] = normalizedErrorData;\n    }\n\n    return {\n      ...event,\n      contexts,\n    };\n  }\n\n  return event;\n}\n\n/**\n * Extract extra information from the Error object\n */\nfunction _extractErrorData(\n  error: ExtendedError,\n  captureErrorCause: boolean,\n  maxValueLength: number,\n): Record<string, unknown> | null {\n  // We are trying to enhance already existing event, so no harm done if it won't succeed\n  try {\n    const nativeKeys = [\n      'name',\n      'message',\n      'stack',\n      'line',\n      'column',\n      'fileName',\n      'lineNumber',\n      'columnNumber',\n      'toJSON',\n    ];\n\n    const extraErrorInfo: Record<string, unknown> = {};\n\n    // We want only enumerable properties, thus `getOwnPropertyNames` is redundant here, as we filter keys anyway.\n    for (const key of Object.keys(error)) {\n      if (nativeKeys.indexOf(key) !== -1) {\n        continue;\n      }\n      const value = error[key];\n      extraErrorInfo[key] = isError(value) || typeof value === 'string' ? truncate(`${value}`, maxValueLength) : value;\n    }\n\n    // Error.cause is a standard property that is non enumerable, we therefore need to access it separately.\n    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error/cause\n    if (captureErrorCause && error.cause !== undefined) {\n      extraErrorInfo.cause = isError(error.cause) ? error.cause.toString() : error.cause;\n    }\n\n    // Check if someone attached `toJSON` method to grab even more properties (eg. axios is doing that)\n    if (typeof error.toJSON === 'function') {\n      const serializedError = error.toJSON() as Record<string, unknown>;\n\n      for (const key of Object.keys(serializedError)) {\n        const value = serializedError[key];\n        extraErrorInfo[key] = isError(value) ? value.toString() : value;\n      }\n    }\n\n    return extraErrorInfo;\n  } catch (oO) {\n    DEBUG_BUILD && debug.error('Unable to extract extra data from the Error object:', oO);\n  }\n\n  return null;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}