{"ast":null,"code":"import { baggageHeaderToDynamicSamplingContext } from './baggage.js';\nimport { parseSampleRate } from './parseSampleRate.js';\nimport { generateTraceId, generateSpanId } from './propagationContext.js';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nconst TRACEPARENT_REGEXP = new RegExp('^[ \\\\t]*' +\n// whitespace\n'([0-9a-f]{32})?' +\n// trace_id\n'-?([0-9a-f]{16})?' +\n// span_id\n'-?([01])?' +\n// sampled\n'[ \\\\t]*$') // whitespace\n;\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nfunction extractTraceparentData(traceparent) {\n  if (!traceparent) {\n    return undefined;\n  }\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n  let parentSampled;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2]\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nfunction propagationContextFromHeaders(sentryTrace, baggage) {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n  if (!traceparentData?.traceId) {\n    return {\n      traceId: generateTraceId(),\n      sampleRand: Math.random()\n    };\n  }\n  const sampleRand = getSampleRandFromTraceparentAndDsc(traceparentData, dynamicSamplingContext);\n\n  // The sample_rand on the DSC needs to be generated based on traceparent + baggage.\n  if (dynamicSamplingContext) {\n    dynamicSamplingContext.sample_rand = sampleRand.toString();\n  }\n  const {\n    traceId,\n    parentSpanId,\n    parentSampled\n  } = traceparentData;\n  return {\n    traceId,\n    parentSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {},\n    // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    sampleRand\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nfunction generateSentryTraceHeader(traceId = generateTraceId(), spanId = generateSpanId(), sampled) {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\n/**\n * Given any combination of an incoming trace, generate a sample rand based on its defined semantics.\n *\n * Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n */\nfunction getSampleRandFromTraceparentAndDsc(traceparentData, dsc) {\n  // When there is an incoming sample rand use it.\n  const parsedSampleRand = parseSampleRate(dsc?.sample_rand);\n  if (parsedSampleRand !== undefined) {\n    return parsedSampleRand;\n  }\n\n  // Otherwise, if there is an incoming sampling decision + sample rate, generate a sample rand that would lead to the same sampling decision.\n  const parsedSampleRate = parseSampleRate(dsc?.sample_rate);\n  if (parsedSampleRate && traceparentData?.parentSampled !== undefined) {\n    return traceparentData.parentSampled ?\n    // Returns a sample rand with positive sampling decision [0, sampleRate)\n    Math.random() * parsedSampleRate :\n    // Returns a sample rand with negative sampling decision [sampleRate, 1)\n    parsedSampleRate + Math.random() * (1 - parsedSampleRate);\n  } else {\n    // If nothing applies, return a random sample rand.\n    return Math.random();\n  }\n}\nexport { TRACEPARENT_REGEXP, extractTraceparentData, generateSentryTraceHeader, propagationContextFromHeaders };","map":{"version":3,"names":["TRACEPARENT_REGEXP","RegExp","extractTraceparentData","traceparent","undefined","matches","match","parentSampled","traceId","parentSpanId","propagationContextFromHeaders","sentryTrace","baggage","traceparentData","dynamicSamplingContext","baggageHeaderToDynamicSamplingContext","generateTraceId","sampleRand","Math","random","getSampleRandFromTraceparentAndDsc","sample_rand","toString","sampled","dsc","generateSentryTraceHeader","spanId","generateSpanId","sampledString","parsedSampleRand","parseSampleRate","parsedSampleRate","sample_rate"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/tracing.ts"],"sourcesContent":["import type { DynamicSamplingContext } from '../types-hoist/envelope';\nimport type { PropagationContext } from '../types-hoist/tracing';\nimport type { TraceparentData } from '../types-hoist/transaction';\nimport { baggageHeaderToDynamicSamplingContext } from './baggage';\nimport { parseSampleRate } from './parseSampleRate';\nimport { generateSpanId, generateTraceId } from './propagationContext';\n\n// eslint-disable-next-line @sentry-internal/sdk/no-regexp-constructor -- RegExp is used for readability here\nexport const TRACEPARENT_REGEXP = new RegExp(\n  '^[ \\\\t]*' + // whitespace\n    '([0-9a-f]{32})?' + // trace_id\n    '-?([0-9a-f]{16})?' + // span_id\n    '-?([01])?' + // sampled\n    '[ \\\\t]*$', // whitespace\n);\n\n/**\n * Extract transaction context data from a `sentry-trace` header.\n *\n * @param traceparent Traceparent string\n *\n * @returns Object containing data from the header, or undefined if traceparent string is malformed\n */\nexport function extractTraceparentData(traceparent?: string): TraceparentData | undefined {\n  if (!traceparent) {\n    return undefined;\n  }\n\n  const matches = traceparent.match(TRACEPARENT_REGEXP);\n  if (!matches) {\n    return undefined;\n  }\n\n  let parentSampled: boolean | undefined;\n  if (matches[3] === '1') {\n    parentSampled = true;\n  } else if (matches[3] === '0') {\n    parentSampled = false;\n  }\n\n  return {\n    traceId: matches[1],\n    parentSampled,\n    parentSpanId: matches[2],\n  };\n}\n\n/**\n * Create a propagation context from incoming headers or\n * creates a minimal new one if the headers are undefined.\n */\nexport function propagationContextFromHeaders(\n  sentryTrace: string | undefined,\n  baggage: string | number | boolean | string[] | null | undefined,\n): PropagationContext {\n  const traceparentData = extractTraceparentData(sentryTrace);\n  const dynamicSamplingContext = baggageHeaderToDynamicSamplingContext(baggage);\n\n  if (!traceparentData?.traceId) {\n    return {\n      traceId: generateTraceId(),\n      sampleRand: Math.random(),\n    };\n  }\n\n  const sampleRand = getSampleRandFromTraceparentAndDsc(traceparentData, dynamicSamplingContext);\n\n  // The sample_rand on the DSC needs to be generated based on traceparent + baggage.\n  if (dynamicSamplingContext) {\n    dynamicSamplingContext.sample_rand = sampleRand.toString();\n  }\n\n  const { traceId, parentSpanId, parentSampled } = traceparentData;\n\n  return {\n    traceId,\n    parentSpanId,\n    sampled: parentSampled,\n    dsc: dynamicSamplingContext || {}, // If we have traceparent data but no DSC it means we are not head of trace and we must freeze it\n    sampleRand,\n  };\n}\n\n/**\n * Create sentry-trace header from span context values.\n */\nexport function generateSentryTraceHeader(\n  traceId: string | undefined = generateTraceId(),\n  spanId: string | undefined = generateSpanId(),\n  sampled?: boolean,\n): string {\n  let sampledString = '';\n  if (sampled !== undefined) {\n    sampledString = sampled ? '-1' : '-0';\n  }\n  return `${traceId}-${spanId}${sampledString}`;\n}\n\n/**\n * Given any combination of an incoming trace, generate a sample rand based on its defined semantics.\n *\n * Read more: https://develop.sentry.dev/sdk/telemetry/traces/#propagated-random-value\n */\nfunction getSampleRandFromTraceparentAndDsc(\n  traceparentData: TraceparentData | undefined,\n  dsc: Partial<DynamicSamplingContext> | undefined,\n): number {\n  // When there is an incoming sample rand use it.\n  const parsedSampleRand = parseSampleRate(dsc?.sample_rand);\n  if (parsedSampleRand !== undefined) {\n    return parsedSampleRand;\n  }\n\n  // Otherwise, if there is an incoming sampling decision + sample rate, generate a sample rand that would lead to the same sampling decision.\n  const parsedSampleRate = parseSampleRate(dsc?.sample_rate);\n  if (parsedSampleRate && traceparentData?.parentSampled !== undefined) {\n    return traceparentData.parentSampled\n      ? // Returns a sample rand with positive sampling decision [0, sampleRate)\n        Math.random() * parsedSampleRate\n      : // Returns a sample rand with negative sampling decision [sampleRate, 1)\n        parsedSampleRate + Math.random() * (1 - parsedSampleRate);\n  } else {\n    // If nothing applies, return a random sample rand.\n    return Math.random();\n  }\n}\n"],"mappings":";;;;AAOA;AACO,MAAMA,kBAAA,GAAqB,IAAIC,MAAM,CAC1C;AAAA;AACE;AAAA;AACA;AAAA;AACA;AAAA;AACA,UACJ,EADc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASC,sBAAsBA,CAACC,WAAW,EAAwC;EACxF,IAAI,CAACA,WAAW,EAAE;IAChB,OAAOC,SAAS;EACpB;EAEE,MAAMC,OAAA,GAAUF,WAAW,CAACG,KAAK,CAACN,kBAAkB,CAAC;EACrD,IAAI,CAACK,OAAO,EAAE;IACZ,OAAOD,SAAS;EACpB;EAEE,IAAIG,aAAa;EACjB,IAAIF,OAAO,CAAC,CAAC,MAAM,GAAG,EAAE;IACtBE,aAAA,GAAgB,IAAI;EACxB,CAAE,MAAO,IAAIF,OAAO,CAAC,CAAC,MAAM,GAAG,EAAE;IAC7BE,aAAA,GAAgB,KAAK;EACzB;EAEE,OAAO;IACLC,OAAO,EAAEH,OAAO,CAAC,CAAC,CAAC;IACnBE,aAAa;IACbE,YAAY,EAAEJ,OAAO,CAAC,CAAC;EAC3B,CAAG;AACH;;AAEA;AACA;AACA;AACA;AACO,SAASK,6BAA6BA,CAC3CC,WAAW,EACXC,OAAO,EACa;EACpB,MAAMC,eAAA,GAAkBX,sBAAsB,CAACS,WAAW,CAAC;EAC3D,MAAMG,sBAAA,GAAyBC,qCAAqC,CAACH,OAAO,CAAC;EAE7E,IAAI,CAACC,eAAe,EAAEL,OAAO,EAAE;IAC7B,OAAO;MACLA,OAAO,EAAEQ,eAAe,EAAE;MAC1BC,UAAU,EAAEC,IAAI,CAACC,MAAM;IAC7B,CAAK;EACL;EAEE,MAAMF,UAAA,GAAaG,kCAAkC,CAACP,eAAe,EAAEC,sBAAsB,CAAC;;EAEhG;EACE,IAAIA,sBAAsB,EAAE;IAC1BA,sBAAsB,CAACO,WAAA,GAAcJ,UAAU,CAACK,QAAQ,EAAE;EAC9D;EAEE,MAAM;IAAEd,OAAO;IAAEC,YAAY;IAAEF;EAAA,CAAc,GAAIM,eAAe;EAEhE,OAAO;IACLL,OAAO;IACPC,YAAY;IACZc,OAAO,EAAEhB,aAAa;IACtBiB,GAAG,EAAEV,sBAAA,IAA0B,EAAE;IAAA;IACjCG;EACJ,CAAG;AACH;;AAEA;AACA;AACA;AACO,SAASQ,yBAAyBA,CACvCjB,OAAO,GAAuBQ,eAAe,EAAE,EAC/CU,MAAM,GAAuBC,cAAc,EAAE,EAC7CJ,OAAO,EACC;EACR,IAAIK,aAAA,GAAgB,EAAE;EACtB,IAAIL,OAAA,KAAYnB,SAAS,EAAE;IACzBwB,aAAA,GAAgBL,OAAA,GAAU,OAAO,IAAI;EACzC;EACE,OAAO,GAACf,OAAA,IAAAkB,MAAA,GAAAE,aAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAAR,mCACAP,eAAA,EACAW,GAAA,EACA;EACA;EACA,MAAAK,gBAAA,GAAAC,eAAA,CAAAN,GAAA,EAAAH,WAAA;EACA,IAAAQ,gBAAA,KAAAzB,SAAA;IACA,OAAAyB,gBAAA;EACA;;EAEA;EACA,MAAAE,gBAAA,GAAAD,eAAA,CAAAN,GAAA,EAAAQ,WAAA;EACA,IAAAD,gBAAA,IAAAlB,eAAA,EAAAN,aAAA,KAAAH,SAAA;IACA,OAAAS,eAAA,CAAAN,aAAA;IACA;IACAW,IAAA,CAAAC,MAAA,KAAAY,gBAAA;IACA;IACAA,gBAAA,GAAAb,IAAA,CAAAC,MAAA,UAAAY,gBAAA;EACA;IACA;IACA,OAAAb,IAAA,CAAAC,MAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}