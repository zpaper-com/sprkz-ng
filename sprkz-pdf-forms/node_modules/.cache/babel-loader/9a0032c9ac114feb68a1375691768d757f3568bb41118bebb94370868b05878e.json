{"ast":null,"code":"const getRating = (value, thresholds) => {\n  if (value > thresholds[1]) {\n    return 'poor';\n  }\n  if (value > thresholds[0]) {\n    return 'needs-improvement';\n  }\n  return 'good';\n};\nconst bindReporter = (callback, metric, thresholds, reportAllChanges) => {\n  let prevValue;\n  let delta;\n  return forceReport => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue ?? 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          metric.rating = getRating(metric.value, thresholds);\n          callback(metric);\n        }\n      }\n    }\n  };\n};\nexport { bindReporter };","map":{"version":3,"names":["getRating","value","thresholds","bindReporter","callback","metric","reportAllChanges","prevValue","delta","forceReport","undefined","rating"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/bindReporter.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport type { MetricRatingThresholds, MetricType } from '../types';\n\nconst getRating = (value: number, thresholds: MetricRatingThresholds): MetricType['rating'] => {\n  if (value > thresholds[1]) {\n    return 'poor';\n  }\n  if (value > thresholds[0]) {\n    return 'needs-improvement';\n  }\n  return 'good';\n};\n\nexport const bindReporter = <MetricName extends MetricType['name']>(\n  callback: (metric: Extract<MetricType, { name: MetricName }>) => void,\n  metric: Extract<MetricType, { name: MetricName }>,\n  thresholds: MetricRatingThresholds,\n  reportAllChanges?: boolean,\n) => {\n  let prevValue: number;\n  let delta: number;\n  return (forceReport?: boolean) => {\n    if (metric.value >= 0) {\n      if (forceReport || reportAllChanges) {\n        delta = metric.value - (prevValue ?? 0);\n\n        // Report the metric if there's a non-zero delta or if no previous\n        // value exists (which can happen in the case of the document becoming\n        // hidden when the metric value is 0).\n        // See: https://github.com/GoogleChrome/web-vitals/issues/14\n        if (delta || prevValue === undefined) {\n          prevValue = metric.value;\n          metric.delta = delta;\n          metric.rating = getRating(metric.value, thresholds);\n          callback(metric);\n        }\n      }\n    }\n  };\n};\n"],"mappings":"AAkBA,MAAMA,SAAA,GAAYA,CAACC,KAAK,EAAUC,UAAU,KAAmD;EAC7F,IAAID,KAAA,GAAQC,UAAU,CAAC,CAAC,CAAC,EAAE;IACzB,OAAO,MAAM;EACjB;EACE,IAAID,KAAA,GAAQC,UAAU,CAAC,CAAC,CAAC,EAAE;IACzB,OAAO,mBAAmB;EAC9B;EACE,OAAO,MAAM;AACf,CAAC;AAEM,MAAMC,YAAA,GAAeA,CAC1BC,QAAQ,EACRC,MAAM,EACNH,UAAU,EACVI,gBAAgB,KACb;EACH,IAAIC,SAAS;EACb,IAAIC,KAAK;EACT,OAAQC,WAAW,IAAe;IAChC,IAAIJ,MAAM,CAACJ,KAAA,IAAS,CAAC,EAAE;MACrB,IAAIQ,WAAA,IAAeH,gBAAgB,EAAE;QACnCE,KAAA,GAAQH,MAAM,CAACJ,KAAA,IAASM,SAAA,IAAa,CAAC,CAAC;;QAE/C;QACA;QACA;QACA;QACQ,IAAIC,KAAA,IAASD,SAAA,KAAcG,SAAS,EAAE;UACpCH,SAAA,GAAYF,MAAM,CAACJ,KAAK;UACxBI,MAAM,CAACG,KAAA,GAAQA,KAAK;UACpBH,MAAM,CAACM,MAAA,GAASX,SAAS,CAACK,MAAM,CAACJ,KAAK,EAAEC,UAAU,CAAC;UACnDE,QAAQ,CAACC,MAAM,CAAC;QAC1B;MACA;IACA;EACA,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}