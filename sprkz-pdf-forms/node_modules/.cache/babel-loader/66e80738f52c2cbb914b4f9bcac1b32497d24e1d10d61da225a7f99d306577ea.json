{"ast":null,"code":"/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nfunction debounce(func, wait, options) {\n  let callbackReturnValue;\n  let timerId;\n  let maxTimerId;\n  const maxWait = options?.maxWait ? Math.max(options.maxWait, wait) : 0;\n  const setTimeoutImpl = options?.setTimeoutImpl || setTimeout;\n  function invokeFunc() {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n  function cancelTimers() {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n  function flush() {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n  function debounced() {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeoutImpl(invokeFunc, wait);\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeoutImpl(invokeFunc, maxWait);\n    }\n    return callbackReturnValue;\n  }\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\nexport { debounce };","map":{"version":3,"names":["debounce","func","wait","options","callbackReturnValue","timerId","maxTimerId","maxWait","Math","max","setTimeoutImpl","setTimeout","invokeFunc","cancelTimers","undefined","clearTimeout","flush","debounced","cancel"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/debounce.ts"],"sourcesContent":["type DebouncedCallback = {\n  (): void | unknown;\n  flush: () => void | unknown;\n  cancel: () => void;\n};\ntype CallbackFunction = () => unknown;\ntype DebounceOptions = {\n  /** The max. time in ms to wait for the callback to be invoked. */\n  maxWait?: number;\n  /** This can be overwritten to use a different setTimeout implementation, e.g. to avoid triggering change detection in Angular  */\n  setTimeoutImpl?: typeof setTimeout;\n};\n\n/**\n * Heavily simplified debounce function based on lodash.debounce.\n *\n * This function takes a callback function (@param fun) and delays its invocation\n * by @param wait milliseconds. Optionally, a maxWait can be specified in @param options,\n * which ensures that the callback is invoked at least once after the specified max. wait time.\n *\n * @param func the function whose invocation is to be debounced\n * @param wait the minimum time until the function is invoked after it was called once\n * @param options the options object, which can contain the `maxWait` property\n *\n * @returns the debounced version of the function, which needs to be called at least once to start the\n *          debouncing process. Subsequent calls will reset the debouncing timer and, in case @paramfunc\n *          was already invoked in the meantime, return @param func's return value.\n *          The debounced function has two additional properties:\n *          - `flush`: Invokes the debounced function immediately and returns its return value\n *          - `cancel`: Cancels the debouncing process and resets the debouncing timer\n */\nexport function debounce(func: CallbackFunction, wait: number, options?: DebounceOptions): DebouncedCallback {\n  let callbackReturnValue: unknown;\n\n  let timerId: ReturnType<typeof setTimeout> | undefined;\n  let maxTimerId: ReturnType<typeof setTimeout> | undefined;\n\n  const maxWait = options?.maxWait ? Math.max(options.maxWait, wait) : 0;\n  const setTimeoutImpl = options?.setTimeoutImpl || setTimeout;\n\n  function invokeFunc(): unknown {\n    cancelTimers();\n    callbackReturnValue = func();\n    return callbackReturnValue;\n  }\n\n  function cancelTimers(): void {\n    timerId !== undefined && clearTimeout(timerId);\n    maxTimerId !== undefined && clearTimeout(maxTimerId);\n    timerId = maxTimerId = undefined;\n  }\n\n  function flush(): unknown {\n    if (timerId !== undefined || maxTimerId !== undefined) {\n      return invokeFunc();\n    }\n    return callbackReturnValue;\n  }\n\n  function debounced(): unknown {\n    if (timerId) {\n      clearTimeout(timerId);\n    }\n    timerId = setTimeoutImpl(invokeFunc, wait);\n\n    if (maxWait && maxTimerId === undefined) {\n      maxTimerId = setTimeoutImpl(invokeFunc, maxWait);\n    }\n\n    return callbackReturnValue;\n  }\n\n  debounced.cancel = cancelTimers;\n  debounced.flush = flush;\n  return debounced;\n}\n"],"mappings":"AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,QAAQA,CAACC,IAAI,EAAoBC,IAAI,EAAUC,OAAO,EAAuC;EAC3G,IAAIC,mBAAmB;EAEvB,IAAIC,OAAO;EACX,IAAIC,UAAU;EAEd,MAAMC,OAAA,GAAUJ,OAAO,EAAEI,OAAA,GAAUC,IAAI,CAACC,GAAG,CAACN,OAAO,CAACI,OAAO,EAAEL,IAAI,IAAI,CAAC;EACtE,MAAMQ,cAAA,GAAiBP,OAAO,EAAEO,cAAA,IAAkBC,UAAU;EAE5D,SAASC,UAAUA,CAAA,EAAY;IAC7BC,YAAY,EAAE;IACdT,mBAAA,GAAsBH,IAAI,EAAE;IAC5B,OAAOG,mBAAmB;EAC9B;EAEE,SAASS,YAAYA,CAAA,EAAS;IAC5BR,OAAA,KAAYS,SAAA,IAAaC,YAAY,CAACV,OAAO,CAAC;IAC9CC,UAAA,KAAeQ,SAAA,IAAaC,YAAY,CAACT,UAAU,CAAC;IACpDD,OAAA,GAAUC,UAAA,GAAaQ,SAAS;EACpC;EAEE,SAASE,KAAKA,CAAA,EAAY;IACxB,IAAIX,OAAA,KAAYS,SAAA,IAAaR,UAAA,KAAeQ,SAAS,EAAE;MACrD,OAAOF,UAAU,EAAE;IACzB;IACI,OAAOR,mBAAmB;EAC9B;EAEE,SAASa,SAASA,CAAA,EAAY;IAC5B,IAAIZ,OAAO,EAAE;MACXU,YAAY,CAACV,OAAO,CAAC;IAC3B;IACIA,OAAA,GAAUK,cAAc,CAACE,UAAU,EAAEV,IAAI,CAAC;IAE1C,IAAIK,OAAA,IAAWD,UAAA,KAAeQ,SAAS,EAAE;MACvCR,UAAA,GAAaI,cAAc,CAACE,UAAU,EAAEL,OAAO,CAAC;IACtD;IAEI,OAAOH,mBAAmB;EAC9B;EAEEa,SAAS,CAACC,MAAA,GAASL,YAAY;EAC/BI,SAAS,CAACD,KAAA,GAAQA,KAAK;EACvB,OAAOC,SAAS;AAClB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}