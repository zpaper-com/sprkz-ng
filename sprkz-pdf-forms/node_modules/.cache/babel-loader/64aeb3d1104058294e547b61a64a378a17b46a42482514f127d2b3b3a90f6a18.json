{"ast":null,"code":"import { getClient, SDK_VERSION } from '@sentry/core';\nimport { WINDOW } from '../helpers.js';\n\n// This is a map of integration function method to bundle file name.\nconst LazyLoadableIntegrations = {\n  replayIntegration: 'replay',\n  replayCanvasIntegration: 'replay-canvas',\n  feedbackIntegration: 'feedback',\n  feedbackModalIntegration: 'feedback-modal',\n  feedbackScreenshotIntegration: 'feedback-screenshot',\n  captureConsoleIntegration: 'captureconsole',\n  contextLinesIntegration: 'contextlines',\n  linkedErrorsIntegration: 'linkederrors',\n  dedupeIntegration: 'dedupe',\n  extraErrorDataIntegration: 'extraerrordata',\n  graphqlClientIntegration: 'graphqlclient',\n  httpClientIntegration: 'httpclient',\n  reportingObserverIntegration: 'reportingobserver',\n  rewriteFramesIntegration: 'rewriteframes',\n  browserProfilingIntegration: 'browserprofiling',\n  moduleMetadataIntegration: 'modulemetadata'\n};\nconst WindowWithMaybeIntegration = WINDOW;\n\n/**\n * Lazy load an integration from the CDN.\n * Rejects if the integration cannot be loaded.\n */\nasync function lazyLoadIntegration(name, scriptNonce) {\n  const bundle = LazyLoadableIntegrations[name];\n\n  // `window.Sentry` is only set when using a CDN bundle, but this method can also be used via the NPM package\n  const sentryOnWindow = WindowWithMaybeIntegration.Sentry = WindowWithMaybeIntegration.Sentry || {};\n  if (!bundle) {\n    throw new Error(`Cannot lazy load integration: ${name}`);\n  }\n\n  // Bail if the integration already exists\n  const existing = sentryOnWindow[name];\n  // The `feedbackIntegration` is loaded by default in the CDN bundles,\n  // so we need to differentiate between the real integration and the shim.\n  // if only the shim exists, we still want to lazy load the real integration.\n  if (typeof existing === 'function' && !('_isShim' in existing)) {\n    return existing;\n  }\n  const url = getScriptURL(bundle);\n  const script = WINDOW.document.createElement('script');\n  script.src = url;\n  script.crossOrigin = 'anonymous';\n  script.referrerPolicy = 'strict-origin';\n  if (scriptNonce) {\n    script.setAttribute('nonce', scriptNonce);\n  }\n  const waitForLoad = new Promise((resolve, reject) => {\n    script.addEventListener('load', () => resolve());\n    script.addEventListener('error', reject);\n  });\n  const currentScript = WINDOW.document.currentScript;\n  const parent = WINDOW.document.body || WINDOW.document.head || currentScript?.parentElement;\n  if (parent) {\n    parent.appendChild(script);\n  } else {\n    throw new Error(`Could not find parent element to insert lazy-loaded ${name} script`);\n  }\n  try {\n    await waitForLoad;\n  } catch {\n    throw new Error(`Error when loading integration: ${name}`);\n  }\n  const integrationFn = sentryOnWindow[name];\n  if (typeof integrationFn !== 'function') {\n    throw new Error(`Could not load integration: ${name}`);\n  }\n  return integrationFn;\n}\nfunction getScriptURL(bundle) {\n  const client = getClient();\n  const baseURL = client?.getOptions()?.cdnBaseUrl || 'https://browser.sentry-cdn.com';\n  return new URL(`/${SDK_VERSION}/${bundle}.min.js`, baseURL).toString();\n}\nexport { lazyLoadIntegration };","map":{"version":3,"names":["LazyLoadableIntegrations","replayIntegration","replayCanvasIntegration","feedbackIntegration","feedbackModalIntegration","feedbackScreenshotIntegration","captureConsoleIntegration","contextLinesIntegration","linkedErrorsIntegration","dedupeIntegration","extraErrorDataIntegration","graphqlClientIntegration","httpClientIntegration","reportingObserverIntegration","rewriteFramesIntegration","browserProfilingIntegration","moduleMetadataIntegration","WindowWithMaybeIntegration","WINDOW","lazyLoadIntegration","name","scriptNonce","bundle","sentryOnWindow","Sentry","Error","existing","url","getScriptURL","script","document","createElement","src","crossOrigin","referrerPolicy","setAttribute","waitForLoad","Promise","resolve","reject","addEventListener","currentScript","parent","body","head","parentElement","appendChild","integrationFn","client","getClient","baseURL","getOptions","cdnBaseUrl","URL","SDK_VERSION","toString"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/utils/lazyLoadIntegration.ts"],"sourcesContent":["import type { IntegrationFn } from '@sentry/core';\nimport { getClient, SDK_VERSION } from '@sentry/core';\nimport type { BrowserClient } from '../client';\nimport { WINDOW } from '../helpers';\n\n// This is a map of integration function method to bundle file name.\nconst LazyLoadableIntegrations = {\n  replayIntegration: 'replay',\n  replayCanvasIntegration: 'replay-canvas',\n  feedbackIntegration: 'feedback',\n  feedbackModalIntegration: 'feedback-modal',\n  feedbackScreenshotIntegration: 'feedback-screenshot',\n  captureConsoleIntegration: 'captureconsole',\n  contextLinesIntegration: 'contextlines',\n  linkedErrorsIntegration: 'linkederrors',\n  dedupeIntegration: 'dedupe',\n  extraErrorDataIntegration: 'extraerrordata',\n  graphqlClientIntegration: 'graphqlclient',\n  httpClientIntegration: 'httpclient',\n  reportingObserverIntegration: 'reportingobserver',\n  rewriteFramesIntegration: 'rewriteframes',\n  browserProfilingIntegration: 'browserprofiling',\n  moduleMetadataIntegration: 'modulemetadata',\n} as const;\n\nconst WindowWithMaybeIntegration = WINDOW as {\n  Sentry?: Partial<Record<keyof typeof LazyLoadableIntegrations, IntegrationFn>>;\n};\n\n/**\n * Lazy load an integration from the CDN.\n * Rejects if the integration cannot be loaded.\n */\nexport async function lazyLoadIntegration(\n  name: keyof typeof LazyLoadableIntegrations,\n  scriptNonce?: string,\n): Promise<IntegrationFn> {\n  const bundle = LazyLoadableIntegrations[name];\n\n  // `window.Sentry` is only set when using a CDN bundle, but this method can also be used via the NPM package\n  const sentryOnWindow = (WindowWithMaybeIntegration.Sentry = WindowWithMaybeIntegration.Sentry || {});\n\n  if (!bundle) {\n    throw new Error(`Cannot lazy load integration: ${name}`);\n  }\n\n  // Bail if the integration already exists\n  const existing = sentryOnWindow[name];\n  // The `feedbackIntegration` is loaded by default in the CDN bundles,\n  // so we need to differentiate between the real integration and the shim.\n  // if only the shim exists, we still want to lazy load the real integration.\n  if (typeof existing === 'function' && !('_isShim' in existing)) {\n    return existing;\n  }\n\n  const url = getScriptURL(bundle);\n  const script = WINDOW.document.createElement('script');\n  script.src = url;\n  script.crossOrigin = 'anonymous';\n  script.referrerPolicy = 'strict-origin';\n\n  if (scriptNonce) {\n    script.setAttribute('nonce', scriptNonce);\n  }\n\n  const waitForLoad = new Promise<void>((resolve, reject) => {\n    script.addEventListener('load', () => resolve());\n    script.addEventListener('error', reject);\n  });\n\n  const currentScript = WINDOW.document.currentScript;\n  const parent = WINDOW.document.body || WINDOW.document.head || currentScript?.parentElement;\n\n  if (parent) {\n    parent.appendChild(script);\n  } else {\n    throw new Error(`Could not find parent element to insert lazy-loaded ${name} script`);\n  }\n\n  try {\n    await waitForLoad;\n  } catch {\n    throw new Error(`Error when loading integration: ${name}`);\n  }\n\n  const integrationFn = sentryOnWindow[name];\n\n  if (typeof integrationFn !== 'function') {\n    throw new Error(`Could not load integration: ${name}`);\n  }\n\n  return integrationFn;\n}\n\nfunction getScriptURL(bundle: string): string {\n  const client = getClient<BrowserClient>();\n  const baseURL = client?.getOptions()?.cdnBaseUrl || 'https://browser.sentry-cdn.com';\n\n  return new URL(`/${SDK_VERSION}/${bundle}.min.js`, baseURL).toString();\n}\n"],"mappings":";;;AAKA;AACA,MAAMA,wBAAA,GAA2B;EAC/BC,iBAAiB,EAAE,QAAQ;EAC3BC,uBAAuB,EAAE,eAAe;EACxCC,mBAAmB,EAAE,UAAU;EAC/BC,wBAAwB,EAAE,gBAAgB;EAC1CC,6BAA6B,EAAE,qBAAqB;EACpDC,yBAAyB,EAAE,gBAAgB;EAC3CC,uBAAuB,EAAE,cAAc;EACvCC,uBAAuB,EAAE,cAAc;EACvCC,iBAAiB,EAAE,QAAQ;EAC3BC,yBAAyB,EAAE,gBAAgB;EAC3CC,wBAAwB,EAAE,eAAe;EACzCC,qBAAqB,EAAE,YAAY;EACnCC,4BAA4B,EAAE,mBAAmB;EACjDC,wBAAwB,EAAE,eAAe;EACzCC,2BAA2B,EAAE,kBAAkB;EAC/CC,yBAAyB,EAAE;AAC7B;AAEA,MAAMC,0BAAA,GAA6BC,MAAA;;AAInC;AACA;AACA;AACA;AACO,eAAeC,mBAAmBA,CACvCC,IAAI,EACJC,WAAW,EACa;EACxB,MAAMC,MAAA,GAAStB,wBAAwB,CAACoB,IAAI,CAAC;;EAE/C;EACE,MAAMG,cAAA,GAAkBN,0BAA0B,CAACO,MAAA,GAASP,0BAA0B,CAACO,MAAA,IAAU,EAAG;EAEpG,IAAI,CAACF,MAAM,EAAE;IACX,MAAM,IAAIG,KAAK,CAAC,iCAAiCL,IAAI,EAAC;EACA;;EAEA;EACA,MAAAM,QAAA,GAAAH,cAAA,CAAAH,IAAA;EACA;EACA;EACA;EACA,WAAAM,QAAA,kCAAAA,QAAA;IACA,OAAAA,QAAA;EACA;EAEA,MAAAC,GAAA,GAAAC,YAAA,CAAAN,MAAA;EACA,MAAAO,MAAA,GAAAX,MAAA,CAAAY,QAAA,CAAAC,aAAA;EACAF,MAAA,CAAAG,GAAA,GAAAL,GAAA;EACAE,MAAA,CAAAI,WAAA;EACAJ,MAAA,CAAAK,cAAA;EAEA,IAAAb,WAAA;IACAQ,MAAA,CAAAM,YAAA,UAAAd,WAAA;EACA;EAEA,MAAAe,WAAA,OAAAC,OAAA,EAAAC,OAAA,EAAAC,MAAA;IACAV,MAAA,CAAAW,gBAAA,eAAAF,OAAA;IACAT,MAAA,CAAAW,gBAAA,UAAAD,MAAA;EACA;EAEA,MAAAE,aAAA,GAAAvB,MAAA,CAAAY,QAAA,CAAAW,aAAA;EACA,MAAAC,MAAA,GAAAxB,MAAA,CAAAY,QAAA,CAAAa,IAAA,IAAAzB,MAAA,CAAAY,QAAA,CAAAc,IAAA,IAAAH,aAAA,EAAAI,aAAA;EAEA,IAAAH,MAAA;IACAA,MAAA,CAAAI,WAAA,CAAAjB,MAAA;EACA;IACA,UAAAJ,KAAA,wDAAAL,IAAA;EACA;EAEA;IACA,MAAAgB,WAAA;EACA;IACA,UAAAX,KAAA,oCAAAL,IAAA;EACA;EAEA,MAAA2B,aAAA,GAAAxB,cAAA,CAAAH,IAAA;EAEA,WAAA2B,aAAA;IACA,UAAAtB,KAAA,gCAAAL,IAAA;EACA;EAEA,OAAA2B,aAAA;AACA;AAEA,SAAAnB,aAAAN,MAAA;EACA,MAAA0B,MAAA,GAAAC,SAAA;EACA,MAAAC,OAAA,GAAAF,MAAA,EAAAG,UAAA,IAAAC,UAAA;EAEA,WAAAC,GAAA,KAAAC,WAAA,IAAAhC,MAAA,WAAA4B,OAAA,EAAAK,QAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}