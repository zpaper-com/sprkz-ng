{"ast":null,"code":"import { defineIntegration, _INTERNAL_copyFlagsFromScopeToEvent, _INTERNAL_insertFlagToScope, _INTERNAL_addFeatureFlagToActiveSpan } from '@sentry/core';\n\n/**\n * Sentry integration for capturing feature flag evaluations from LaunchDarkly.\n *\n * See the [feature flag documentation](https://develop.sentry.dev/sdk/expected-features/#feature-flags) for more information.\n *\n * @example\n * ```\n * import * as Sentry from '@sentry/browser';\n * import {launchDarklyIntegration, buildLaunchDarklyFlagUsedInspector} from '@sentry/browser';\n * import * as LaunchDarkly from 'launchdarkly-js-client-sdk';\n *\n * Sentry.init(..., integrations: [launchDarklyIntegration()])\n * const ldClient = LaunchDarkly.initialize(..., {inspectors: [buildLaunchDarklyFlagUsedHandler()]});\n * ```\n */\nconst launchDarklyIntegration = defineIntegration(() => {\n  return {\n    name: 'LaunchDarkly',\n    processEvent(event, _hint, _client) {\n      return _INTERNAL_copyFlagsFromScopeToEvent(event);\n    }\n  };\n});\n\n/**\n * LaunchDarkly hook to listen for and buffer flag evaluations. This needs to\n * be registered as an 'inspector' in LaunchDarkly initialize() options,\n * separately from `launchDarklyIntegration`. Both the hook and the integration\n * are needed to capture LaunchDarkly flags.\n */\nfunction buildLaunchDarklyFlagUsedHandler() {\n  return {\n    name: 'sentry-flag-auditor',\n    type: 'flag-used',\n    synchronous: true,\n    /**\n     * Handle a flag evaluation by storing its name and value on the current scope.\n     */\n    method: (flagKey, flagDetail, _context) => {\n      _INTERNAL_insertFlagToScope(flagKey, flagDetail.value);\n      _INTERNAL_addFeatureFlagToActiveSpan(flagKey, flagDetail.value);\n    }\n  };\n}\nexport { buildLaunchDarklyFlagUsedHandler, launchDarklyIntegration };","map":{"version":3,"names":["launchDarklyIntegration","defineIntegration","name","processEvent","event","_hint","_client","_INTERNAL_copyFlagsFromScopeToEvent","buildLaunchDarklyFlagUsedHandler","type","synchronous","method","flagKey","flagDetail","_context","_INTERNAL_insertFlagToScope","value","_INTERNAL_addFeatureFlagToActiveSpan"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/integrations/featureFlags/launchdarkly/integration.ts"],"sourcesContent":["import type { Client, Event, EventHint, IntegrationFn } from '@sentry/core';\nimport {\n  _INTERNAL_addFeatureFlagToActiveSpan,\n  _INTERNAL_copyFlagsFromScopeToEvent,\n  _INTERNAL_insertFlagToScope,\n  defineIntegration,\n} from '@sentry/core';\nimport type { LDContext, LDEvaluationDetail, LDInspectionFlagUsedHandler } from './types';\n\n/**\n * Sentry integration for capturing feature flag evaluations from LaunchDarkly.\n *\n * See the [feature flag documentation](https://develop.sentry.dev/sdk/expected-features/#feature-flags) for more information.\n *\n * @example\n * ```\n * import * as Sentry from '@sentry/browser';\n * import {launchDarklyIntegration, buildLaunchDarklyFlagUsedInspector} from '@sentry/browser';\n * import * as LaunchDarkly from 'launchdarkly-js-client-sdk';\n *\n * Sentry.init(..., integrations: [launchDarklyIntegration()])\n * const ldClient = LaunchDarkly.initialize(..., {inspectors: [buildLaunchDarklyFlagUsedHandler()]});\n * ```\n */\nexport const launchDarklyIntegration = defineIntegration(() => {\n  return {\n    name: 'LaunchDarkly',\n\n    processEvent(event: Event, _hint: EventHint, _client: Client): Event {\n      return _INTERNAL_copyFlagsFromScopeToEvent(event);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * LaunchDarkly hook to listen for and buffer flag evaluations. This needs to\n * be registered as an 'inspector' in LaunchDarkly initialize() options,\n * separately from `launchDarklyIntegration`. Both the hook and the integration\n * are needed to capture LaunchDarkly flags.\n */\nexport function buildLaunchDarklyFlagUsedHandler(): LDInspectionFlagUsedHandler {\n  return {\n    name: 'sentry-flag-auditor',\n    type: 'flag-used',\n\n    synchronous: true,\n\n    /**\n     * Handle a flag evaluation by storing its name and value on the current scope.\n     */\n    method: (flagKey: string, flagDetail: LDEvaluationDetail, _context: LDContext) => {\n      _INTERNAL_insertFlagToScope(flagKey, flagDetail.value);\n      _INTERNAL_addFeatureFlagToActiveSpan(flagKey, flagDetail.value);\n    },\n  };\n}\n"],"mappings":";;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACaA,uBAAA,GAA0BC,iBAAiB,CAAC,MAAM;EAC7D,OAAO;IACLC,IAAI,EAAE,cAAc;IAEpBC,YAAYA,CAACC,KAAK,EAASC,KAAK,EAAaC,OAAO,EAAiB;MACnE,OAAOC,mCAAmC,CAACH,KAAK,CAAC;IACvD;EACA,CAAG;AACH,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACO,SAASI,gCAAgCA,CAAA,EAAgC;EAC9E,OAAO;IACLN,IAAI,EAAE,qBAAqB;IAC3BO,IAAI,EAAE,WAAW;IAEjBC,WAAW,EAAE,IAAI;IAErB;AACA;AACA;IACIC,MAAM,EAAEA,CAACC,OAAO,EAAUC,UAAU,EAAsBC,QAAQ,KAAgB;MAChFC,2BAA2B,CAACH,OAAO,EAAEC,UAAU,CAACG,KAAK,CAAC;MACtDC,oCAAoC,CAACL,OAAO,EAAEC,UAAU,CAACG,KAAK,CAAC;IACrE;EACA,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}