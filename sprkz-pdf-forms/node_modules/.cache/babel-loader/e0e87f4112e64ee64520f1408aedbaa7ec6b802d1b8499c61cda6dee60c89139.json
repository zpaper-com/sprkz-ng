{"ast":null,"code":"import { debug, browserPerformanceTimeOrigin, getCurrentScope, htmlTreeAsString, SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE, SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { addClsInstrumentationHandler } from './instrument.js';\nimport { supportsWebVital, listenForWebVitalReportEvents, msToSec, startStandaloneWebVitalSpan } from './utils.js';\n\n/**\n * Starts tracking the Cumulative Layout Shift on the current page and collects the value once\n *\n * - the page visibility is hidden\n * - a navigation span is started (to stop CLS measurement for SPA soft navigations)\n *\n * Once either of these events triggers, the CLS value is sent as a standalone span and we stop\n * measuring CLS.\n */\nfunction trackClsAsStandaloneSpan(client) {\n  let standaloneCLsValue = 0;\n  let standaloneClsEntry;\n  if (!supportsWebVital('layout-shift')) {\n    return;\n  }\n  const cleanupClsHandler = addClsInstrumentationHandler(({\n    metric\n  }) => {\n    const entry = metric.entries[metric.entries.length - 1];\n    if (!entry) {\n      return;\n    }\n    standaloneCLsValue = metric.value;\n    standaloneClsEntry = entry;\n  }, true);\n  listenForWebVitalReportEvents(client, (reportEvent, pageloadSpanId) => {\n    sendStandaloneClsSpan(standaloneCLsValue, standaloneClsEntry, pageloadSpanId, reportEvent);\n    cleanupClsHandler();\n  });\n}\nfunction sendStandaloneClsSpan(clsValue, entry, pageloadSpanId, reportEvent) {\n  DEBUG_BUILD && debug.log(`Sending CLS span (${clsValue})`);\n  const startTime = msToSec((browserPerformanceTimeOrigin() || 0) + (entry?.startTime || 0));\n  const routeName = getCurrentScope().getScopeData().transactionName;\n  const name = entry ? htmlTreeAsString(entry.sources[0]?.node) : 'Layout shift';\n  const attributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.cls',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.webvital.cls',\n    [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: entry?.duration || 0,\n    // attach the pageload span id to the CLS span so that we can link them in the UI\n    'sentry.pageload.span_id': pageloadSpanId,\n    // describes what triggered the web vital to be reported\n    'sentry.report_event': reportEvent\n  };\n\n  // Add CLS sources as span attributes to help with debugging layout shifts\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift/sources\n  if (entry?.sources) {\n    entry.sources.forEach((source, index) => {\n      attributes[`cls.source.${index + 1}`] = htmlTreeAsString(source.node);\n    });\n  }\n  const span = startStandaloneWebVitalSpan({\n    name,\n    transaction: routeName,\n    attributes,\n    startTime\n  });\n  if (span) {\n    span.addEvent('cls', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: '',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: clsValue\n    });\n\n    // LayoutShift performance entries always have a duration of 0, so we don't need to add `entry.duration` here\n    // see: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration\n    span.end(startTime);\n  }\n}\nexport { trackClsAsStandaloneSpan };","map":{"version":3,"names":["trackClsAsStandaloneSpan","client","standaloneCLsValue","standaloneClsEntry","supportsWebVital","cleanupClsHandler","addClsInstrumentationHandler","metric","entry","entries","length","value","listenForWebVitalReportEvents","reportEvent","pageloadSpanId","sendStandaloneClsSpan","clsValue","DEBUG_BUILD","debug","log","startTime","msToSec","browserPerformanceTimeOrigin","routeName","getCurrentScope","getScopeData","transactionName","name","htmlTreeAsString","sources","node","attributes","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME","duration","forEach","source","index","span","startStandaloneWebVitalSpan","transaction","addEvent","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE","end"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry-internal/browser-utils/src/metrics/cls.ts"],"sourcesContent":["import type { Client, SpanAttributes } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  debug,\n  getCurrentScope,\n  htmlTreeAsString,\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { addClsInstrumentationHandler } from './instrument';\nimport type { WebVitalReportEvent } from './utils';\nimport { listenForWebVitalReportEvents, msToSec, startStandaloneWebVitalSpan, supportsWebVital } from './utils';\n\n/**\n * Starts tracking the Cumulative Layout Shift on the current page and collects the value once\n *\n * - the page visibility is hidden\n * - a navigation span is started (to stop CLS measurement for SPA soft navigations)\n *\n * Once either of these events triggers, the CLS value is sent as a standalone span and we stop\n * measuring CLS.\n */\nexport function trackClsAsStandaloneSpan(client: Client): void {\n  let standaloneCLsValue = 0;\n  let standaloneClsEntry: LayoutShift | undefined;\n\n  if (!supportsWebVital('layout-shift')) {\n    return;\n  }\n\n  const cleanupClsHandler = addClsInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1] as LayoutShift | undefined;\n    if (!entry) {\n      return;\n    }\n    standaloneCLsValue = metric.value;\n    standaloneClsEntry = entry;\n  }, true);\n\n  listenForWebVitalReportEvents(client, (reportEvent, pageloadSpanId) => {\n    sendStandaloneClsSpan(standaloneCLsValue, standaloneClsEntry, pageloadSpanId, reportEvent);\n    cleanupClsHandler();\n  });\n}\n\nfunction sendStandaloneClsSpan(\n  clsValue: number,\n  entry: LayoutShift | undefined,\n  pageloadSpanId: string,\n  reportEvent: WebVitalReportEvent,\n) {\n  DEBUG_BUILD && debug.log(`Sending CLS span (${clsValue})`);\n\n  const startTime = msToSec((browserPerformanceTimeOrigin() || 0) + (entry?.startTime || 0));\n  const routeName = getCurrentScope().getScopeData().transactionName;\n\n  const name = entry ? htmlTreeAsString(entry.sources[0]?.node) : 'Layout shift';\n\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.cls',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.webvital.cls',\n    [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: entry?.duration || 0,\n    // attach the pageload span id to the CLS span so that we can link them in the UI\n    'sentry.pageload.span_id': pageloadSpanId,\n    // describes what triggered the web vital to be reported\n    'sentry.report_event': reportEvent,\n  };\n\n  // Add CLS sources as span attributes to help with debugging layout shifts\n  // See: https://developer.mozilla.org/en-US/docs/Web/API/LayoutShift/sources\n  if (entry?.sources) {\n    entry.sources.forEach((source, index) => {\n      attributes[`cls.source.${index + 1}`] = htmlTreeAsString(source.node);\n    });\n  }\n\n  const span = startStandaloneWebVitalSpan({\n    name,\n    transaction: routeName,\n    attributes,\n    startTime,\n  });\n\n  if (span) {\n    span.addEvent('cls', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: '',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: clsValue,\n    });\n\n    // LayoutShift performance entries always have a duration of 0, so we don't need to add `entry.duration` here\n    // see: https://developer.mozilla.org/en-US/docs/Web/API/PerformanceEntry/duration\n    span.end(startTime);\n  }\n}\n"],"mappings":";;;;;AAiBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,wBAAwBA,CAACC,MAAM,EAAgB;EAC7D,IAAIC,kBAAA,GAAqB,CAAC;EAC1B,IAAIC,kBAAkB;EAEtB,IAAI,CAACC,gBAAgB,CAAC,cAAc,CAAC,EAAE;IACrC;EACJ;EAEE,MAAMC,iBAAA,GAAoBC,4BAA4B,CAAC,CAAC;IAAEC;EAAA,CAAQ,KAAK;IACrE,MAAMC,KAAA,GAAQD,MAAM,CAACE,OAAO,CAACF,MAAM,CAACE,OAAO,CAACC,MAAA,GAAS,CAAC;IACtD,IAAI,CAACF,KAAK,EAAE;MACV;IACN;IACIN,kBAAA,GAAqBK,MAAM,CAACI,KAAK;IACjCR,kBAAA,GAAqBK,KAAK;EAC9B,CAAG,EAAE,IAAI,CAAC;EAERI,6BAA6B,CAACX,MAAM,EAAE,CAACY,WAAW,EAAEC,cAAc,KAAK;IACrEC,qBAAqB,CAACb,kBAAkB,EAAEC,kBAAkB,EAAEW,cAAc,EAAED,WAAW,CAAC;IAC1FR,iBAAiB,EAAE;EACvB,CAAG,CAAC;AACJ;AAEA,SAASU,qBAAqBA,CAC5BC,QAAQ,EACRR,KAAK,EACLM,cAAc,EACdD,WAAW,EACX;EACAI,WAAA,IAAeC,KAAK,CAACC,GAAG,CAAC,qBAAqBH,QAAQ,GAAG,CAAC;EAE1D,MAAMI,SAAA,GAAYC,OAAO,CAAC,CAACC,4BAA4B,EAAC,IAAK,CAAC,KAAKd,KAAK,EAAEY,SAAA,IAAa,CAAC,CAAC,CAAC;EAC1F,MAAMG,SAAA,GAAYC,eAAe,EAAE,CAACC,YAAY,EAAE,CAACC,eAAe;EAElE,MAAMC,IAAA,GAAOnB,KAAA,GAAQoB,gBAAgB,CAACpB,KAAK,CAACqB,OAAO,CAAC,CAAC,CAAC,EAAEC,IAAI,IAAI,cAAc;EAE9E,MAAMC,UAAU,GAAmB;IACjC,CAACC,gCAAgC,GAAG,uBAAuB;IAC3D,CAACC,4BAA4B,GAAG,iBAAiB;IACjD,CAACC,iCAAiC,GAAG1B,KAAK,EAAE2B,QAAA,IAAY,CAAC;IAC7D;IACI,yBAAyB,EAAErB,cAAc;IAC7C;IACI,qBAAqB,EAAED;EAC3B,CAAG;;EAEH;EACA;EACE,IAAIL,KAAK,EAAEqB,OAAO,EAAE;IAClBrB,KAAK,CAACqB,OAAO,CAACO,OAAO,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MACvCP,UAAU,CAAC,cAAcO,KAAA,GAAQ,CAAC,EAAC,IAAAV,gBAAA,CAAAS,MAAA,CAAAP,IAAA;IACA;EACA;EAEA,MAAAS,IAAA,GAAAC,2BAAA;IACAb,IAAA;IACAc,WAAA,EAAAlB,SAAA;IACAQ,UAAA;IACAX;EACA;EAEA,IAAAmB,IAAA;IACAA,IAAA,CAAAG,QAAA;MACA,CAAAC,0CAAA;MACA,CAAAC,2CAAA,GAAA5B;IACA;;IAEA;IACA;IACAuB,IAAA,CAAAM,GAAA,CAAAzB,SAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}