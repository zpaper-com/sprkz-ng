{"ast":null,"code":"import { consoleSandbox, getLocationHref } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { WINDOW } from '../helpers.js';\n\n/**\n * Returns true if the SDK is running in an embedded browser extension.\n * Stand-alone browser extensions (which do not share the same data as the main browser page) are fine.\n */\nfunction checkAndWarnIfIsEmbeddedBrowserExtension() {\n  if (_isEmbeddedBrowserExtension()) {\n    if (DEBUG_BUILD) {\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.error('[Sentry] You cannot use Sentry.init() in a browser extension, see: https://docs.sentry.io/platforms/javascript/best-practices/browser-extensions/');\n      });\n    }\n    return true;\n  }\n  return false;\n}\nfunction _isEmbeddedBrowserExtension() {\n  if (typeof WINDOW.window === 'undefined') {\n    // No need to show the error if we're not in a browser window environment (e.g. service workers)\n    return false;\n  }\n  const _window = WINDOW;\n\n  // Running the SDK in NW.js, which appears like a browser extension but isn't, is also fine\n  // see: https://github.com/getsentry/sentry-javascript/issues/12668\n  if (_window.nw) {\n    return false;\n  }\n  const extensionObject = _window['chrome'] || _window['browser'];\n  if (!extensionObject?.runtime?.id) {\n    return false;\n  }\n  const href = getLocationHref();\n  const extensionProtocols = ['chrome-extension', 'moz-extension', 'ms-browser-extension', 'safari-web-extension'];\n\n  // Running the SDK in a dedicated extension page and calling Sentry.init is fine; no risk of data leakage\n  const isDedicatedExtensionPage = WINDOW === WINDOW.top && extensionProtocols.some(protocol => href.startsWith(`${protocol}://`));\n  return !isDedicatedExtensionPage;\n}\nexport { checkAndWarnIfIsEmbeddedBrowserExtension };","map":{"version":3,"names":["checkAndWarnIfIsEmbeddedBrowserExtension","_isEmbeddedBrowserExtension","DEBUG_BUILD","consoleSandbox","console","error","WINDOW","window","_window","nw","extensionObject","runtime","id","href","getLocationHref","extensionProtocols","isDedicatedExtensionPage","top","some","protocol","startsWith"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/utils/detectBrowserExtension.ts"],"sourcesContent":["import { consoleSandbox, getLocationHref } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\n\ntype ExtensionRuntime = {\n  runtime?: {\n    id?: string;\n  };\n};\ntype ExtensionProperties = {\n  chrome?: ExtensionRuntime;\n  browser?: ExtensionRuntime;\n  nw?: unknown;\n};\n\n/**\n * Returns true if the SDK is running in an embedded browser extension.\n * Stand-alone browser extensions (which do not share the same data as the main browser page) are fine.\n */\nexport function checkAndWarnIfIsEmbeddedBrowserExtension(): boolean {\n  if (_isEmbeddedBrowserExtension()) {\n    if (DEBUG_BUILD) {\n      consoleSandbox(() => {\n        // eslint-disable-next-line no-console\n        console.error(\n          '[Sentry] You cannot use Sentry.init() in a browser extension, see: https://docs.sentry.io/platforms/javascript/best-practices/browser-extensions/',\n        );\n      });\n    }\n\n    return true;\n  }\n\n  return false;\n}\n\nfunction _isEmbeddedBrowserExtension(): boolean {\n  if (typeof WINDOW.window === 'undefined') {\n    // No need to show the error if we're not in a browser window environment (e.g. service workers)\n    return false;\n  }\n\n  const _window = WINDOW as typeof WINDOW & ExtensionProperties;\n\n  // Running the SDK in NW.js, which appears like a browser extension but isn't, is also fine\n  // see: https://github.com/getsentry/sentry-javascript/issues/12668\n  if (_window.nw) {\n    return false;\n  }\n\n  const extensionObject = _window['chrome'] || _window['browser'];\n\n  if (!extensionObject?.runtime?.id) {\n    return false;\n  }\n\n  const href = getLocationHref();\n  const extensionProtocols = ['chrome-extension', 'moz-extension', 'ms-browser-extension', 'safari-web-extension'];\n\n  // Running the SDK in a dedicated extension page and calling Sentry.init is fine; no risk of data leakage\n  const isDedicatedExtensionPage =\n    WINDOW === WINDOW.top && extensionProtocols.some(protocol => href.startsWith(`${protocol}://`));\n\n  return !isDedicatedExtensionPage;\n}\n"],"mappings":";;;;AAeA;AACA;AACA;AACA;AACO,SAASA,wCAAwCA,CAAA,EAAY;EAClE,IAAIC,2BAA2B,EAAE,EAAE;IACjC,IAAIC,WAAW,EAAE;MACfC,cAAc,CAAC,MAAM;QAC3B;QACQC,OAAO,CAACC,KAAK,CACX,mJACV,CAAS;MACT,CAAO,CAAC;IACR;IAEI,OAAO,IAAI;EACf;EAEE,OAAO,KAAK;AACd;AAEA,SAASJ,2BAA2BA,CAAA,EAAY;EAC9C,IAAI,OAAOK,MAAM,CAACC,MAAA,KAAW,WAAW,EAAE;IAC5C;IACI,OAAO,KAAK;EAChB;EAEE,MAAMC,OAAA,GAAUF,MAAA;;EAElB;EACA;EACE,IAAIE,OAAO,CAACC,EAAE,EAAE;IACd,OAAO,KAAK;EAChB;EAEE,MAAMC,eAAA,GAAkBF,OAAO,CAAC,QAAQ,KAAKA,OAAO,CAAC,SAAS,CAAC;EAE/D,IAAI,CAACE,eAAe,EAAEC,OAAO,EAAEC,EAAE,EAAE;IACjC,OAAO,KAAK;EAChB;EAEE,MAAMC,IAAA,GAAOC,eAAe,EAAE;EAC9B,MAAMC,kBAAA,GAAqB,CAAC,kBAAkB,EAAE,eAAe,EAAE,sBAAsB,EAAE,sBAAsB,CAAC;;EAElH;EACE,MAAMC,wBAAA,GACJV,MAAA,KAAWA,MAAM,CAACW,GAAA,IAAOF,kBAAkB,CAACG,IAAI,CAACC,QAAA,IAAYN,IAAI,CAACO,UAAU,CAAC,GAACD,QAAA;EAEA,QAAAH,wBAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}