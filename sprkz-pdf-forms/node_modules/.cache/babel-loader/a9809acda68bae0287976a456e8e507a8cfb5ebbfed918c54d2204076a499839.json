{"ast":null,"code":"import { DEBUG_BUILD } from '../debug-build.js';\nimport { debug } from '../utils/debug-logger.js';\nimport { spanToJSON, getRootSpan, spanIsSampled } from '../utils/spanUtils.js';\n\n/**\n * Print a log message for a started span.\n */\nfunction logSpanStart(span) {\n  if (!DEBUG_BUILD) return;\n  const {\n    description = '< unknown name >',\n    op = '< unknown op >',\n    parent_span_id: parentSpanId\n  } = spanToJSON(span);\n  const {\n    spanId\n  } = span.spanContext();\n  const sampled = spanIsSampled(span);\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n  const infoParts = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n  if (!isRootSpan) {\n    const {\n      op,\n      description\n    } = spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n  debug.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nfunction logSpanEnd(span) {\n  if (!DEBUG_BUILD) return;\n  const {\n    description = '< unknown name >',\n    op = '< unknown op >'\n  } = spanToJSON(span);\n  const {\n    spanId\n  } = span.spanContext();\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  debug.log(msg);\n}\nexport { logSpanEnd, logSpanStart };","map":{"version":3,"names":["logSpanStart","span","DEBUG_BUILD","description","op","parent_span_id","parentSpanId","spanToJSON","spanId","spanContext","sampled","spanIsSampled","rootSpan","getRootSpan","isRootSpan","header","infoParts","push","debug","log","join","logSpanEnd","msg"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/tracing/logSpans.ts"],"sourcesContent":["import { DEBUG_BUILD } from '../debug-build';\nimport type { Span } from '../types-hoist/span';\nimport { debug } from '../utils/debug-logger';\nimport { getRootSpan, spanIsSampled, spanToJSON } from '../utils/spanUtils';\n\n/**\n * Print a log message for a started span.\n */\nexport function logSpanStart(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >', parent_span_id: parentSpanId } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n\n  const sampled = spanIsSampled(span);\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const header = `[Tracing] Starting ${sampled ? 'sampled' : 'unsampled'} ${isRootSpan ? 'root ' : ''}span`;\n\n  const infoParts: string[] = [`op: ${op}`, `name: ${description}`, `ID: ${spanId}`];\n\n  if (parentSpanId) {\n    infoParts.push(`parent ID: ${parentSpanId}`);\n  }\n\n  if (!isRootSpan) {\n    const { op, description } = spanToJSON(rootSpan);\n    infoParts.push(`root ID: ${rootSpan.spanContext().spanId}`);\n    if (op) {\n      infoParts.push(`root op: ${op}`);\n    }\n    if (description) {\n      infoParts.push(`root description: ${description}`);\n    }\n  }\n\n  debug.log(`${header}\n  ${infoParts.join('\\n  ')}`);\n}\n\n/**\n * Print a log message for an ended span.\n */\nexport function logSpanEnd(span: Span): void {\n  if (!DEBUG_BUILD) return;\n\n  const { description = '< unknown name >', op = '< unknown op >' } = spanToJSON(span);\n  const { spanId } = span.spanContext();\n  const rootSpan = getRootSpan(span);\n  const isRootSpan = rootSpan === span;\n\n  const msg = `[Tracing] Finishing \"${op}\" ${isRootSpan ? 'root ' : ''}span \"${description}\" with ID ${spanId}`;\n  debug.log(msg);\n}\n"],"mappings":";;;;AAKA;AACA;AACA;AACO,SAASA,YAAYA,CAACC,IAAI,EAAc;EAC7C,IAAI,CAACC,WAAW,EAAE;EAElB,MAAM;IAAEC,WAAA,GAAc,kBAAkB;IAAEC,EAAA,GAAK,gBAAgB;IAAEC,cAAc,EAAEC;EAAA,CAAa,GAAIC,UAAU,CAACN,IAAI,CAAC;EAClH,MAAM;IAAEO;EAAA,CAAO,GAAIP,IAAI,CAACQ,WAAW,EAAE;EAErC,MAAMC,OAAA,GAAUC,aAAa,CAACV,IAAI,CAAC;EACnC,MAAMW,QAAA,GAAWC,WAAW,CAACZ,IAAI,CAAC;EAClC,MAAMa,UAAA,GAAaF,QAAA,KAAaX,IAAI;EAEpC,MAAMc,MAAA,GAAS,sBAAsBL,OAAA,GAAU,YAAY,WAAW,IAAII,UAAA,GAAa,UAAU,EAAE,MAAM;EAEzG,MAAME,SAAS,GAAa,CAAC,OAAOZ,EAAE,EAAC,WAAAD,WAAA,WAAAK,MAAA;EAEA,IAAAF,YAAA;IACAU,SAAA,CAAAC,IAAA,eAAAX,YAAA;EACA;EAEA,KAAAQ,UAAA;IACA;MAAAV,EAAA;MAAAD;IAAA,IAAAI,UAAA,CAAAK,QAAA;IACAI,SAAA,CAAAC,IAAA,aAAAL,QAAA,CAAAH,WAAA,GAAAD,MAAA;IACA,IAAAJ,EAAA;MACAY,SAAA,CAAAC,IAAA,aAAAb,EAAA;IACA;IACA,IAAAD,WAAA;MACAa,SAAA,CAAAC,IAAA,sBAAAd,WAAA;IACA;EACA;EAEAe,KAAA,CAAAC,GAAA,IAAAJ,MAAA;AACA,IAAAC,SAAA,CAAAI,IAAA;AACA;;AAEA;AACA;AACA;AACA,SAAAC,WAAApB,IAAA;EACA,KAAAC,WAAA;EAEA;IAAAC,WAAA;IAAAC,EAAA;EAAA,IAAAG,UAAA,CAAAN,IAAA;EACA;IAAAO;EAAA,IAAAP,IAAA,CAAAQ,WAAA;EACA,MAAAG,QAAA,GAAAC,WAAA,CAAAZ,IAAA;EACA,MAAAa,UAAA,GAAAF,QAAA,KAAAX,IAAA;EAEA,MAAAqB,GAAA,2BAAAlB,EAAA,KAAAU,UAAA,wBAAAX,WAAA,aAAAK,MAAA;EACAU,KAAA,CAAAC,GAAA,CAAAG,GAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}