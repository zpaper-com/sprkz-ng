{"ast":null,"code":"import { getClient, withScope } from '../currentScopes.js';\nimport { captureMessage, captureException } from '../exports.js';\nimport { addConsoleInstrumentationHandler } from '../instrument/console.js';\nimport { defineIntegration } from '../integration.js';\nimport { CONSOLE_LEVELS } from '../utils/debug-logger.js';\nimport { addExceptionMechanism } from '../utils/misc.js';\nimport { severityLevelFromString } from '../utils/severity.js';\nimport { safeJoin } from '../utils/string.js';\nimport { GLOBAL_OBJ } from '../utils/worldwide.js';\nconst INTEGRATION_NAME = 'CaptureConsole';\nconst _captureConsoleIntegration = (options = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n  const handled = options.handled ?? true;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!('console' in GLOBAL_OBJ)) {\n        return;\n      }\n      addConsoleInstrumentationHandler(({\n        args,\n        level\n      }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n        consoleHandler(args, level, handled);\n      });\n    }\n  };\n};\n\n/**\n * Send Console API calls as Sentry Events.\n */\nconst captureConsoleIntegration = defineIntegration(_captureConsoleIntegration);\nfunction consoleHandler(args, level, handled) {\n  const captureContext = {\n    level: severityLevelFromString(level),\n    extra: {\n      arguments: args\n    }\n  };\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n      addExceptionMechanism(event, {\n        handled,\n        type: 'console'\n      });\n      return event;\n    });\n    if (level === 'assert') {\n      if (!args[0]) {\n        const message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n        scope.setExtra('arguments', args.slice(1));\n        captureMessage(message, captureContext);\n      }\n      return;\n    }\n    const error = args.find(arg => arg instanceof Error);\n    if (error) {\n      captureException(error, captureContext);\n      return;\n    }\n    const message = safeJoin(args, ' ');\n    captureMessage(message, captureContext);\n  });\n}\nexport { captureConsoleIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_captureConsoleIntegration","options","levels","CONSOLE_LEVELS","handled","name","setup","client","GLOBAL_OBJ","addConsoleInstrumentationHandler","args","level","getClient","includes","consoleHandler","captureConsoleIntegration","defineIntegration","captureContext","severityLevelFromString","extra","arguments","withScope","scope","addEventProcessor","event","logger","addExceptionMechanism","type","message","safeJoin","slice","setExtra","captureMessage","error","find","arg","Error","captureException"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/integrations/captureconsole.ts"],"sourcesContent":["import { getClient, withScope } from '../currentScopes';\nimport { captureException, captureMessage } from '../exports';\nimport { addConsoleInstrumentationHandler } from '../instrument/console';\nimport { defineIntegration } from '../integration';\nimport type { CaptureContext } from '../scope';\nimport type { IntegrationFn } from '../types-hoist/integration';\nimport { CONSOLE_LEVELS } from '../utils/debug-logger';\nimport { addExceptionMechanism } from '../utils/misc';\nimport { severityLevelFromString } from '../utils/severity';\nimport { safeJoin } from '../utils/string';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\n\ninterface CaptureConsoleOptions {\n  levels?: string[];\n\n  /**\n   * By default, Sentry will mark captured console messages as handled.\n   * Set this to `false` if you want to mark them as unhandled instead.\n   *\n   * @default true\n   */\n  handled?: boolean;\n}\n\nconst INTEGRATION_NAME = 'CaptureConsole';\n\nconst _captureConsoleIntegration = ((options: CaptureConsoleOptions = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n  const handled = options.handled ?? true;\n\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!('console' in GLOBAL_OBJ)) {\n        return;\n      }\n\n      addConsoleInstrumentationHandler(({ args, level }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n\n        consoleHandler(args, level, handled);\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Send Console API calls as Sentry Events.\n */\nexport const captureConsoleIntegration = defineIntegration(_captureConsoleIntegration);\n\nfunction consoleHandler(args: unknown[], level: string, handled: boolean): void {\n  const captureContext: CaptureContext = {\n    level: severityLevelFromString(level),\n    extra: {\n      arguments: args,\n    },\n  };\n\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n\n      addExceptionMechanism(event, {\n        handled,\n        type: 'console',\n      });\n\n      return event;\n    });\n\n    if (level === 'assert') {\n      if (!args[0]) {\n        const message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n        scope.setExtra('arguments', args.slice(1));\n        captureMessage(message, captureContext);\n      }\n      return;\n    }\n\n    const error = args.find(arg => arg instanceof Error);\n    if (error) {\n      captureException(error, captureContext);\n      return;\n    }\n\n    const message = safeJoin(args, ' ');\n    captureMessage(message, captureContext);\n  });\n}\n"],"mappings":";;;;;;;;;AAwBA,MAAMA,gBAAA,GAAmB,gBAAgB;AAEzC,MAAMC,0BAAA,GAA8BA,CAACC,OAAO,GAA0B,EAAE,KAAK;EAC3E,MAAMC,MAAA,GAASD,OAAO,CAACC,MAAA,IAAUC,cAAc;EAC/C,MAAMC,OAAA,GAAUH,OAAO,CAACG,OAAA,IAAW,IAAI;EAEvC,OAAO;IACLC,IAAI,EAAEN,gBAAgB;IACtBO,KAAKA,CAACC,MAAM,EAAE;MACZ,IAAI,EAAE,aAAaC,UAAU,CAAC,EAAE;QAC9B;MACR;MAEMC,gCAAgC,CAAC,CAAC;QAAEC,IAAI;QAAEC;MAAA,CAAO,KAAK;QACpD,IAAIC,SAAS,OAAOL,MAAA,IAAU,CAACL,MAAM,CAACW,QAAQ,CAACF,KAAK,CAAC,EAAE;UACrD;QACV;QAEQG,cAAc,CAACJ,IAAI,EAAEC,KAAK,EAAEP,OAAO,CAAC;MAC5C,CAAO,CAAC;IACR;EACA,CAAG;AACH,CAAC;;AAED;AACA;AACA;MACaW,yBAAA,GAA4BC,iBAAiB,CAAChB,0BAA0B;AAErF,SAASc,cAAcA,CAACJ,IAAI,EAAaC,KAAK,EAAUP,OAAO,EAAiB;EAC9E,MAAMa,cAAc,GAAmB;IACrCN,KAAK,EAAEO,uBAAuB,CAACP,KAAK,CAAC;IACrCQ,KAAK,EAAE;MACLC,SAAS,EAAEV;IACjB;EACA,CAAG;EAEDW,SAAS,CAACC,KAAA,IAAS;IACjBA,KAAK,CAACC,iBAAiB,CAACC,KAAA,IAAS;MAC/BA,KAAK,CAACC,MAAA,GAAS,SAAS;MAExBC,qBAAqB,CAACF,KAAK,EAAE;QAC3BpB,OAAO;QACPuB,IAAI,EAAE;MACd,CAAO,CAAC;MAEF,OAAOH,KAAK;IAClB,CAAK,CAAC;IAEF,IAAIb,KAAA,KAAU,QAAQ,EAAE;MACtB,IAAI,CAACD,IAAI,CAAC,CAAC,CAAC,EAAE;QACZ,MAAMkB,OAAA,GAAU,qBAAqBC,QAAQ,CAACnB,IAAI,CAACoB,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,KAAK,gBAAgB,EAAC;QACAR,KAAA,CAAAS,QAAA,cAAArB,IAAA,CAAAoB,KAAA;QACAE,cAAA,CAAAJ,OAAA,EAAAX,cAAA;MACA;MACA;IACA;IAEA,MAAAgB,KAAA,GAAAvB,IAAA,CAAAwB,IAAA,CAAAC,GAAA,IAAAA,GAAA,YAAAC,KAAA;IACA,IAAAH,KAAA;MACAI,gBAAA,CAAAJ,KAAA,EAAAhB,cAAA;MACA;IACA;IAEA,MAAAW,OAAA,GAAAC,QAAA,CAAAnB,IAAA;IACAsB,cAAA,CAAAJ,OAAA,EAAAX,cAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}