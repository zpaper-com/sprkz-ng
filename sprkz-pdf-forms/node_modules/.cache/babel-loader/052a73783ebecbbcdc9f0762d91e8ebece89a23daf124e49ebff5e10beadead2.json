{"ast":null,"code":"/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nfunction parseSampleRate(sampleRate) {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    return undefined;\n  }\n  return rate;\n}\nexport { parseSampleRate };","map":{"version":3,"names":["parseSampleRate","sampleRate","Number","rate","parseFloat","isNaN","undefined"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/parseSampleRate.ts"],"sourcesContent":["/**\n * Parse a sample rate from a given value.\n * This will either return a boolean or number sample rate, if the sample rate is valid (between 0 and 1).\n * If a string is passed, we try to convert it to a number.\n *\n * Any invalid sample rate will return `undefined`.\n */\nexport function parseSampleRate(sampleRate: unknown): number | undefined {\n  if (typeof sampleRate === 'boolean') {\n    return Number(sampleRate);\n  }\n\n  const rate = typeof sampleRate === 'string' ? parseFloat(sampleRate) : sampleRate;\n  if (typeof rate !== 'number' || isNaN(rate) || rate < 0 || rate > 1) {\n    return undefined;\n  }\n\n  return rate;\n}\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,eAAeA,CAACC,UAAU,EAA+B;EACvE,IAAI,OAAOA,UAAA,KAAe,SAAS,EAAE;IACnC,OAAOC,MAAM,CAACD,UAAU,CAAC;EAC7B;EAEE,MAAME,IAAA,GAAO,OAAOF,UAAA,KAAe,WAAWG,UAAU,CAACH,UAAU,IAAIA,UAAU;EACjF,IAAI,OAAOE,IAAA,KAAS,YAAYE,KAAK,CAACF,IAAI,KAAKA,IAAA,GAAO,KAAKA,IAAA,GAAO,CAAC,EAAE;IACnE,OAAOG,SAAS;EACpB;EAEE,OAAOH,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}