{"ast":null,"code":"import { SyncPromise, resolvedSyncPromise, rejectedSyncPromise } from './syncpromise.js';\nconst SENTRY_BUFFER_FULL_ERROR = Symbol.for('SentryBufferFullError');\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nfunction makePromiseBuffer(limit) {\n  const buffer = [];\n  function isReady() {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task) {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer) {\n    if (!isReady()) {\n      return rejectedSyncPromise(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task.then(() => remove(task))\n    // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n    // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n    // have promises, so TS has to polyfill when down-compiling.)\n    .then(null, () => remove(task).then(null, () => {\n      // We have to add another catch here because `remove()` starts a new promise chain.\n    }));\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout) {\n    return new SyncPromise((resolve, reject) => {\n      let counter = buffer.length;\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (! --counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n  return {\n    $: buffer,\n    add,\n    drain\n  };\n}\nexport { SENTRY_BUFFER_FULL_ERROR, makePromiseBuffer };","map":{"version":3,"names":["SENTRY_BUFFER_FULL_ERROR","Symbol","for","makePromiseBuffer","limit","buffer","isReady","undefined","length","remove","task","splice","indexOf","Promise","resolve","add","taskProducer","rejectedSyncPromise","push","then","drain","timeout","SyncPromise","reject","counter","capturedSetTimeout","setTimeout","forEach","item","resolvedSyncPromise","clearTimeout","$"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/utils/promisebuffer.ts"],"sourcesContent":["import { rejectedSyncPromise, resolvedSyncPromise, SyncPromise } from './syncpromise';\n\nexport interface PromiseBuffer<T> {\n  // exposes the internal array so tests can assert on the state of it.\n  // XXX: this really should not be public api.\n  $: Array<PromiseLike<T>>;\n  add(taskProducer: () => PromiseLike<T>): PromiseLike<T>;\n  drain(timeout?: number): PromiseLike<boolean>;\n}\n\nexport const SENTRY_BUFFER_FULL_ERROR = Symbol.for('SentryBufferFullError');\n\n/**\n * Creates an new PromiseBuffer object with the specified limit\n * @param limit max number of promises that can be stored in the buffer\n */\nexport function makePromiseBuffer<T>(limit?: number): PromiseBuffer<T> {\n  const buffer: Array<PromiseLike<T>> = [];\n\n  function isReady(): boolean {\n    return limit === undefined || buffer.length < limit;\n  }\n\n  /**\n   * Remove a promise from the queue.\n   *\n   * @param task Can be any PromiseLike<T>\n   * @returns Removed promise.\n   */\n  function remove(task: PromiseLike<T>): PromiseLike<T | void> {\n    return buffer.splice(buffer.indexOf(task), 1)[0] || Promise.resolve(undefined);\n  }\n\n  /**\n   * Add a promise (representing an in-flight action) to the queue, and set it to remove itself on fulfillment.\n   *\n   * @param taskProducer A function producing any PromiseLike<T>; In previous versions this used to be `task:\n   *        PromiseLike<T>`, but under that model, Promises were instantly created on the call-site and their executor\n   *        functions therefore ran immediately. Thus, even if the buffer was full, the action still happened. By\n   *        requiring the promise to be wrapped in a function, we can defer promise creation until after the buffer\n   *        limit check.\n   * @returns The original promise.\n   */\n  function add(taskProducer: () => PromiseLike<T>): PromiseLike<T> {\n    if (!isReady()) {\n      return rejectedSyncPromise(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    // start the task and add its promise to the queue\n    const task = taskProducer();\n    if (buffer.indexOf(task) === -1) {\n      buffer.push(task);\n    }\n    void task\n      .then(() => remove(task))\n      // Use `then(null, rejectionHandler)` rather than `catch(rejectionHandler)` so that we can use `PromiseLike`\n      // rather than `Promise`. `PromiseLike` doesn't have a `.catch` method, making its polyfill smaller. (ES5 didn't\n      // have promises, so TS has to polyfill when down-compiling.)\n      .then(null, () =>\n        remove(task).then(null, () => {\n          // We have to add another catch here because `remove()` starts a new promise chain.\n        }),\n      );\n    return task;\n  }\n\n  /**\n   * Wait for all promises in the queue to resolve or for timeout to expire, whichever comes first.\n   *\n   * @param timeout The time, in ms, after which to resolve to `false` if the queue is still non-empty. Passing `0` (or\n   * not passing anything) will make the promise wait as long as it takes for the queue to drain before resolving to\n   * `true`.\n   * @returns A promise which will resolve to `true` if the queue is already empty or drains before the timeout, and\n   * `false` otherwise\n   */\n  function drain(timeout?: number): PromiseLike<boolean> {\n    return new SyncPromise<boolean>((resolve, reject) => {\n      let counter = buffer.length;\n\n      if (!counter) {\n        return resolve(true);\n      }\n\n      // wait for `timeout` ms and then resolve to `false` (if not cancelled first)\n      const capturedSetTimeout = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // if all promises resolve in time, cancel the timer and resolve to `true`\n      buffer.forEach(item => {\n        void resolvedSyncPromise(item).then(() => {\n          if (!--counter) {\n            clearTimeout(capturedSetTimeout);\n            resolve(true);\n          }\n        }, reject);\n      });\n    });\n  }\n\n  return {\n    $: buffer,\n    add,\n    drain,\n  };\n}\n"],"mappings":";AAUO,MAAMA,wBAAA,GAA2BC,MAAM,CAACC,GAAG,CAAC,uBAAuB;;AAE1E;AACA;AACA;AACA;AACO,SAASC,iBAAiBA,CAAIC,KAAK,EAA6B;EACrE,MAAMC,MAAM,GAA0B,EAAE;EAExC,SAASC,OAAOA,CAAA,EAAY;IAC1B,OAAOF,KAAA,KAAUG,SAAA,IAAaF,MAAM,CAACG,MAAA,GAASJ,KAAK;EACvD;;EAEA;AACA;AACA;AACA;AACA;AACA;EACE,SAASK,MAAMA,CAACC,IAAI,EAAyC;IAC3D,OAAOL,MAAM,CAACM,MAAM,CAACN,MAAM,CAACO,OAAO,CAACF,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAKG,OAAO,CAACC,OAAO,CAACP,SAAS,CAAC;EAClF;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASQ,GAAGA,CAACC,YAAY,EAAwC;IAC/D,IAAI,CAACV,OAAO,EAAE,EAAE;MACd,OAAOW,mBAAmB,CAACjB,wBAAwB,CAAC;IAC1D;;IAEA;IACI,MAAMU,IAAA,GAAOM,YAAY,EAAE;IAC3B,IAAIX,MAAM,CAACO,OAAO,CAACF,IAAI,MAAM,EAAE,EAAE;MAC/BL,MAAM,CAACa,IAAI,CAACR,IAAI,CAAC;IACvB;IACI,KAAKA,IAAA,CACFS,IAAI,CAAC,MAAMV,MAAM,CAACC,IAAI,CAAC;IAC9B;IACA;IACA;IAAA,CACOS,IAAI,CAAC,IAAI,EAAE,MACVV,MAAM,CAACC,IAAI,CAAC,CAACS,IAAI,CAAC,IAAI,EAAE,MAAM;MACtC;IAAA,CACS,CACT,CAAO;IACH,OAAOT,IAAI;EACf;;EAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE,SAASU,KAAKA,CAACC,OAAO,EAAiC;IACrD,OAAO,IAAIC,WAAW,CAAU,CAACR,OAAO,EAAES,MAAM,KAAK;MACnD,IAAIC,OAAA,GAAUnB,MAAM,CAACG,MAAM;MAE3B,IAAI,CAACgB,OAAO,EAAE;QACZ,OAAOV,OAAO,CAAC,IAAI,CAAC;MAC5B;;MAEA;MACM,MAAMW,kBAAA,GAAqBC,UAAU,CAAC,MAAM;QAC1C,IAAIL,OAAA,IAAWA,OAAA,GAAU,CAAC,EAAE;UAC1BP,OAAO,CAAC,KAAK,CAAC;QACxB;MACA,CAAO,EAAEO,OAAO,CAAC;;MAEjB;MACMhB,MAAM,CAACsB,OAAO,CAACC,IAAA,IAAQ;QACrB,KAAKC,mBAAmB,CAACD,IAAI,CAAC,CAACT,IAAI,CAAC,MAAM;UACxC,IAAI,CAAC,GAAEK,OAAO,EAAE;YACdM,YAAY,CAACL,kBAAkB,CAAC;YAChCX,OAAO,CAAC,IAAI,CAAC;UACzB;QACA,CAAS,EAAES,MAAM,CAAC;MAClB,CAAO,CAAC;IACR,CAAK,CAAC;EACN;EAEE,OAAO;IACLQ,CAAC,EAAE1B,MAAM;IACTU,GAAG;IACHK;EACJ,CAAG;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}