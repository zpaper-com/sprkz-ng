{"ast":null,"code":"import { filenameIsInApp } from './node-stack-trace.js';\nimport { UNKNOWN_FUNCTION } from './stacktrace.js';\n\n/**\n * A node.js watchdog timer\n * @param pollInterval The interval that we expect to get polled at\n * @param anrThreshold The threshold for when we consider ANR\n * @param callback The callback to call for ANR\n * @returns An object with `poll` and `enabled` functions {@link WatchdogReturn}\n */\nfunction watchdogTimer(createTimer, pollInterval, anrThreshold, callback) {\n  const timer = createTimer();\n  let triggered = false;\n  let enabled = true;\n  setInterval(() => {\n    const diffMs = timer.getTimeMs();\n    if (triggered === false && diffMs > pollInterval + anrThreshold) {\n      triggered = true;\n      if (enabled) {\n        callback();\n      }\n    }\n    if (diffMs < pollInterval + anrThreshold) {\n      triggered = false;\n    }\n  }, 20);\n  return {\n    poll: () => {\n      timer.reset();\n    },\n    enabled: state => {\n      enabled = state;\n    }\n  };\n}\n\n// types copied from inspector.d.ts\n\n/**\n * Converts Debugger.CallFrame to Sentry StackFrame\n */\nfunction callFrameToStackFrame(frame, url, getModuleFromFilename) {\n  const filename = url ? url.replace(/^file:\\/\\//, '') : undefined;\n\n  // CallFrame row/col are 0 based, whereas StackFrame are 1 based\n  const colno = frame.location.columnNumber ? frame.location.columnNumber + 1 : undefined;\n  const lineno = frame.location.lineNumber ? frame.location.lineNumber + 1 : undefined;\n  return {\n    filename,\n    module: getModuleFromFilename(filename),\n    function: frame.functionName || UNKNOWN_FUNCTION,\n    colno,\n    lineno,\n    in_app: filename ? filenameIsInApp(filename) : undefined\n  };\n}\nexport { callFrameToStackFrame, watchdogTimer };\n//# sourceMappingURL=anr.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}