{"ast":null,"code":"import { getClient, withScope } from '../currentScopes.js';\nimport { captureMessage, captureException } from '../exports.js';\nimport { addConsoleInstrumentationHandler } from '../instrument/console.js';\nimport { defineIntegration } from '../integration.js';\nimport { CONSOLE_LEVELS } from '../utils/debug-logger.js';\nimport { addExceptionMechanism } from '../utils/misc.js';\nimport { severityLevelFromString } from '../utils/severity.js';\nimport { safeJoin } from '../utils/string.js';\nimport { GLOBAL_OBJ } from '../utils/worldwide.js';\nconst INTEGRATION_NAME = 'CaptureConsole';\nconst _captureConsoleIntegration = (options = {}) => {\n  const levels = options.levels || CONSOLE_LEVELS;\n  const handled = options.handled ?? true;\n  return {\n    name: INTEGRATION_NAME,\n    setup(client) {\n      if (!('console' in GLOBAL_OBJ)) {\n        return;\n      }\n      addConsoleInstrumentationHandler(({\n        args,\n        level\n      }) => {\n        if (getClient() !== client || !levels.includes(level)) {\n          return;\n        }\n        consoleHandler(args, level, handled);\n      });\n    }\n  };\n};\n\n/**\n * Send Console API calls as Sentry Events.\n */\nconst captureConsoleIntegration = defineIntegration(_captureConsoleIntegration);\nfunction consoleHandler(args, level, handled) {\n  const captureContext = {\n    level: severityLevelFromString(level),\n    extra: {\n      arguments: args\n    }\n  };\n  withScope(scope => {\n    scope.addEventProcessor(event => {\n      event.logger = 'console';\n      addExceptionMechanism(event, {\n        handled,\n        type: 'console'\n      });\n      return event;\n    });\n    if (level === 'assert') {\n      if (!args[0]) {\n        const message = `Assertion failed: ${safeJoin(args.slice(1), ' ') || 'console.assert'}`;\n        scope.setExtra('arguments', args.slice(1));\n        captureMessage(message, captureContext);\n      }\n      return;\n    }\n    const error = args.find(arg => arg instanceof Error);\n    if (error) {\n      captureException(error, captureContext);\n      return;\n    }\n    const message = safeJoin(args, ' ');\n    captureMessage(message, captureContext);\n  });\n}\nexport { captureConsoleIntegration };\n//# sourceMappingURL=captureconsole.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}