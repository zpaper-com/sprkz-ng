{"ast":null,"code":"import { defineIntegration } from '../integration.js';\nimport { parseCookie } from '../utils/cookie.js';\nimport { getClientIPAddress, ipHeaderNames } from '../vendor/getIpAddress.js';\n\n// TODO(v10): Change defaults based on `sendDefaultPii`\nconst DEFAULT_INCLUDE = {\n  cookies: true,\n  data: true,\n  headers: true,\n  query_string: true,\n  url: true\n};\nconst INTEGRATION_NAME = 'RequestData';\nconst _requestDataIntegration = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const include = {\n    ...DEFAULT_INCLUDE,\n    ...options.include\n  };\n  return {\n    name: INTEGRATION_NAME,\n    processEvent(event, _hint, client) {\n      const {\n        sdkProcessingMetadata = {}\n      } = event;\n      const {\n        normalizedRequest,\n        ipAddress\n      } = sdkProcessingMetadata;\n      const includeWithDefaultPiiApplied = {\n        ...include,\n        ip: include.ip ?? client.getOptions().sendDefaultPii\n      };\n      if (normalizedRequest) {\n        addNormalizedRequestDataToEvent(event, normalizedRequest, {\n          ipAddress\n        }, includeWithDefaultPiiApplied);\n      }\n      return event;\n    }\n  };\n};\n\n/**\n * Add data about a request to an event. Primarily for use in Node-based SDKs, but included in `@sentry/core`\n * so it can be used in cross-platform SDKs like `@sentry/nextjs`.\n */\nconst requestDataIntegration = defineIntegration(_requestDataIntegration);\n\n/**\n * Add already normalized request data to an event.\n * This mutates the passed in event.\n */\nfunction addNormalizedRequestDataToEvent(event, req,\n// Data that should not go into `event.request` but is somehow related to requests\nadditionalData, include) {\n  event.request = {\n    ...event.request,\n    ...extractNormalizedRequestData(req, include)\n  };\n  if (include.ip) {\n    const ip = req.headers && getClientIPAddress(req.headers) || additionalData.ipAddress;\n    if (ip) {\n      event.user = {\n        ...event.user,\n        ip_address: ip\n      };\n    }\n  }\n}\nfunction extractNormalizedRequestData(normalizedRequest, include) {\n  const requestData = {};\n  const headers = {\n    ...normalizedRequest.headers\n  };\n  if (include.headers) {\n    requestData.headers = headers;\n\n    // Remove the Cookie header in case cookie data should not be included in the event\n    if (!include.cookies) {\n      delete headers.cookie;\n    }\n\n    // Remove IP headers in case IP data should not be included in the event\n    if (!include.ip) {\n      ipHeaderNames.forEach(ipHeaderName => {\n        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete headers[ipHeaderName];\n      });\n    }\n  }\n  requestData.method = normalizedRequest.method;\n  if (include.url) {\n    requestData.url = normalizedRequest.url;\n  }\n  if (include.cookies) {\n    const cookies = normalizedRequest.cookies || (headers?.cookie ? parseCookie(headers.cookie) : undefined);\n    requestData.cookies = cookies || {};\n  }\n  if (include.query_string) {\n    requestData.query_string = normalizedRequest.query_string;\n  }\n  if (include.data) {\n    requestData.data = normalizedRequest.data;\n  }\n  return requestData;\n}\nexport { requestDataIntegration };\n//# sourceMappingURL=requestdata.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}