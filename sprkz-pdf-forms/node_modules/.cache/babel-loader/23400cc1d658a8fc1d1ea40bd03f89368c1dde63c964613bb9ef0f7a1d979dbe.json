{"ast":null,"code":"import { browserPerformanceTimeOrigin } from '@sentry/core';\nimport { extractNetworkProtocol } from '@sentry-internal/browser-utils';\nfunction getAbsoluteTime(time = 0) {\n  return ((browserPerformanceTimeOrigin() || performance.timeOrigin) + time) / 1000;\n}\n\n/**\n * Converts a PerformanceResourceTiming entry to span data for the resource span.\n *\n * @param resourceTiming\n * @returns An array where the first element is the attribute name and the second element is the attribute value.\n */\nfunction resourceTimingToSpanAttributes(resourceTiming) {\n  const timingSpanData = [];\n  // Checking for only `undefined` and `null` is intentional because it's\n  // valid for `nextHopProtocol` to be an empty string.\n  if (resourceTiming.nextHopProtocol != undefined) {\n    const {\n      name,\n      version\n    } = extractNetworkProtocol(resourceTiming.nextHopProtocol);\n    timingSpanData.push(['network.protocol.version', version], ['network.protocol.name', name]);\n  }\n  if (!browserPerformanceTimeOrigin()) {\n    return timingSpanData;\n  }\n  return [...timingSpanData, ['http.request.redirect_start', getAbsoluteTime(resourceTiming.redirectStart)], ['http.request.fetch_start', getAbsoluteTime(resourceTiming.fetchStart)], ['http.request.domain_lookup_start', getAbsoluteTime(resourceTiming.domainLookupStart)], ['http.request.domain_lookup_end', getAbsoluteTime(resourceTiming.domainLookupEnd)], ['http.request.connect_start', getAbsoluteTime(resourceTiming.connectStart)], ['http.request.secure_connection_start', getAbsoluteTime(resourceTiming.secureConnectionStart)], ['http.request.connection_end', getAbsoluteTime(resourceTiming.connectEnd)], ['http.request.request_start', getAbsoluteTime(resourceTiming.requestStart)], ['http.request.response_start', getAbsoluteTime(resourceTiming.responseStart)], ['http.request.response_end', getAbsoluteTime(resourceTiming.responseEnd)]];\n}\nexport { resourceTimingToSpanAttributes };","map":{"version":3,"names":["getAbsoluteTime","time","browserPerformanceTimeOrigin","performance","timeOrigin","resourceTimingToSpanAttributes","resourceTiming","timingSpanData","nextHopProtocol","undefined","name","version","extractNetworkProtocol","push","redirectStart","fetchStart","domainLookupStart","domainLookupEnd","connectStart","secureConnectionStart","connectEnd","requestStart","responseStart","responseEnd"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/tracing/resource-timing.ts"],"sourcesContent":["import type { Span } from '@sentry/core';\nimport { browserPerformanceTimeOrigin } from '@sentry/core';\nimport { extractNetworkProtocol } from '@sentry-internal/browser-utils';\n\nfunction getAbsoluteTime(time: number = 0): number {\n  return ((browserPerformanceTimeOrigin() || performance.timeOrigin) + time) / 1000;\n}\n\n/**\n * Converts a PerformanceResourceTiming entry to span data for the resource span.\n *\n * @param resourceTiming\n * @returns An array where the first element is the attribute name and the second element is the attribute value.\n */\nexport function resourceTimingToSpanAttributes(\n  resourceTiming: PerformanceResourceTiming,\n): Array<Parameters<Span['setAttribute']>> {\n  const timingSpanData: Array<Parameters<Span['setAttribute']>> = [];\n  // Checking for only `undefined` and `null` is intentional because it's\n  // valid for `nextHopProtocol` to be an empty string.\n  if (resourceTiming.nextHopProtocol != undefined) {\n    const { name, version } = extractNetworkProtocol(resourceTiming.nextHopProtocol);\n    timingSpanData.push(['network.protocol.version', version], ['network.protocol.name', name]);\n  }\n  if (!browserPerformanceTimeOrigin()) {\n    return timingSpanData;\n  }\n  return [\n    ...timingSpanData,\n    ['http.request.redirect_start', getAbsoluteTime(resourceTiming.redirectStart)],\n    ['http.request.fetch_start', getAbsoluteTime(resourceTiming.fetchStart)],\n    ['http.request.domain_lookup_start', getAbsoluteTime(resourceTiming.domainLookupStart)],\n    ['http.request.domain_lookup_end', getAbsoluteTime(resourceTiming.domainLookupEnd)],\n    ['http.request.connect_start', getAbsoluteTime(resourceTiming.connectStart)],\n    ['http.request.secure_connection_start', getAbsoluteTime(resourceTiming.secureConnectionStart)],\n    ['http.request.connection_end', getAbsoluteTime(resourceTiming.connectEnd)],\n    ['http.request.request_start', getAbsoluteTime(resourceTiming.requestStart)],\n    ['http.request.response_start', getAbsoluteTime(resourceTiming.responseStart)],\n    ['http.request.response_end', getAbsoluteTime(resourceTiming.responseEnd)],\n  ];\n}\n"],"mappings":";;AAIA,SAASA,eAAeA,CAACC,IAAI,GAAW,CAAC,EAAU;EACjD,OAAO,CAAC,CAACC,4BAA4B,EAAC,IAAKC,WAAW,CAACC,UAAU,IAAIH,IAAI,IAAI,IAAI;AACnF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACO,SAASI,8BAA8BA,CAC5CC,cAAc,EAC2B;EACzC,MAAMC,cAAc,GAA4C,EAAE;EACpE;EACA;EACE,IAAID,cAAc,CAACE,eAAA,IAAmBC,SAAS,EAAE;IAC/C,MAAM;MAAEC,IAAI;MAAEC;IAAA,CAAQ,GAAIC,sBAAsB,CAACN,cAAc,CAACE,eAAe,CAAC;IAChFD,cAAc,CAACM,IAAI,CAAC,CAAC,0BAA0B,EAAEF,OAAO,CAAC,EAAE,CAAC,uBAAuB,EAAED,IAAI,CAAC,CAAC;EAC/F;EACE,IAAI,CAACR,4BAA4B,EAAE,EAAE;IACnC,OAAOK,cAAc;EACzB;EACE,OAAO,CACL,GAAGA,cAAc,EACjB,CAAC,6BAA6B,EAAEP,eAAe,CAACM,cAAc,CAACQ,aAAa,CAAC,CAAC,EAC9E,CAAC,0BAA0B,EAAEd,eAAe,CAACM,cAAc,CAACS,UAAU,CAAC,CAAC,EACxE,CAAC,kCAAkC,EAAEf,eAAe,CAACM,cAAc,CAACU,iBAAiB,CAAC,CAAC,EACvF,CAAC,gCAAgC,EAAEhB,eAAe,CAACM,cAAc,CAACW,eAAe,CAAC,CAAC,EACnF,CAAC,4BAA4B,EAAEjB,eAAe,CAACM,cAAc,CAACY,YAAY,CAAC,CAAC,EAC5E,CAAC,sCAAsC,EAAElB,eAAe,CAACM,cAAc,CAACa,qBAAqB,CAAC,CAAC,EAC/F,CAAC,6BAA6B,EAAEnB,eAAe,CAACM,cAAc,CAACc,UAAU,CAAC,CAAC,EAC3E,CAAC,4BAA4B,EAAEpB,eAAe,CAACM,cAAc,CAACe,YAAY,CAAC,CAAC,EAC5E,CAAC,6BAA6B,EAAErB,eAAe,CAACM,cAAc,CAACgB,aAAa,CAAC,CAAC,EAC9E,CAAC,2BAA2B,EAAEtB,eAAe,CAACM,cAAc,CAACiB,WAAW,CAAC,CAAC,CAC3E;AACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}