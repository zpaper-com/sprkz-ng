{"ast":null,"code":"import { defineIntegration, supportsReportingObserver, GLOBAL_OBJ, getClient, withScope, captureMessage } from '@sentry/core';\nconst WINDOW = GLOBAL_OBJ;\nconst INTEGRATION_NAME = 'ReportingObserver';\nconst SETUP_CLIENTS = new WeakMap();\nconst _reportingObserverIntegration = (options = {}) => {\n  const types = options.types || ['crash', 'deprecation', 'intervention'];\n\n  /** Handler for the reporting observer. */\n  function handler(reports) {\n    if (!SETUP_CLIENTS.has(getClient())) {\n      return;\n    }\n    for (const report of reports) {\n      withScope(scope => {\n        scope.setExtra('url', report.url);\n        const label = `ReportingObserver [${report.type}]`;\n        let details = 'No details available';\n        if (report.body) {\n          // Object.keys doesn't work on ReportBody, as all properties are inherited\n          const plainBody = {};\n\n          // eslint-disable-next-line guard-for-in\n          for (const prop in report.body) {\n            plainBody[prop] = report.body[prop];\n          }\n          scope.setExtra('body', plainBody);\n          if (report.type === 'crash') {\n            const body = report.body;\n            // A fancy way to create a message out of crashId OR reason OR both OR fallback\n            details = [body.crashId || '', body.reason || ''].join(' ').trim() || details;\n          } else {\n            const body = report.body;\n            details = body.message || details;\n          }\n        }\n        captureMessage(`${label}: ${details}`);\n      });\n    }\n  }\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      if (!supportsReportingObserver()) {\n        return;\n      }\n      const observer = new WINDOW.ReportingObserver(handler, {\n        buffered: true,\n        types\n      });\n      observer.observe();\n    },\n    setup(client) {\n      SETUP_CLIENTS.set(client, true);\n    }\n  };\n};\n\n/**\n * Reporting API integration - https://w3c.github.io/reporting/\n */\nconst reportingObserverIntegration = defineIntegration(_reportingObserverIntegration);\nexport { reportingObserverIntegration };\n//# sourceMappingURL=reportingobserver.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}