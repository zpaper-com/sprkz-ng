{"ast":null,"code":"import { observe } from '../observe.js';\n\n/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nlet interactionCountEstimate = 0;\nlet minKnownInteractionId = Infinity;\nlet maxKnownInteractionId = 0;\nconst updateEstimate = entries => {\n  entries.forEach(e => {\n    if (e.interactionId) {\n      minKnownInteractionId = Math.min(minKnownInteractionId, e.interactionId);\n      maxKnownInteractionId = Math.max(maxKnownInteractionId, e.interactionId);\n      interactionCountEstimate = maxKnownInteractionId ? (maxKnownInteractionId - minKnownInteractionId) / 7 + 1 : 0;\n    }\n  });\n};\nlet po;\n\n/**\n * Returns the `interactionCount` value using the native API (if available)\n * or the polyfill estimate in this module.\n */\nconst getInteractionCount = () => {\n  return po ? interactionCountEstimate : performance.interactionCount || 0;\n};\n\n/**\n * Feature detects native support or initializes the polyfill if needed.\n */\nconst initInteractionCountPolyfill = () => {\n  if ('interactionCount' in performance || po) return;\n  po = observe('event', updateEstimate, {\n    type: 'event',\n    buffered: true,\n    durationThreshold: 0\n  });\n};\nexport { getInteractionCount, initInteractionCountPolyfill };","map":{"version":3,"names":["interactionCountEstimate","minKnownInteractionId","Infinity","maxKnownInteractionId","updateEstimate","entries","forEach","e","interactionId","Math","min","max","po","getInteractionCount","performance","interactionCount","initInteractionCountPolyfill","observe","type","buffered","durationThreshold"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry-internal/browser-utils/src/metrics/web-vitals/lib/polyfills/interactionCountPolyfill.ts"],"sourcesContent":["/*\n * Copyright 2022 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { observe } from '../observe';\n\ndeclare global {\n  interface Performance {\n    interactionCount: number;\n  }\n}\n\nlet interactionCountEstimate = 0;\nlet minKnownInteractionId = Infinity;\nlet maxKnownInteractionId = 0;\n\nconst updateEstimate = (entries: PerformanceEventTiming[]) => {\n  entries.forEach(e => {\n    if (e.interactionId) {\n      minKnownInteractionId = Math.min(minKnownInteractionId, e.interactionId);\n      maxKnownInteractionId = Math.max(maxKnownInteractionId, e.interactionId);\n\n      interactionCountEstimate = maxKnownInteractionId ? (maxKnownInteractionId - minKnownInteractionId) / 7 + 1 : 0;\n    }\n  });\n};\n\nlet po: PerformanceObserver | undefined;\n\n/**\n * Returns the `interactionCount` value using the native API (if available)\n * or the polyfill estimate in this module.\n */\nexport const getInteractionCount = (): number => {\n  return po ? interactionCountEstimate : performance.interactionCount || 0;\n};\n\n/**\n * Feature detects native support or initializes the polyfill if needed.\n */\nexport const initInteractionCountPolyfill = (): void => {\n  if ('interactionCount' in performance || po) return;\n\n  po = observe('event', updateEstimate, {\n    type: 'event',\n    buffered: true,\n    durationThreshold: 0,\n  } as PerformanceObserverInit);\n};\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAUA,IAAIA,wBAAA,GAA2B,CAAC;AAChC,IAAIC,qBAAA,GAAwBC,QAAQ;AACpC,IAAIC,qBAAA,GAAwB,CAAC;AAE7B,MAAMC,cAAA,GAAkBC,OAAO,IAA+B;EAC5DA,OAAO,CAACC,OAAO,CAACC,CAAA,IAAK;IACnB,IAAIA,CAAC,CAACC,aAAa,EAAE;MACnBP,qBAAA,GAAwBQ,IAAI,CAACC,GAAG,CAACT,qBAAqB,EAAEM,CAAC,CAACC,aAAa,CAAC;MACxEL,qBAAA,GAAwBM,IAAI,CAACE,GAAG,CAACR,qBAAqB,EAAEI,CAAC,CAACC,aAAa,CAAC;MAExER,wBAAA,GAA2BG,qBAAA,GAAwB,CAACA,qBAAA,GAAwBF,qBAAqB,IAAI,IAAI,IAAI,CAAC;IACpH;EACA,CAAG,CAAC;AACJ,CAAC;AAED,IAAIW,EAAE;;AAEN;AACA;AACA;AACA;AACO,MAAMC,mBAAA,GAAsBA,CAAA,KAAc;EAC/C,OAAOD,EAAA,GAAKZ,wBAAA,GAA2Bc,WAAW,CAACC,gBAAA,IAAoB,CAAC;AAC1E;;AAEA;AACA;AACA;AACO,MAAMC,4BAAA,GAA+BA,CAAA,KAAY;EACtD,IAAI,sBAAsBF,WAAA,IAAeF,EAAE,EAAE;EAE7CA,EAAA,GAAKK,OAAO,CAAC,OAAO,EAAEb,cAAc,EAAE;IACpCc,IAAI,EAAE,OAAO;IACbC,QAAQ,EAAE,IAAI;IACdC,iBAAiB,EAAE;EACvB,EAA+B;AAC/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}