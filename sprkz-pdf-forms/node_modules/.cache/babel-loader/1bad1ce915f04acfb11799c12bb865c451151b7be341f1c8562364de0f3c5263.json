{"ast":null,"code":"import { CONSOLE_LEVELS, originalConsoleMethods } from '../utils/debug-logger.js';\nimport { fill } from '../utils/object.js';\nimport { GLOBAL_OBJ } from '../utils/worldwide.js';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers.js';\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nfunction addConsoleInstrumentationHandler(handler) {\n  const type = 'console';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentConsole);\n}\nfunction instrumentConsole() {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n  CONSOLE_LEVELS.forEach(function (level) {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod) {\n      originalConsoleMethods[level] = originalConsoleMethod;\n      return function (...args) {\n        const handlerData = {\n          args,\n          level\n        };\n        triggerHandlers('console', handlerData);\n        const log = originalConsoleMethods[level];\n        log?.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\nexport { addConsoleInstrumentationHandler };","map":{"version":3,"names":["addConsoleInstrumentationHandler","handler","type","addHandler","maybeInstrument","instrumentConsole","GLOBAL_OBJ","CONSOLE_LEVELS","forEach","level","console","fill","originalConsoleMethod","originalConsoleMethods","args","handlerData","triggerHandlers","log","apply"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/instrument/console.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\n/* eslint-disable @typescript-eslint/ban-types */\nimport type { ConsoleLevel, HandlerDataConsole } from '../types-hoist/instrument';\nimport { CONSOLE_LEVELS, originalConsoleMethods } from '../utils/debug-logger';\nimport { fill } from '../utils/object';\nimport { GLOBAL_OBJ } from '../utils/worldwide';\nimport { addHandler, maybeInstrument, triggerHandlers } from './handlers';\n\n/**\n * Add an instrumentation handler for when a console.xxx method is called.\n *\n * Use at your own risk, this might break without changelog notice, only used internally.\n * @hidden\n */\nexport function addConsoleInstrumentationHandler(handler: (data: HandlerDataConsole) => void): void {\n  const type = 'console';\n  addHandler(type, handler);\n  maybeInstrument(type, instrumentConsole);\n}\n\nfunction instrumentConsole(): void {\n  if (!('console' in GLOBAL_OBJ)) {\n    return;\n  }\n\n  CONSOLE_LEVELS.forEach(function (level: ConsoleLevel): void {\n    if (!(level in GLOBAL_OBJ.console)) {\n      return;\n    }\n\n    fill(GLOBAL_OBJ.console, level, function (originalConsoleMethod: () => any): Function {\n      originalConsoleMethods[level] = originalConsoleMethod;\n\n      return function (...args: any[]): void {\n        const handlerData: HandlerDataConsole = { args, level };\n        triggerHandlers('console', handlerData);\n\n        const log = originalConsoleMethods[level];\n        log?.apply(GLOBAL_OBJ.console, args);\n      };\n    });\n  });\n}\n"],"mappings":";;;;;AAQA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,gCAAgCA,CAACC,OAAO,EAA4C;EAClG,MAAMC,IAAA,GAAO,SAAS;EACtBC,UAAU,CAACD,IAAI,EAAED,OAAO,CAAC;EACzBG,eAAe,CAACF,IAAI,EAAEG,iBAAiB,CAAC;AAC1C;AAEA,SAASA,iBAAiBA,CAAA,EAAS;EACjC,IAAI,EAAE,aAAaC,UAAU,CAAC,EAAE;IAC9B;EACJ;EAEEC,cAAc,CAACC,OAAO,CAAC,UAAUC,KAAK,EAAsB;IAC1D,IAAI,EAAEA,KAAA,IAASH,UAAU,CAACI,OAAO,CAAC,EAAE;MAClC;IACN;IAEIC,IAAI,CAACL,UAAU,CAACI,OAAO,EAAED,KAAK,EAAE,UAAUG,qBAAqB,EAAuB;MACpFC,sBAAsB,CAACJ,KAAK,IAAIG,qBAAqB;MAErD,OAAO,UAAU,GAAGE,IAAI,EAAe;QACrC,MAAMC,WAAW,GAAuB;UAAED,IAAI;UAAEL;QAAA,CAAO;QACvDO,eAAe,CAAC,SAAS,EAAED,WAAW,CAAC;QAEvC,MAAME,GAAA,GAAMJ,sBAAsB,CAACJ,KAAK,CAAC;QACzCQ,GAAG,EAAEC,KAAK,CAACZ,UAAU,CAACI,OAAO,EAAEI,IAAI,CAAC;MAC5C,CAAO;IACP,CAAK,CAAC;EACN,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}