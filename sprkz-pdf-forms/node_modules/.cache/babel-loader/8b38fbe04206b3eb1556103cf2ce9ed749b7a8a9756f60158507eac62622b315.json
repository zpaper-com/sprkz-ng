{"ast":null,"code":"import { getGlobalScope, getCurrentScope, addBreadcrumb, getClient, addNonEnumerableProperty } from '@sentry/core';\nconst ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nconst ACTION_BREADCRUMB_TYPE = 'info';\nconst defaultOptions = {\n  attachReduxState: true,\n  actionTransformer: action => action,\n  stateTransformer: state => state || null\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions) {\n  // Note: We return an any type as to not have type conflicts.\n  const options = {\n    ...defaultOptions,\n    ...enhancerOptions\n  };\n  return next => (reducer, initialState) => {\n    options.attachReduxState && getGlobalScope().addEventProcessor((event, hint) => {\n      try {\n        // @ts-expect-error try catch to reduce bundle size\n        if (event.type === undefined && event.contexts.state.state.type === 'redux') {\n          hint.attachments = [...(hint.attachments || []),\n          // @ts-expect-error try catch to reduce bundle size\n          {\n            filename: 'redux_state.json',\n            data: JSON.stringify(event.contexts.state.state.value)\n          }];\n        }\n      } catch {\n        // empty\n      }\n      return event;\n    });\n    function sentryWrapReducer(reducer) {\n      return (state, action) => {\n        const newState = reducer(state, action);\n        const scope = getCurrentScope();\n\n        /* Action breadcrumbs */\n        const transformedAction = options.actionTransformer(action);\n        if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n          addBreadcrumb({\n            category: ACTION_BREADCRUMB_CATEGORY,\n            data: transformedAction,\n            type: ACTION_BREADCRUMB_TYPE\n          });\n        }\n\n        /* Set latest state to scope */\n        const transformedState = options.stateTransformer(newState);\n        if (typeof transformedState !== 'undefined' && transformedState !== null) {\n          const client = getClient();\n          const options = client?.getOptions();\n          const normalizationDepth = options?.normalizeDepth || 3; // default state normalization depth to 3\n\n          // Set the normalization depth of the redux state to the configured `normalizeDepth` option or a sane number as a fallback\n          const newStateContext = {\n            state: {\n              type: 'redux',\n              value: transformedState\n            }\n          };\n          addNonEnumerableProperty(newStateContext, '__sentry_override_normalization_depth__', 3 +\n          // 3 layers for `state.value.transformedState`\n          normalizationDepth // rest for the actual state\n          );\n          scope.setContext('state', newStateContext);\n        } else {\n          scope.setContext('state', null);\n        }\n\n        /* Allow user to configure scope with latest state */\n        const {\n          configureScopeWithState\n        } = options;\n        if (typeof configureScopeWithState === 'function') {\n          configureScopeWithState(scope, newState);\n        }\n        return newState;\n      };\n    }\n    const store = next(sentryWrapReducer(reducer), initialState);\n\n    // eslint-disable-next-line @typescript-eslint/unbound-method\n    store.replaceReducer = new Proxy(store.replaceReducer, {\n      apply: function (target, thisArg, args) {\n        target.apply(thisArg, [sentryWrapReducer(args[0])]);\n      }\n    });\n    return store;\n  };\n}\nexport { createReduxEnhancer };","map":{"version":3,"names":["ACTION_BREADCRUMB_CATEGORY","ACTION_BREADCRUMB_TYPE","defaultOptions","attachReduxState","actionTransformer","action","stateTransformer","state","createReduxEnhancer","enhancerOptions","options","next","reducer","initialState","getGlobalScope","addEventProcessor","event","hint","type","undefined","contexts","attachments","filename","data","JSON","stringify","value","sentryWrapReducer","newState","scope","getCurrentScope","transformedAction","addBreadcrumb","category","transformedState","client","getClient","getOptions","normalizationDepth","normalizeDepth","newStateContext","addNonEnumerableProperty","setContext","configureScopeWithState","store","replaceReducer","Proxy","apply","target","thisArg","args"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/react/src/redux.ts"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-explicit-any */\nimport type { Scope } from '@sentry/core';\nimport { addBreadcrumb, addNonEnumerableProperty, getClient, getCurrentScope, getGlobalScope } from '@sentry/core';\n\ninterface Action<T = any> {\n  type: T;\n}\n\ninterface AnyAction extends Action {\n  [extraProps: string]: any;\n}\n\ntype Reducer<S = any, A extends Action = AnyAction> = (state: S | undefined, action: A) => S;\n\ntype Dispatch<A extends Action = AnyAction> = <T extends A>(action: T, ...extraArgs: any[]) => T;\n\ntype ExtendState<State, Extension> = [Extension] extends [never] ? State : State & Extension;\n\ntype Unsubscribe = () => void;\n\ninterface Store<S = any, A extends Action = AnyAction, StateExt = never, Ext = Record<string, unknown>> {\n  dispatch: Dispatch<A>;\n  getState(): S;\n  subscribe(listener: () => void): Unsubscribe;\n  replaceReducer<NewState, NewActions extends Action>(\n    nextReducer: Reducer<NewState, NewActions>,\n  ): Store<ExtendState<NewState, StateExt>, NewActions, StateExt, Ext> & Ext;\n}\n\ndeclare const $CombinedState: unique symbol;\n\ntype CombinedState<S> = { readonly [$CombinedState]?: undefined } & S;\n\ntype PreloadedState<S> = Required<S> extends {\n  [$CombinedState]: undefined;\n}\n  ? S extends CombinedState<infer S1>\n    ? { [K in keyof S1]?: S1[K] extends Record<string, unknown> ? PreloadedState<S1[K]> : S1[K] }\n    : never\n  : { [K in keyof S]: S[K] extends string | number | boolean | symbol ? S[K] : PreloadedState<S[K]> };\n\ntype StoreEnhancerStoreCreator<Ext = Record<string, unknown>, StateExt = never> = <\n  S = any,\n  A extends Action = AnyAction,\n>(\n  reducer: Reducer<S, A>,\n  preloadedState?: PreloadedState<S>,\n) => Store<ExtendState<S, StateExt>, A, StateExt, Ext> & Ext;\n\nexport interface SentryEnhancerOptions<S = any> {\n  /**\n   * Redux state in attachments or not.\n   * @default true\n   */\n  attachReduxState?: boolean;\n\n  /**\n   * Transforms the state before attaching it to an event.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not attach the state.\n   */\n  stateTransformer(state: S | undefined): (S & any) | null;\n  /**\n   * Transforms the action before sending it as a breadcrumb.\n   * Use this to remove any private data before sending it to Sentry.\n   * Return null to not send the breadcrumb.\n   */\n  actionTransformer(action: AnyAction): AnyAction | null;\n  /**\n   * Called on every state update, configure the Sentry Scope with the redux state.\n   */\n  configureScopeWithState?(scope: Scope, state: S): void;\n}\n\nconst ACTION_BREADCRUMB_CATEGORY = 'redux.action';\nconst ACTION_BREADCRUMB_TYPE = 'info';\n\nconst defaultOptions: SentryEnhancerOptions = {\n  attachReduxState: true,\n  actionTransformer: action => action,\n  stateTransformer: state => state || null,\n};\n\n/**\n * Creates an enhancer that would be passed to Redux's createStore to log actions and the latest state to Sentry.\n *\n * @param enhancerOptions Options to pass to the enhancer\n */\nfunction createReduxEnhancer(enhancerOptions?: Partial<SentryEnhancerOptions>): any {\n  // Note: We return an any type as to not have type conflicts.\n  const options = {\n    ...defaultOptions,\n    ...enhancerOptions,\n  };\n\n  return (next: StoreEnhancerStoreCreator): StoreEnhancerStoreCreator =>\n    <S = any, A extends Action = AnyAction>(reducer: Reducer<S, A>, initialState?: PreloadedState<S>) => {\n      options.attachReduxState &&\n        getGlobalScope().addEventProcessor((event, hint) => {\n          try {\n            // @ts-expect-error try catch to reduce bundle size\n            if (event.type === undefined && event.contexts.state.state.type === 'redux') {\n              hint.attachments = [\n                ...(hint.attachments || []),\n                // @ts-expect-error try catch to reduce bundle size\n                { filename: 'redux_state.json', data: JSON.stringify(event.contexts.state.state.value) },\n              ];\n            }\n          } catch {\n            // empty\n          }\n          return event;\n        });\n\n      function sentryWrapReducer(reducer: Reducer<S, A>): Reducer<S, A> {\n        return (state, action): S => {\n          const newState = reducer(state, action);\n\n          const scope = getCurrentScope();\n\n          /* Action breadcrumbs */\n          const transformedAction = options.actionTransformer(action);\n          if (typeof transformedAction !== 'undefined' && transformedAction !== null) {\n            addBreadcrumb({\n              category: ACTION_BREADCRUMB_CATEGORY,\n              data: transformedAction,\n              type: ACTION_BREADCRUMB_TYPE,\n            });\n          }\n\n          /* Set latest state to scope */\n          const transformedState = options.stateTransformer(newState);\n          if (typeof transformedState !== 'undefined' && transformedState !== null) {\n            const client = getClient();\n            const options = client?.getOptions();\n            const normalizationDepth = options?.normalizeDepth || 3; // default state normalization depth to 3\n\n            // Set the normalization depth of the redux state to the configured `normalizeDepth` option or a sane number as a fallback\n            const newStateContext = { state: { type: 'redux', value: transformedState } };\n            addNonEnumerableProperty(\n              newStateContext,\n              '__sentry_override_normalization_depth__',\n              3 + // 3 layers for `state.value.transformedState`\n                normalizationDepth, // rest for the actual state\n            );\n\n            scope.setContext('state', newStateContext);\n          } else {\n            scope.setContext('state', null);\n          }\n\n          /* Allow user to configure scope with latest state */\n          const { configureScopeWithState } = options;\n          if (typeof configureScopeWithState === 'function') {\n            configureScopeWithState(scope, newState);\n          }\n\n          return newState;\n        };\n      }\n\n      const store = next(sentryWrapReducer(reducer), initialState);\n\n      // eslint-disable-next-line @typescript-eslint/unbound-method\n      store.replaceReducer = new Proxy(store.replaceReducer, {\n        apply: function (target, thisArg, args) {\n          target.apply(thisArg, [sentryWrapReducer(args[0])]);\n        },\n      });\n\n      return store;\n    };\n}\n\nexport { createReduxEnhancer };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}