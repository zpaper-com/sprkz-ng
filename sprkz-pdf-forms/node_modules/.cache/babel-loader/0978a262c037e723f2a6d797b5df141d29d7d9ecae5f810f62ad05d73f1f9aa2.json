{"ast":null,"code":"import { makeDsn, dsnToString } from './utils/dsn.js';\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn) {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn) {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn, sdkInfo) {\n  const params = {\n    sentry_version: SENTRY_API_VERSION\n  };\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nfunction getEnvelopeEndpointWithUrlEncodedAuth(dsn, tunnel, sdkInfo) {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nfunction getReportDialogEndpoint(dsnLike, dialogOptions) {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n    if (key === 'onClose') {\n      continue;\n    }\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key])}`;\n    }\n  }\n  return `${endpoint}?${encodedOptions}`;\n}\nexport { getEnvelopeEndpointWithUrlEncodedAuth, getReportDialogEndpoint };","map":{"version":3,"names":["SENTRY_API_VERSION","getBaseApiEndpoint","dsn","protocol","port","host","path","_getIngestEndpoint","projectId","_encodedAuth","sdkInfo","params","sentry_version","publicKey","sentry_key","sentry_client","name","version","URLSearchParams","toString","getEnvelopeEndpointWithUrlEncodedAuth","tunnel","getReportDialogEndpoint","dsnLike","dialogOptions","makeDsn","endpoint","encodedOptions","dsnToString","key","user","encodeURIComponent","email"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/core/src/api.ts"],"sourcesContent":["import type { ReportDialogOptions } from './report-dialog';\nimport type { DsnComponents, DsnLike } from './types-hoist/dsn';\nimport type { SdkInfo } from './types-hoist/sdkinfo';\nimport { dsnToString, makeDsn } from './utils/dsn';\n\nconst SENTRY_API_VERSION = '7';\n\n/** Returns the prefix to construct Sentry ingestion API endpoints. */\nfunction getBaseApiEndpoint(dsn: DsnComponents): string {\n  const protocol = dsn.protocol ? `${dsn.protocol}:` : '';\n  const port = dsn.port ? `:${dsn.port}` : '';\n  return `${protocol}//${dsn.host}${port}${dsn.path ? `/${dsn.path}` : ''}/api/`;\n}\n\n/** Returns the ingest API endpoint for target. */\nfunction _getIngestEndpoint(dsn: DsnComponents): string {\n  return `${getBaseApiEndpoint(dsn)}${dsn.projectId}/envelope/`;\n}\n\n/** Returns a URL-encoded string with auth config suitable for a query string. */\nfunction _encodedAuth(dsn: DsnComponents, sdkInfo: SdkInfo | undefined): string {\n  const params: Record<string, string> = {\n    sentry_version: SENTRY_API_VERSION,\n  };\n\n  if (dsn.publicKey) {\n    // We send only the minimum set of required information. See\n    // https://github.com/getsentry/sentry-javascript/issues/2572.\n    params.sentry_key = dsn.publicKey;\n  }\n\n  if (sdkInfo) {\n    params.sentry_client = `${sdkInfo.name}/${sdkInfo.version}`;\n  }\n\n  return new URLSearchParams(params).toString();\n}\n\n/**\n * Returns the envelope endpoint URL with auth in the query string.\n *\n * Sending auth as part of the query string and not as custom HTTP headers avoids CORS preflight requests.\n */\nexport function getEnvelopeEndpointWithUrlEncodedAuth(dsn: DsnComponents, tunnel?: string, sdkInfo?: SdkInfo): string {\n  return tunnel ? tunnel : `${_getIngestEndpoint(dsn)}?${_encodedAuth(dsn, sdkInfo)}`;\n}\n\n/** Returns the url to the report dialog endpoint. */\nexport function getReportDialogEndpoint(dsnLike: DsnLike, dialogOptions: ReportDialogOptions): string {\n  const dsn = makeDsn(dsnLike);\n  if (!dsn) {\n    return '';\n  }\n\n  const endpoint = `${getBaseApiEndpoint(dsn)}embed/error-page/`;\n\n  let encodedOptions = `dsn=${dsnToString(dsn)}`;\n  for (const key in dialogOptions) {\n    if (key === 'dsn') {\n      continue;\n    }\n\n    if (key === 'onClose') {\n      continue;\n    }\n\n    if (key === 'user') {\n      const user = dialogOptions.user;\n      if (!user) {\n        continue;\n      }\n      if (user.name) {\n        encodedOptions += `&name=${encodeURIComponent(user.name)}`;\n      }\n      if (user.email) {\n        encodedOptions += `&email=${encodeURIComponent(user.email)}`;\n      }\n    } else {\n      encodedOptions += `&${encodeURIComponent(key)}=${encodeURIComponent(dialogOptions[key] as string)}`;\n    }\n  }\n\n  return `${endpoint}?${encodedOptions}`;\n}\n"],"mappings":";AAKA,MAAMA,kBAAA,GAAqB,GAAG;;AAE9B;AACA,SAASC,kBAAkBA,CAACC,GAAG,EAAyB;EACtD,MAAMC,QAAA,GAAWD,GAAG,CAACC,QAAA,GAAW,GAACD,GAAA,CAAAC,QAAA;EACA,MAAAC,IAAA,GAAAF,GAAA,CAAAE,IAAA,OAAAF,GAAA,CAAAE,IAAA;EACA,UAAAD,QAAA,KAAAD,GAAA,CAAAG,IAAA,GAAAD,IAAA,GAAAF,GAAA,CAAAI,IAAA,OAAAJ,GAAA,CAAAI,IAAA;AACA;;AAEA;AACA,SAAAC,mBAAAL,GAAA;EACA,UAAAD,kBAAA,CAAAC,GAAA,IAAAA,GAAA,CAAAM,SAAA;AACA;;AAEA;AACA,SAAAC,aAAAP,GAAA,EAAAQ,OAAA;EACA,MAAAC,MAAA;IACAC,cAAA,EAAAZ;EACA;EAEA,IAAAE,GAAA,CAAAW,SAAA;IACA;IACA;IACAF,MAAA,CAAAG,UAAA,GAAAZ,GAAA,CAAAW,SAAA;EACA;EAEA,IAAAH,OAAA;IACAC,MAAA,CAAAI,aAAA,MAAAL,OAAA,CAAAM,IAAA,IAAAN,OAAA,CAAAO,OAAA;EACA;EAEA,WAAAC,eAAA,CAAAP,MAAA,EAAAQ,QAAA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,SAAAC,sCAAAlB,GAAA,EAAAmB,MAAA,EAAAX,OAAA;EACA,OAAAW,MAAA,GAAAA,MAAA,MAAAd,kBAAA,CAAAL,GAAA,KAAAO,YAAA,CAAAP,GAAA,EAAAQ,OAAA;AACA;;AAEA;AACA,SAAAY,wBAAAC,OAAA,EAAAC,aAAA;EACA,MAAAtB,GAAA,GAAAuB,OAAA,CAAAF,OAAA;EACA,KAAArB,GAAA;IACA;EACA;EAEA,MAAAwB,QAAA,MAAAzB,kBAAA,CAAAC,GAAA;EAEA,IAAAyB,cAAA,UAAAC,WAAA,CAAA1B,GAAA;EACA,WAAA2B,GAAA,IAAAL,aAAA;IACA,IAAAK,GAAA;MACA;IACA;IAEA,IAAAA,GAAA;MACA;IACA;IAEA,IAAAA,GAAA;MACA,MAAAC,IAAA,GAAAN,aAAA,CAAAM,IAAA;MACA,KAAAA,IAAA;QACA;MACA;MACA,IAAAA,IAAA,CAAAd,IAAA;QACAW,cAAA,aAAAI,kBAAA,CAAAD,IAAA,CAAAd,IAAA;MACA;MACA,IAAAc,IAAA,CAAAE,KAAA;QACAL,cAAA,cAAAI,kBAAA,CAAAD,IAAA,CAAAE,KAAA;MACA;IACA;MACAL,cAAA,QAAAI,kBAAA,CAAAF,GAAA,KAAAE,kBAAA,CAAAP,aAAA,CAAAK,GAAA;IACA;EACA;EAEA,UAAAH,QAAA,IAAAC,cAAA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}