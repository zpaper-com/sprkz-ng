{"ast":null,"code":"import { defineIntegration, applyAggregateErrorsToEvent } from '@sentry/core';\nimport { exceptionFromError } from '../eventbuilder.js';\nconst DEFAULT_KEY = 'cause';\nconst DEFAULT_LIMIT = 5;\nconst INTEGRATION_NAME = 'LinkedErrors';\nconst _linkedErrorsIntegration = function () {\n  let options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n  const limit = options.limit || DEFAULT_LIMIT;\n  const key = options.key || DEFAULT_KEY;\n  return {\n    name: INTEGRATION_NAME,\n    preprocessEvent(event, hint, client) {\n      const options = client.getOptions();\n      applyAggregateErrorsToEvent(\n      // This differs from the LinkedErrors integration in core by using a different exceptionFromError function\n      exceptionFromError, options.stackParser, key, limit, event, hint);\n    }\n  };\n};\n\n/**\n * Aggregrate linked errors in an event.\n */\nconst linkedErrorsIntegration = defineIntegration(_linkedErrorsIntegration);\nexport { linkedErrorsIntegration };\n//# sourceMappingURL=linkederrors.js.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}