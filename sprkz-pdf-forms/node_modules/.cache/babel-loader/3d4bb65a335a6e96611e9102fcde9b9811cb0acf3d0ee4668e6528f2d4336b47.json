{"ast":null,"code":"import { defineIntegration, addGlobalErrorInstrumentationHandler, getClient, captureEvent, debug, addGlobalUnhandledRejectionInstrumentationHandler, isPrimitive, isString, getLocationHref, UNKNOWN_FUNCTION } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build.js';\nimport { eventFromUnknownInput } from '../eventbuilder.js';\nimport { shouldIgnoreOnError } from '../helpers.js';\nconst INTEGRATION_NAME = 'GlobalHandlers';\nconst _globalHandlersIntegration = (options = {}) => {\n  const _options = {\n    onerror: true,\n    onunhandledrejection: true,\n    ...options\n  };\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      Error.stackTraceLimit = 50;\n    },\n    setup(client) {\n      if (_options.onerror) {\n        _installGlobalOnErrorHandler(client);\n        globalHandlerLog('onerror');\n      }\n      if (_options.onunhandledrejection) {\n        _installGlobalOnUnhandledRejectionHandler(client);\n        globalHandlerLog('onunhandledrejection');\n      }\n    }\n  };\n};\nconst globalHandlersIntegration = defineIntegration(_globalHandlersIntegration);\nfunction _installGlobalOnErrorHandler(client) {\n  addGlobalErrorInstrumentationHandler(data => {\n    const {\n      stackParser,\n      attachStacktrace\n    } = getOptions();\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n    const {\n      msg,\n      url,\n      line,\n      column,\n      error\n    } = data;\n    const event = _enhanceEventWithInitialFrame(eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false), url, line, column);\n    event.level = 'error';\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onerror'\n      }\n    });\n  });\n}\nfunction _installGlobalOnUnhandledRejectionHandler(client) {\n  addGlobalUnhandledRejectionInstrumentationHandler(e => {\n    const {\n      stackParser,\n      attachStacktrace\n    } = getOptions();\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n    const error = _getUnhandledRejectionError(e);\n    const event = isPrimitive(error) ? _eventFromRejectionWithPrimitive(error) : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n    event.level = 'error';\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection'\n      }\n    });\n  });\n}\nfunction _getUnhandledRejectionError(error) {\n  if (isPrimitive(error)) {\n    return error;\n  }\n\n  // dig the object of the rejection out of known event types\n  try {\n    // PromiseRejectionEvents store the object of the rejection under 'reason'\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n    if ('reason' in error) {\n      return error.reason;\n    }\n\n    // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n    // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n    // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n    // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n    // https://github.com/getsentry/sentry-javascript/issues/2380\n    if ('detail' in error && 'reason' in error.detail) {\n      return error.detail.reason;\n    }\n  } catch {} // eslint-disable-line no-empty\n\n  return error;\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason) {\n  return {\n    exception: {\n      values: [{\n        type: 'UnhandledRejection',\n        // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n        value: `Non-Error promise rejection captured with value: ${String(reason)}`\n      }]\n    }\n  };\n}\nfunction _enhanceEventWithInitialFrame(event, url, line, column) {\n  // event.exception\n  const e = event.exception = event.exception || {};\n  // event.exception.values\n  const ev = e.values = e.values || [];\n  // event.exception.values[0]\n  const ev0 = ev[0] = ev[0] || {};\n  // event.exception.values[0].stacktrace\n  const ev0s = ev0.stacktrace = ev0.stacktrace || {};\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = ev0s.frames = ev0s.frames || [];\n  const colno = column;\n  const lineno = line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: UNKNOWN_FUNCTION,\n      in_app: true,\n      lineno\n    });\n  }\n  return event;\n}\nfunction globalHandlerLog(type) {\n  DEBUG_BUILD && debug.log(`Global Handler attached: ${type}`);\n}\nfunction getOptions() {\n  const client = getClient();\n  const options = client?.getOptions() || {\n    stackParser: () => [],\n    attachStacktrace: false\n  };\n  return options;\n}\nexport { globalHandlersIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_globalHandlersIntegration","options","_options","onerror","onunhandledrejection","name","setupOnce","Error","stackTraceLimit","setup","client","_installGlobalOnErrorHandler","globalHandlerLog","_installGlobalOnUnhandledRejectionHandler","globalHandlersIntegration","defineIntegration","addGlobalErrorInstrumentationHandler","data","stackParser","attachStacktrace","getOptions","getClient","shouldIgnoreOnError","msg","url","line","column","error","event","_enhanceEventWithInitialFrame","eventFromUnknownInput","undefined","level","captureEvent","originalException","mechanism","handled","type","addGlobalUnhandledRejectionInstrumentationHandler","e","_getUnhandledRejectionError","isPrimitive","_eventFromRejectionWithPrimitive","reason","detail","exception","values","value","String","ev","ev0","ev0s","stacktrace","ev0sf","frames","colno","lineno","filename","isString","length","getLocationHref","push","function","UNKNOWN_FUNCTION","in_app","DEBUG_BUILD","debug","log"],"sources":["/home/shawnstorie/sprkz-ng/sprkz-pdf-forms/node_modules/@sentry/browser/src/integrations/globalhandlers.ts"],"sourcesContent":["import type { Client, Event, IntegrationFn, Primitive, StackParser } from '@sentry/core';\nimport {\n  addGlobalErrorInstrumentationHandler,\n  addGlobalUnhandledRejectionInstrumentationHandler,\n  captureEvent,\n  debug,\n  defineIntegration,\n  getClient,\n  getLocationHref,\n  isPrimitive,\n  isString,\n  UNKNOWN_FUNCTION,\n} from '@sentry/core';\nimport type { BrowserClient } from '../client';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { eventFromUnknownInput } from '../eventbuilder';\nimport { shouldIgnoreOnError } from '../helpers';\n\ntype GlobalHandlersIntegrationsOptionKeys = 'onerror' | 'onunhandledrejection';\n\ntype GlobalHandlersIntegrations = Record<GlobalHandlersIntegrationsOptionKeys, boolean>;\n\nconst INTEGRATION_NAME = 'GlobalHandlers';\n\nconst _globalHandlersIntegration = ((options: Partial<GlobalHandlersIntegrations> = {}) => {\n  const _options = {\n    onerror: true,\n    onunhandledrejection: true,\n    ...options,\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      Error.stackTraceLimit = 50;\n    },\n    setup(client) {\n      if (_options.onerror) {\n        _installGlobalOnErrorHandler(client);\n        globalHandlerLog('onerror');\n      }\n      if (_options.onunhandledrejection) {\n        _installGlobalOnUnhandledRejectionHandler(client);\n        globalHandlerLog('onunhandledrejection');\n      }\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const globalHandlersIntegration = defineIntegration(_globalHandlersIntegration);\n\nfunction _installGlobalOnErrorHandler(client: Client): void {\n  addGlobalErrorInstrumentationHandler(data => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const { msg, url, line, column, error } = data;\n\n    const event = _enhanceEventWithInitialFrame(\n      eventFromUnknownInput(stackParser, error || msg, undefined, attachStacktrace, false),\n      url,\n      line,\n      column,\n    );\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onerror',\n      },\n    });\n  });\n}\n\nfunction _installGlobalOnUnhandledRejectionHandler(client: Client): void {\n  addGlobalUnhandledRejectionInstrumentationHandler(e => {\n    const { stackParser, attachStacktrace } = getOptions();\n\n    if (getClient() !== client || shouldIgnoreOnError()) {\n      return;\n    }\n\n    const error = _getUnhandledRejectionError(e as unknown);\n\n    const event = isPrimitive(error)\n      ? _eventFromRejectionWithPrimitive(error)\n      : eventFromUnknownInput(stackParser, error, undefined, attachStacktrace, true);\n\n    event.level = 'error';\n\n    captureEvent(event, {\n      originalException: error,\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n  });\n}\n\nfunction _getUnhandledRejectionError(error: unknown): unknown {\n  if (isPrimitive(error)) {\n    return error;\n  }\n\n  // dig the object of the rejection out of known event types\n  try {\n    type ErrorWithReason = { reason: unknown };\n    // PromiseRejectionEvents store the object of the rejection under 'reason'\n    // see https://developer.mozilla.org/en-US/docs/Web/API/PromiseRejectionEvent\n    if ('reason' in (error as ErrorWithReason)) {\n      return (error as ErrorWithReason).reason;\n    }\n\n    type CustomEventWithDetail = { detail: { reason: unknown } };\n    // something, somewhere, (likely a browser extension) effectively casts PromiseRejectionEvents\n    // to CustomEvents, moving the `promise` and `reason` attributes of the PRE into\n    // the CustomEvent's `detail` attribute, since they're not part of CustomEvent's spec\n    // see https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent and\n    // https://github.com/getsentry/sentry-javascript/issues/2380\n    if ('detail' in (error as CustomEventWithDetail) && 'reason' in (error as CustomEventWithDetail).detail) {\n      return (error as CustomEventWithDetail).detail.reason;\n    }\n  } catch {} // eslint-disable-line no-empty\n\n  return error;\n}\n\n/**\n * Create an event from a promise rejection where the `reason` is a primitive.\n *\n * @param reason: The `reason` property of the promise rejection\n * @returns An Event object with an appropriate `exception` value\n */\nfunction _eventFromRejectionWithPrimitive(reason: Primitive): Event {\n  return {\n    exception: {\n      values: [\n        {\n          type: 'UnhandledRejection',\n          // String() is needed because the Primitive type includes symbols (which can't be automatically stringified)\n          value: `Non-Error promise rejection captured with value: ${String(reason)}`,\n        },\n      ],\n    },\n  };\n}\n\nfunction _enhanceEventWithInitialFrame(\n  event: Event,\n  url: string | undefined,\n  line: number | undefined,\n  column: number | undefined,\n): Event {\n  // event.exception\n  const e = (event.exception = event.exception || {});\n  // event.exception.values\n  const ev = (e.values = e.values || []);\n  // event.exception.values[0]\n  const ev0 = (ev[0] = ev[0] || {});\n  // event.exception.values[0].stacktrace\n  const ev0s = (ev0.stacktrace = ev0.stacktrace || {});\n  // event.exception.values[0].stacktrace.frames\n  const ev0sf = (ev0s.frames = ev0s.frames || []);\n\n  const colno = column;\n  const lineno = line;\n  const filename = isString(url) && url.length > 0 ? url : getLocationHref();\n\n  // event.exception.values[0].stacktrace.frames\n  if (ev0sf.length === 0) {\n    ev0sf.push({\n      colno,\n      filename,\n      function: UNKNOWN_FUNCTION,\n      in_app: true,\n      lineno,\n    });\n  }\n\n  return event;\n}\n\nfunction globalHandlerLog(type: string): void {\n  DEBUG_BUILD && debug.log(`Global Handler attached: ${type}`);\n}\n\nfunction getOptions(): { stackParser: StackParser; attachStacktrace?: boolean } {\n  const client = getClient<BrowserClient>();\n  const options = client?.getOptions() || {\n    stackParser: () => [],\n    attachStacktrace: false,\n  };\n  return options;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}