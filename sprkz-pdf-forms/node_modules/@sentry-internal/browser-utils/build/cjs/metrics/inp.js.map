{"version":3,"file":"inp.js","sources":["../../../src/metrics/inp.ts"],"sourcesContent":["import type { Span, SpanAttributes } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  getActiveSpan,\n  getCurrentScope,\n  getRootSpan,\n  htmlTreeAsString,\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n  spanToJSON,\n} from '@sentry/core';\nimport type { InstrumentationHandlerCallback } from './instrument';\nimport {\n  addInpInstrumentationHandler,\n  addPerformanceInstrumentationHandler,\n  isPerformanceEventTiming,\n} from './instrument';\nimport { getBrowserPerformanceAPI, msToSec, startStandaloneWebVitalSpan } from './utils';\n\nconst LAST_INTERACTIONS: number[] = [];\nconst INTERACTIONS_SPAN_MAP = new Map<number, Span>();\n\n/**\n * 60 seconds is the maximum for a plausible INP value\n * (source: Me)\n */\nconst MAX_PLAUSIBLE_INP_DURATION = 60;\n/**\n * Start tracking INP webvital events.\n */\nexport function startTrackingINP(): () => void {\n  const performance = getBrowserPerformanceAPI();\n  if (performance && browserPerformanceTimeOrigin()) {\n    const inpCallback = _trackINP();\n\n    return (): void => {\n      inpCallback();\n    };\n  }\n\n  return () => undefined;\n}\n\nconst INP_ENTRY_MAP: Record<string, 'click' | 'hover' | 'drag' | 'press'> = {\n  click: 'click',\n  pointerdown: 'click',\n  pointerup: 'click',\n  mousedown: 'click',\n  mouseup: 'click',\n  touchstart: 'click',\n  touchend: 'click',\n  mouseover: 'hover',\n  mouseout: 'hover',\n  mouseenter: 'hover',\n  mouseleave: 'hover',\n  pointerover: 'hover',\n  pointerout: 'hover',\n  pointerenter: 'hover',\n  pointerleave: 'hover',\n  dragstart: 'drag',\n  dragend: 'drag',\n  drag: 'drag',\n  dragenter: 'drag',\n  dragleave: 'drag',\n  dragover: 'drag',\n  drop: 'drag',\n  keydown: 'press',\n  keyup: 'press',\n  keypress: 'press',\n  input: 'press',\n};\n\n/** Starts tracking the Interaction to Next Paint on the current page. #\n * exported only for testing\n */\nexport function _trackINP(): () => void {\n  return addInpInstrumentationHandler(_onInp);\n}\n\n/**\n * exported only for testing\n */\nexport const _onInp: InstrumentationHandlerCallback = ({ metric }) => {\n  if (metric.value == undefined) {\n    return;\n  }\n\n  const duration = msToSec(metric.value);\n\n  // We received occasional reports of hour-long INP values.\n  // Therefore, we add a sanity check to avoid creating spans for\n  // unrealistically long INP durations.\n  if (duration > MAX_PLAUSIBLE_INP_DURATION) {\n    return;\n  }\n\n  const entry = metric.entries.find(entry => entry.duration === metric.value && INP_ENTRY_MAP[entry.name]);\n\n  if (!entry) {\n    return;\n  }\n\n  const { interactionId } = entry;\n  const interactionType = INP_ENTRY_MAP[entry.name];\n\n  /** Build the INP span, create an envelope from the span, and then send the envelope */\n  const startTime = msToSec((browserPerformanceTimeOrigin() as number) + entry.startTime);\n  const activeSpan = getActiveSpan();\n  const rootSpan = activeSpan ? getRootSpan(activeSpan) : undefined;\n\n  // We first try to lookup the span from our INTERACTIONS_SPAN_MAP,\n  // where we cache the route per interactionId\n  const cachedSpan = interactionId != null ? INTERACTIONS_SPAN_MAP.get(interactionId) : undefined;\n\n  const spanToUse = cachedSpan || rootSpan;\n\n  // Else, we try to use the active span.\n  // Finally, we fall back to look at the transactionName on the scope\n  const routeName = spanToUse ? spanToJSON(spanToUse).description : getCurrentScope().getScopeData().transactionName;\n\n  const name = htmlTreeAsString(entry.target);\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.inp',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: `ui.interaction.${interactionType}`,\n    [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: entry.duration,\n  };\n\n  const span = startStandaloneWebVitalSpan({\n    name,\n    transaction: routeName,\n    attributes,\n    startTime,\n  });\n\n  if (span) {\n    span.addEvent('inp', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: 'millisecond',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: metric.value,\n    });\n\n    span.end(startTime + duration);\n  }\n};\n\n/**\n * Register a listener to cache route information for INP interactions.\n */\nexport function registerInpInteractionListener(): void {\n  const handleEntries = ({ entries }: { entries: PerformanceEntry[] }): void => {\n    const activeSpan = getActiveSpan();\n    const activeRootSpan = activeSpan && getRootSpan(activeSpan);\n\n    entries.forEach(entry => {\n      if (!isPerformanceEventTiming(entry) || !activeRootSpan) {\n        return;\n      }\n\n      const interactionId = entry.interactionId;\n      if (interactionId == null) {\n        return;\n      }\n\n      // If the interaction was already recorded before, nothing more to do\n      if (INTERACTIONS_SPAN_MAP.has(interactionId)) {\n        return;\n      }\n\n      // We keep max. 10 interactions in the list, then remove the oldest one & clean up\n      if (LAST_INTERACTIONS.length > 10) {\n        const last = LAST_INTERACTIONS.shift() as number;\n        INTERACTIONS_SPAN_MAP.delete(last);\n      }\n\n      // We add the interaction to the list of recorded interactions\n      // and store the span for this interaction\n      LAST_INTERACTIONS.push(interactionId);\n      INTERACTIONS_SPAN_MAP.set(interactionId, activeRootSpan);\n    });\n  };\n\n  addPerformanceInstrumentationHandler('event', handleEntries);\n  addPerformanceInstrumentationHandler('first-input', handleEntries);\n}\n"],"names":["getBrowserPerformanceAPI","browserPerformanceTimeOrigin","addInpInstrumentationHandler","msToSec","getActiveSpan","getRootSpan","spanToJSON","getCurrentScope","htmlTreeAsString","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME","startStandaloneWebVitalSpan","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE","isPerformanceEventTiming","addPerformanceInstrumentationHandler"],"mappings":"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"}