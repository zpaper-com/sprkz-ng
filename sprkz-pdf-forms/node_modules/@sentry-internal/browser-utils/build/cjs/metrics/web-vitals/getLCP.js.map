{"version":3,"file":"getLCP.js","sources":["../../../../src/metrics/web-vitals/getLCP.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { getActivationStart } from './lib/getActivationStart';\nimport { getVisibilityWatcher } from './lib/getVisibilityWatcher';\nimport { initMetric } from './lib/initMetric';\nimport { initUnique } from './lib/initUnique';\nimport { LCPEntryManager } from './lib/LCPEntryManager';\nimport { observe } from './lib/observe';\nimport { runOnce } from './lib/runOnce';\nimport { whenActivated } from './lib/whenActivated';\nimport { whenIdleOrHidden } from './lib/whenIdleOrHidden';\nimport type { LCPMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for LCP. See https://web.dev/articles/lcp#what_is_a_good_lcp_score */\nexport const LCPThresholds: MetricRatingThresholds = [2500, 4000];\n\n/**\n * Calculates the [LCP](https://web.dev/articles/lcp) value for the current page and\n * calls the `callback` function once the value is ready (along with the\n * relevant `largest-contentful-paint` performance entry used to determine the\n * value). The reported value is a `DOMHighResTimeStamp`.\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called any time a new `largest-contentful-paint`\n * performance entry is dispatched, or once the final value of the metric has\n * been determined.\n */\nexport const onLCP = (onReport: (metric: LCPMetric) => void, opts: ReportOpts = {}) => {\n  whenActivated(() => {\n    const visibilityWatcher = getVisibilityWatcher();\n    const metric = initMetric('LCP');\n    let report: ReturnType<typeof bindReporter>;\n\n    const lcpEntryManager = initUnique(opts, LCPEntryManager);\n\n    const handleEntries = (entries: LCPMetric['entries']) => {\n      // If reportAllChanges is set then call this function for each entry,\n      // otherwise only consider the last one.\n      if (!opts!.reportAllChanges) {\n        // eslint-disable-next-line no-param-reassign\n        entries = entries.slice(-1);\n      }\n\n      for (const entry of entries) {\n        lcpEntryManager._processEntry(entry);\n\n        // Only report if the page wasn't hidden prior to LCP.\n        if (entry.startTime < visibilityWatcher.firstHiddenTime) {\n          // The startTime attribute returns the value of the renderTime if it is\n          // not 0, and the value of the loadTime otherwise. The activationStart\n          // reference is used because LCP should be relative to page activation\n          // rather than navigation start if the page was prerendered. But in cases\n          // where `activationStart` occurs after the LCP, this time should be\n          // clamped at 0.\n          metric.value = Math.max(entry.startTime - getActivationStart(), 0);\n          metric.entries = [entry];\n          report();\n        }\n      }\n    };\n\n    const po = observe('largest-contentful-paint', handleEntries);\n\n    if (po) {\n      report = bindReporter(onReport, metric, LCPThresholds, opts.reportAllChanges);\n\n      // Ensure this logic only runs once, since it can be triggered from\n      // any of three different event listeners below.\n      const stopListening = runOnce(() => {\n        handleEntries(po.takeRecords() as LCPMetric['entries']);\n        po.disconnect();\n        report(true);\n      });\n\n      // Stop listening after input or visibilitychange.\n      // Note: while scrolling is an input that stops LCP observation, it's\n      // unreliable since it can be programmatically generated.\n      // See: https://github.com/GoogleChrome/web-vitals/issues/75\n      for (const type of ['keydown', 'click', 'visibilitychange']) {\n        // Wrap the listener in an idle callback so it's run in a separate\n        // task to reduce potential INP impact.\n        // https://github.com/GoogleChrome/web-vitals/issues/383\n        if (WINDOW.document) {\n          addEventListener(type, () => whenIdleOrHidden(stopListening), {\n            capture: true,\n            once: true,\n          });\n        }\n      }\n    }\n  });\n};\n"],"names":["whenActivated","getVisibilityWatcher","initMetric","initUnique","LCPEntryManager","getActivationStart","observe","bindReporter","runOnce","WINDOW","whenIdleOrHidden"],"mappings":";;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAeA;AACO,MAAM,aAAa,GAA2B,CAAC,IAAI,EAAE,IAAI;;AAEhE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,KAAA,GAAQ,CAAC,QAAQ,EAA+B,IAAI,GAAe,EAAE,KAAK;AACvF,EAAEA,2BAAa,CAAC,MAAM;AACtB,IAAI,MAAM,iBAAA,GAAoBC,yCAAoB,EAAE;AACpD,IAAI,MAAM,MAAA,GAASC,qBAAU,CAAC,KAAK,CAAC;AACpC,IAAI,IAAI,MAAM;;AAEd,IAAI,MAAM,kBAAkBC,qBAAU,CAAC,IAAI,EAAEC,+BAAe,CAAC;;AAE7D,IAAI,MAAM,aAAA,GAAgB,CAAC,OAAO,KAA2B;AAC7D;AACA;AACA,MAAM,IAAI,CAAC,IAAI,CAAE,gBAAgB,EAAE;AACnC;AACA,QAAQ,OAAA,GAAU,OAAO,CAAC,KAAK,CAAC,EAAE,CAAC;AACnC;;AAEA,MAAM,KAAK,MAAM,KAAA,IAAS,OAAO,EAAE;AACnC,QAAQ,eAAe,CAAC,aAAa,CAAC,KAAK,CAAC;;AAE5C;AACA,QAAQ,IAAI,KAAK,CAAC,YAAY,iBAAiB,CAAC,eAAe,EAAE;AACjE;AACA;AACA;AACA;AACA;AACA;AACA,UAAU,MAAM,CAAC,KAAA,GAAQ,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,YAAYC,qCAAkB,EAAE,EAAE,CAAC,CAAC;AAC5E,UAAU,MAAM,CAAC,OAAA,GAAU,CAAC,KAAK,CAAC;AAClC,UAAU,MAAM,EAAE;AAClB;AACA;AACA,KAAK;;AAEL,IAAI,MAAM,KAAKC,eAAO,CAAC,0BAA0B,EAAE,aAAa,CAAC;;AAEjE,IAAI,IAAI,EAAE,EAAE;AACZ,MAAM,MAAA,GAASC,yBAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAE,IAAI,CAAC,gBAAgB,CAAC;;AAEnF;AACA;AACA,MAAM,MAAM,aAAA,GAAgBC,eAAO,CAAC,MAAM;AAC1C,QAAQ,aAAa,CAAC,EAAE,CAAC,WAAW,IAA2B;AAC/D,QAAQ,EAAE,CAAC,UAAU,EAAE;AACvB,QAAQ,MAAM,CAAC,IAAI,CAAC;AACpB,OAAO,CAAC;;AAER;AACA;AACA;AACA;AACA,MAAM,KAAK,MAAM,IAAA,IAAQ,CAAC,SAAS,EAAE,OAAO,EAAE,kBAAkB,CAAC,EAAE;AACnE;AACA;AACA;AACA,QAAQ,IAAIC,YAAM,CAAC,QAAQ,EAAE;AAC7B,UAAU,gBAAgB,CAAC,IAAI,EAAE,MAAMC,iCAAgB,CAAC,aAAa,CAAC,EAAE;AACxE,YAAY,OAAO,EAAE,IAAI;AACzB,YAAY,IAAI,EAAE,IAAI;AACtB,WAAW,CAAC;AACZ;AACA;AACA;AACA,GAAG,CAAC;AACJ;;;;;"}