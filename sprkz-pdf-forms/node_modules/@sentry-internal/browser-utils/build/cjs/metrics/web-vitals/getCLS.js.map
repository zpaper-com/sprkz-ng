{"version":3,"file":"getCLS.js","sources":["../../../../src/metrics/web-vitals/getCLS.ts"],"sourcesContent":["/*\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { WINDOW } from '../../types';\nimport { bindReporter } from './lib/bindReporter';\nimport { initMetric } from './lib/initMetric';\nimport { initUnique } from './lib/initUnique';\nimport { LayoutShiftManager } from './lib/LayoutShiftManager';\nimport { observe } from './lib/observe';\nimport { runOnce } from './lib/runOnce';\nimport { onFCP } from './onFCP';\nimport type { CLSMetric, MetricRatingThresholds, ReportOpts } from './types';\n\n/** Thresholds for CLS. See https://web.dev/articles/cls#what_is_a_good_cls_score */\nexport const CLSThresholds: MetricRatingThresholds = [0.1, 0.25];\n\n/**\n * Calculates the [CLS](https://web.dev/articles/cls) value for the current page and\n * calls the `callback` function once the value is ready to be reported, along\n * with all `layout-shift` performance entries that were used in the metric\n * value calculation. The reported value is a `double` (corresponding to a\n * [layout shift score](https://web.dev/articles/cls#layout_shift_score)).\n *\n * If the `reportAllChanges` configuration option is set to `true`, the\n * `callback` function will be called as soon as the value is initially\n * determined as well as any time the value changes throughout the page\n * lifespan.\n *\n * _**Important:** CLS should be continually monitored for changes throughout\n * the entire lifespan of a pageâ€”including if the user returns to the page after\n * it's been hidden/backgrounded. However, since browsers often [will not fire\n * additional callbacks once the user has backgrounded a\n * page](https://developer.chrome.com/blog/page-lifecycle-api/#advice-hidden),\n * `callback` is always called when the page's visibility state changes to\n * hidden. As a result, the `callback` function might be called multiple times\n * during the same page load._\n */\nexport const onCLS = (onReport: (metric: CLSMetric) => void, opts: ReportOpts = {}) => {\n  // Start monitoring FCP so we can only report CLS if FCP is also reported.\n  // Note: this is done to match the current behavior of CrUX.\n  onFCP(\n    runOnce(() => {\n      const metric = initMetric('CLS', 0);\n      let report: ReturnType<typeof bindReporter>;\n\n      const layoutShiftManager = initUnique(opts, LayoutShiftManager);\n\n      const handleEntries = (entries: LayoutShift[]) => {\n        for (const entry of entries) {\n          layoutShiftManager._processEntry(entry);\n        }\n\n        // If the current session value is larger than the current CLS value,\n        // update CLS and the entries contributing to it.\n        if (layoutShiftManager._sessionValue > metric.value) {\n          metric.value = layoutShiftManager._sessionValue;\n          metric.entries = layoutShiftManager._sessionEntries;\n          report();\n        }\n      };\n\n      const po = observe('layout-shift', handleEntries);\n      if (po) {\n        report = bindReporter(onReport, metric, CLSThresholds, opts!.reportAllChanges);\n\n        WINDOW.document?.addEventListener('visibilitychange', () => {\n          if (WINDOW.document?.visibilityState === 'hidden') {\n            handleEntries(po.takeRecords() as CLSMetric['entries']);\n            report(true);\n          }\n        });\n\n        // Queue a task to report (if nothing else triggers a report first).\n        // This allows CLS to be reported as soon as FCP fires when\n        // `reportAllChanges` is true.\n        WINDOW?.setTimeout?.(report);\n      }\n    }),\n  );\n};\n"],"names":["onFCP","runOnce","initMetric","initUnique","LayoutShiftManager","observe","bindReporter","WINDOW"],"mappings":";;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAYA;AACO,MAAM,aAAa,GAA2B,CAAC,GAAG,EAAE,IAAI;;AAE/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,KAAA,GAAQ,CAAC,QAAQ,EAA+B,IAAI,GAAe,EAAE,KAAK;AACvF;AACA;AACA,EAAEA,WAAK;AACP,IAAIC,eAAO,CAAC,MAAM;AAClB,MAAM,MAAM,SAASC,qBAAU,CAAC,KAAK,EAAE,CAAC,CAAC;AACzC,MAAM,IAAI,MAAM;;AAEhB,MAAM,MAAM,qBAAqBC,qBAAU,CAAC,IAAI,EAAEC,qCAAkB,CAAC;;AAErE,MAAM,MAAM,aAAA,GAAgB,CAAC,OAAO,KAAoB;AACxD,QAAQ,KAAK,MAAM,KAAA,IAAS,OAAO,EAAE;AACrC,UAAU,kBAAkB,CAAC,aAAa,CAAC,KAAK,CAAC;AACjD;;AAEA;AACA;AACA,QAAQ,IAAI,kBAAkB,CAAC,gBAAgB,MAAM,CAAC,KAAK,EAAE;AAC7D,UAAU,MAAM,CAAC,KAAA,GAAQ,kBAAkB,CAAC,aAAa;AACzD,UAAU,MAAM,CAAC,OAAA,GAAU,kBAAkB,CAAC,eAAe;AAC7D,UAAU,MAAM,EAAE;AAClB;AACA,OAAO;;AAEP,MAAM,MAAM,KAAKC,eAAO,CAAC,cAAc,EAAE,aAAa,CAAC;AACvD,MAAM,IAAI,EAAE,EAAE;AACd,QAAQ,MAAA,GAASC,yBAAY,CAAC,QAAQ,EAAE,MAAM,EAAE,aAAa,EAAE,IAAI,CAAE,gBAAgB,CAAC;;AAEtF,QAAQC,YAAM,CAAC,QAAQ,EAAE,gBAAgB,CAAC,kBAAkB,EAAE,MAAM;AACpE,UAAU,IAAIA,YAAM,CAAC,QAAQ,EAAE,eAAA,KAAoB,QAAQ,EAAE;AAC7D,YAAY,aAAa,CAAC,EAAE,CAAC,WAAW,IAA2B;AACnE,YAAY,MAAM,CAAC,IAAI,CAAC;AACxB;AACA,SAAS,CAAC;;AAEV;AACA;AACA;AACA,QAAQA,YAAM,EAAE,UAAU,GAAG,MAAM,CAAC;AACpC;AACA,KAAK,CAAC;AACN,GAAG;AACH;;;;;"}