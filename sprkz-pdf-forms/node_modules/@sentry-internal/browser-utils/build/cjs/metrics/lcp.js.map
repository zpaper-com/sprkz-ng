{"version":3,"file":"lcp.js","sources":["../../../src/metrics/lcp.ts"],"sourcesContent":["import type { Client, SpanAttributes } from '@sentry/core';\nimport {\n  browserPerformanceTimeOrigin,\n  debug,\n  getCurrentScope,\n  htmlTreeAsString,\n  SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT,\n  SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE,\n  SEMANTIC_ATTRIBUTE_SENTRY_OP,\n  SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN,\n} from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { addLcpInstrumentationHandler } from './instrument';\nimport type { WebVitalReportEvent } from './utils';\nimport { listenForWebVitalReportEvents, msToSec, startStandaloneWebVitalSpan, supportsWebVital } from './utils';\n\n/**\n * Starts tracking the Largest Contentful Paint on the current page and collects the value once\n *\n * - the page visibility is hidden\n * - a navigation span is started (to stop LCP measurement for SPA soft navigations)\n *\n * Once either of these events triggers, the LCP value is sent as a standalone span and we stop\n * measuring LCP for subsequent routes.\n */\nexport function trackLcpAsStandaloneSpan(client: Client): void {\n  let standaloneLcpValue = 0;\n  let standaloneLcpEntry: LargestContentfulPaint | undefined;\n\n  if (!supportsWebVital('largest-contentful-paint')) {\n    return;\n  }\n\n  const cleanupLcpHandler = addLcpInstrumentationHandler(({ metric }) => {\n    const entry = metric.entries[metric.entries.length - 1] as LargestContentfulPaint | undefined;\n    if (!entry) {\n      return;\n    }\n    standaloneLcpValue = metric.value;\n    standaloneLcpEntry = entry;\n  }, true);\n\n  listenForWebVitalReportEvents(client, (reportEvent, pageloadSpanId) => {\n    _sendStandaloneLcpSpan(standaloneLcpValue, standaloneLcpEntry, pageloadSpanId, reportEvent);\n    cleanupLcpHandler();\n  });\n}\n\n/**\n * Exported only for testing!\n */\nexport function _sendStandaloneLcpSpan(\n  lcpValue: number,\n  entry: LargestContentfulPaint | undefined,\n  pageloadSpanId: string,\n  reportEvent: WebVitalReportEvent,\n) {\n  DEBUG_BUILD && debug.log(`Sending LCP span (${lcpValue})`);\n\n  const startTime = msToSec((browserPerformanceTimeOrigin() || 0) + (entry?.startTime || 0));\n  const routeName = getCurrentScope().getScopeData().transactionName;\n\n  const name = entry ? htmlTreeAsString(entry.element) : 'Largest contentful paint';\n\n  const attributes: SpanAttributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: 'auto.http.browser.lcp',\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: 'ui.webvital.lcp',\n    [SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME]: 0, // LCP is a point-in-time metric\n    // attach the pageload span id to the LCP span so that we can link them in the UI\n    'sentry.pageload.span_id': pageloadSpanId,\n    // describes what triggered the web vital to be reported\n    'sentry.report_event': reportEvent,\n  };\n\n  if (entry) {\n    entry.element && (attributes['lcp.element'] = htmlTreeAsString(entry.element));\n    entry.id && (attributes['lcp.id'] = entry.id);\n\n    // Trim URL to the first 200 characters.\n    entry.url && (attributes['lcp.url'] = entry.url.trim().slice(0, 200));\n\n    // loadTime is the time of LCP that's related to receiving the LCP element response..\n    entry.loadTime != null && (attributes['lcp.loadTime'] = entry.loadTime);\n\n    // renderTime is loadTime + rendering time\n    // it's 0 if the LCP element is loaded from a 3rd party origin that doesn't send the\n    // `Timing-Allow-Origin` header.\n    entry.renderTime != null && (attributes['lcp.renderTime'] = entry.renderTime);\n\n    entry.size != null && (attributes['lcp.size'] = entry.size);\n  }\n\n  const span = startStandaloneWebVitalSpan({\n    name,\n    transaction: routeName,\n    attributes,\n    startTime,\n  });\n\n  if (span) {\n    span.addEvent('lcp', {\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT]: 'millisecond',\n      [SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE]: lcpValue,\n    });\n\n    // LCP is a point-in-time metric, so we end the span immediately\n    span.end(startTime);\n  }\n}\n"],"names":["supportsWebVital","addLcpInstrumentationHandler","listenForWebVitalReportEvents","DEBUG_BUILD","debug","msToSec","browserPerformanceTimeOrigin","getCurrentScope","htmlTreeAsString","SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN","SEMANTIC_ATTRIBUTE_SENTRY_OP","SEMANTIC_ATTRIBUTE_EXCLUSIVE_TIME","startStandaloneWebVitalSpan","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_UNIT","SEMANTIC_ATTRIBUTE_SENTRY_MEASUREMENT_VALUE"],"mappings":"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"}