{"version":3,"file":"InteractionManager.js","sources":["../../../../../src/metrics/web-vitals/lib/InteractionManager.ts"],"sourcesContent":["/*\n * Copyright 2024 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getInteractionCount } from './polyfills/interactionCountPolyfill.js';\n\nexport interface Interaction {\n  _latency: number;\n  // While the `id` and `entries` properties are also internal and could be\n  // mangled by prefixing with an underscore, since they correspond to public\n  // symbols there is no need to mangle them as the library will compress\n  // better if we reuse the existing names.\n  id: number;\n  entries: PerformanceEventTiming[];\n}\n\n// To prevent unnecessary memory usage on pages with lots of interactions,\n// store at most 10 of the longest interactions to consider as INP candidates.\nconst MAX_INTERACTIONS_TO_CONSIDER = 10;\n\n// Used to store the interaction count after a bfcache restore, since p98\n// interaction latencies should only consider the current navigation.\nlet prevInteractionCount = 0;\n\n/**\n * Returns the interaction count since the last bfcache restore (or for the\n * full page lifecycle if there were no bfcache restores).\n */\nconst getInteractionCountForNavigation = () => {\n  return getInteractionCount() - prevInteractionCount;\n};\n\n/**\n *\n */\nexport class InteractionManager {\n  /**\n   * A list of longest interactions on the page (by latency) sorted so the\n   * longest one is first. The list is at most MAX_INTERACTIONS_TO_CONSIDER\n   * long.\n   */\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  _longestInteractionList: Interaction[] = [];\n\n  /**\n   * A mapping of longest interactions by their interaction ID.\n   * This is used for faster lookup.\n   */\n  // eslint-disable-next-line @sentry-internal/sdk/no-class-field-initializers, @typescript-eslint/explicit-member-accessibility\n  _longestInteractionMap: Map<number, Interaction> = new Map();\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _onBeforeProcessingEntry?: (entry: PerformanceEventTiming) => void;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _onAfterProcessingINPCandidate?: (interaction: Interaction) => void;\n\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility, jsdoc/require-jsdoc\n  _resetInteractions() {\n    prevInteractionCount = getInteractionCount();\n    this._longestInteractionList.length = 0;\n    this._longestInteractionMap.clear();\n  }\n\n  /**\n   * Returns the estimated p98 longest interaction based on the stored\n   * interaction candidates and the interaction count for the current page.\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _estimateP98LongestInteraction() {\n    const candidateInteractionIndex = Math.min(\n      this._longestInteractionList.length - 1,\n      Math.floor(getInteractionCountForNavigation() / 50),\n    );\n\n    return this._longestInteractionList[candidateInteractionIndex];\n  }\n\n  /**\n   * Takes a performance entry and adds it to the list of worst interactions\n   * if its duration is long enough to make it among the worst. If the\n   * entry is part of an existing interaction, it is merged and the latency\n   * and entries list is updated as needed.\n   */\n  // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility\n  _processEntry(entry: PerformanceEventTiming) {\n    this._onBeforeProcessingEntry?.(entry);\n\n    // Skip further processing for entries that cannot be INP candidates.\n    if (!(entry.interactionId || entry.entryType === 'first-input')) return;\n\n    // The least-long of the 10 longest interactions.\n    const minLongestInteraction = this._longestInteractionList.at(-1);\n\n    let interaction = this._longestInteractionMap.get(entry.interactionId!);\n\n    // Only process the entry if it's possibly one of the ten longest,\n    // or if it's part of an existing interaction.\n    if (\n      interaction ||\n      this._longestInteractionList.length < MAX_INTERACTIONS_TO_CONSIDER ||\n      // If the above conditions are false, `minLongestInteraction` will be set.\n      entry.duration > minLongestInteraction!._latency\n    ) {\n      // If the interaction already exists, update it. Otherwise create one.\n      if (interaction) {\n        // If the new entry has a longer duration, replace the old entries,\n        // otherwise add to the array.\n        if (entry.duration > interaction._latency) {\n          interaction.entries = [entry];\n          interaction._latency = entry.duration;\n        } else if (entry.duration === interaction._latency && entry.startTime === interaction.entries[0]!.startTime) {\n          interaction.entries.push(entry);\n        }\n      } else {\n        interaction = {\n          id: entry.interactionId!,\n          entries: [entry],\n          _latency: entry.duration,\n        };\n        this._longestInteractionMap.set(interaction.id, interaction);\n        this._longestInteractionList.push(interaction);\n      }\n\n      // Sort the entries by latency (descending) and keep only the top ten.\n      this._longestInteractionList.sort((a, b) => b._latency - a._latency);\n      if (this._longestInteractionList.length > MAX_INTERACTIONS_TO_CONSIDER) {\n        const removedInteractions = this._longestInteractionList.splice(MAX_INTERACTIONS_TO_CONSIDER);\n\n        for (const interaction of removedInteractions) {\n          this._longestInteractionMap.delete(interaction.id);\n        }\n      }\n\n      // Call any post-processing on the interaction\n      this._onAfterProcessingINPCandidate?.(interaction);\n    }\n  }\n}\n"],"names":[],"mappings":"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"}