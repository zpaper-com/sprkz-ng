{"version":3,"file":"webWorker.js","sources":["../../../../src/integrations/webWorker.ts"],"sourcesContent":["import type { Integration, IntegrationFn } from '@sentry/core';\nimport { debug, defineIntegration, isPlainObject } from '@sentry/core';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { WINDOW } from '../helpers';\n\nexport const INTEGRATION_NAME = 'WebWorker';\n\ninterface WebWorkerMessage {\n  _sentryMessage: boolean;\n  _sentryDebugIds?: Record<string, string>;\n}\n\ninterface WebWorkerIntegrationOptions {\n  worker: Worker | Array<Worker>;\n}\n\ninterface WebWorkerIntegration extends Integration {\n  addWorker: (worker: Worker) => void;\n}\n\n/**\n * Use this integration to set up Sentry with web workers.\n *\n * IMPORTANT: This integration must be added **before** you start listening to\n * any messages from the worker. Otherwise, your message handlers will receive\n * messages from the Sentry SDK which you need to ignore.\n *\n * This integration only has an effect, if you call `Sentry.registerWorker(self)`\n * from within the worker(s) you're adding to the integration.\n *\n * Given that you want to initialize the SDK as early as possible, you most likely\n * want to add this integration **after** initializing the SDK:\n *\n * @example:\n * ```ts filename={main.js}\n * import * as Sentry from '@sentry/<your-sdk>';\n *\n * // some time earlier:\n * Sentry.init(...)\n *\n * // 1. Initialize the worker\n * const worker = new Worker(new URL('./worker.ts', import.meta.url));\n *\n * // 2. Add the integration\n * const webWorkerIntegration = Sentry.webWorkerIntegration({ worker });\n * Sentry.addIntegration(webWorkerIntegration);\n *\n * // 3. Register message listeners on the worker\n * worker.addEventListener('message', event => {\n *  // ...\n * });\n * ```\n *\n * If you initialize multiple workers at the same time, you can also pass an array of workers\n * to the integration:\n *\n * ```ts filename={main.js}\n * const webWorkerIntegration = Sentry.webWorkerIntegration({ worker: [worker1, worker2] });\n * Sentry.addIntegration(webWorkerIntegration);\n * ```\n *\n * If you have any additional workers that you initialize at a later point,\n * you can add them to the integration as follows:\n *\n * ```ts filename={main.js}\n * const webWorkerIntegration = Sentry.webWorkerIntegration({ worker: worker1 });\n * Sentry.addIntegration(webWorkerIntegration);\n *\n * // sometime later:\n * webWorkerIntegration.addWorker(worker2);\n * ```\n *\n * Of course, you can also directly add the integration in Sentry.init:\n * ```ts filename={main.js}\n * import * as Sentry from '@sentry/<your-sdk>';\n *\n * // 1. Initialize the worker\n * const worker = new Worker(new URL('./worker.ts', import.meta.url));\n *\n * // 2. Initialize the SDK\n * Sentry.init({\n *  integrations: [Sentry.webWorkerIntegration({ worker })]\n * });\n *\n * // 3. Register message listeners on the worker\n * worker.addEventListener('message', event => {\n *  // ...\n * });\n * ```\n *\n * @param options {WebWorkerIntegrationOptions} Integration options:\n *   - `worker`: The worker instance.\n */\nexport const webWorkerIntegration = defineIntegration(({ worker }: WebWorkerIntegrationOptions) => ({\n  name: INTEGRATION_NAME,\n  setupOnce: () => {\n    (Array.isArray(worker) ? worker : [worker]).forEach(w => listenForSentryDebugIdMessages(w));\n  },\n  addWorker: (worker: Worker) => listenForSentryDebugIdMessages(worker),\n})) as IntegrationFn<WebWorkerIntegration>;\n\nfunction listenForSentryDebugIdMessages(worker: Worker): void {\n  worker.addEventListener('message', event => {\n    if (isSentryDebugIdMessage(event.data)) {\n      event.stopImmediatePropagation(); // other listeners should not receive this message\n      DEBUG_BUILD && debug.log('Sentry debugId web worker message received', event.data);\n      WINDOW._sentryDebugIds = {\n        ...event.data._sentryDebugIds,\n        // debugIds of the main thread have precedence over the worker's in case of a collision.\n        ...WINDOW._sentryDebugIds,\n      };\n    }\n  });\n}\n\ninterface RegisterWebWorkerOptions {\n  self: Worker & { _sentryDebugIds?: Record<string, string> };\n}\n\n/**\n * Use this function to register the worker with the Sentry SDK.\n *\n * @example\n * ```ts filename={worker.js}\n * import * as Sentry from '@sentry/<your-sdk>';\n *\n * // Do this as early as possible in your worker.\n * Sentry.registerWorker({ self });\n *\n * // continue setting up your worker\n * self.postMessage(...)\n * ```\n * @param options {RegisterWebWorkerOptions} Integration options:\n *   - `self`: The worker instance you're calling this function from (self).\n */\nexport function registerWebWorker({ self }: RegisterWebWorkerOptions): void {\n  self.postMessage({\n    _sentryMessage: true,\n    _sentryDebugIds: self._sentryDebugIds ?? undefined,\n  });\n}\n\nfunction isSentryDebugIdMessage(eventData: unknown): eventData is WebWorkerMessage {\n  return (\n    isPlainObject(eventData) &&\n    eventData._sentryMessage === true &&\n    '_sentryDebugIds' in eventData &&\n    (isPlainObject(eventData._sentryDebugIds) || eventData._sentryDebugIds === undefined)\n  );\n}\n"],"names":["defineIntegration","DEBUG_BUILD","debug","WINDOW","isPlainObject"],"mappings":";;;;;;AAKO,MAAM,gBAAA,GAAmB;;AAehC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,MAAM,oBAAA,GAAuBA,sBAAiB,CAAC,CAAC,EAAE,MAAA,EAAQ,MAAmC;AACpG,EAAE,IAAI,EAAE,gBAAgB;AACxB,EAAE,SAAS,EAAE,MAAM;AACnB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAA,GAAI,MAAA,GAAS,CAAC,MAAM,CAAC,EAAE,OAAO,CAAC,CAAA,IAAK,8BAA8B,CAAC,CAAC,CAAC,CAAC;AAC/F,GAAG;AACH,EAAE,SAAS,EAAE,CAAC,MAAM,KAAa,8BAA8B,CAAC,MAAM,CAAC;AACvE,CAAC,CAAC,CAAA;;AAEF,SAAS,8BAA8B,CAAC,MAAM,EAAgB;AAC9D,EAAE,MAAM,CAAC,gBAAgB,CAAC,SAAS,EAAE,SAAS;AAC9C,IAAI,IAAI,sBAAsB,CAAC,KAAK,CAAC,IAAI,CAAC,EAAE;AAC5C,MAAM,KAAK,CAAC,wBAAwB,EAAE,CAAA;AACtC,MAAMC,sBAAA,IAAeC,UAAK,CAAC,GAAG,CAAC,4CAA4C,EAAE,KAAK,CAAC,IAAI,CAAC;AACxF,MAAMC,cAAM,CAAC,eAAA,GAAkB;AAC/B,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,eAAe;AACrC;AACA,QAAQ,GAAGA,cAAM,CAAC,eAAe;AACjC,OAAO;AACP;AACA,GAAG,CAAC;AACJ;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAAS,iBAAiB,CAAC,EAAE,IAAA,EAAM,EAAkC;AAC5E,EAAE,IAAI,CAAC,WAAW,CAAC;AACnB,IAAI,cAAc,EAAE,IAAI;AACxB,IAAI,eAAe,EAAE,IAAI,CAAC,eAAA,IAAmB,SAAS;AACtD,GAAG,CAAC;AACJ;;AAEA,SAAS,sBAAsB,CAAC,SAAS,EAA0C;AACnF,EAAE;AACF,IAAIC,kBAAa,CAAC,SAAS,CAAA;AAC3B,IAAI,SAAS,CAAC,cAAA,KAAmB,IAAA;AACjC,IAAI,iBAAA,IAAqB,SAAA;AACzB,KAAKA,kBAAa,CAAC,SAAS,CAAC,eAAe,CAAA,IAAK,SAAS,CAAC,eAAA,KAAoB,SAAS;AACxF;AACA;;;;;;"}