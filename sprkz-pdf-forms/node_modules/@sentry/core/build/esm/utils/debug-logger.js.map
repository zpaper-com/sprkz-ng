{"version":3,"file":"debug-logger.js","sources":["../../../src/utils/debug-logger.ts"],"sourcesContent":["import { getGlobalSingleton } from '../carrier';\nimport { DEBUG_BUILD } from '../debug-build';\nimport type { ConsoleLevel } from '../types-hoist/instrument';\nimport { GLOBAL_OBJ } from './worldwide';\n\n/**\n * A Sentry Logger instance.\n *\n * @deprecated Use {@link debug} instead with the {@link SentryDebugLogger} type.\n */\nexport interface Logger {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n  log(...args: Parameters<typeof console.log>): void;\n  info(...args: Parameters<typeof console.info>): void;\n  warn(...args: Parameters<typeof console.warn>): void;\n  error(...args: Parameters<typeof console.error>): void;\n  debug(...args: Parameters<typeof console.debug>): void;\n  assert(...args: Parameters<typeof console.assert>): void;\n  trace(...args: Parameters<typeof console.trace>): void;\n}\n\nexport interface SentryDebugLogger {\n  disable(): void;\n  enable(): void;\n  isEnabled(): boolean;\n  log(...args: Parameters<typeof console.log>): void;\n  warn(...args: Parameters<typeof console.warn>): void;\n  error(...args: Parameters<typeof console.error>): void;\n}\n\nexport const CONSOLE_LEVELS: readonly ConsoleLevel[] = [\n  'debug',\n  'info',\n  'warn',\n  'error',\n  'log',\n  'assert',\n  'trace',\n] as const;\n\n/** Prefix for logging strings */\nconst PREFIX = 'Sentry Logger ';\n\n/** This may be mutated by the console instrumentation. */\nexport const originalConsoleMethods: Partial<{\n  log(...args: Parameters<typeof console.log>): void;\n  info(...args: Parameters<typeof console.info>): void;\n  warn(...args: Parameters<typeof console.warn>): void;\n  error(...args: Parameters<typeof console.error>): void;\n  debug(...args: Parameters<typeof console.debug>): void;\n  assert(...args: Parameters<typeof console.assert>): void;\n  trace(...args: Parameters<typeof console.trace>): void;\n}> = {};\n\n/**\n * Temporarily disable sentry console instrumentations.\n *\n * @param callback The function to run against the original `console` messages\n * @returns The results of the callback\n */\nexport function consoleSandbox<T>(callback: () => T): T {\n  if (!('console' in GLOBAL_OBJ)) {\n    return callback();\n  }\n\n  const console = GLOBAL_OBJ.console as Console;\n  const wrappedFuncs: Partial<Record<ConsoleLevel, (...args: unknown[]) => void>> = {};\n\n  const wrappedLevels = Object.keys(originalConsoleMethods) as ConsoleLevel[];\n\n  // Restore all wrapped console methods\n  wrappedLevels.forEach(level => {\n    const originalConsoleMethod = originalConsoleMethods[level];\n    wrappedFuncs[level] = console[level] as (...args: unknown[]) => void;\n    console[level] = originalConsoleMethod as (...args: unknown[]) => void;\n  });\n\n  try {\n    return callback();\n  } finally {\n    // Revert restoration to wrapped state\n    wrappedLevels.forEach(level => {\n      console[level] = wrappedFuncs[level] as (...args: unknown[]) => void;\n    });\n  }\n}\n\nfunction enable(): void {\n  _getLoggerSettings().enabled = true;\n}\n\nfunction disable(): void {\n  _getLoggerSettings().enabled = false;\n}\n\nfunction isEnabled(): boolean {\n  return _getLoggerSettings().enabled;\n}\n\nfunction log(...args: Parameters<typeof console.log>): void {\n  _maybeLog('log', ...args);\n}\n\nfunction info(...args: Parameters<typeof console.info>): void {\n  _maybeLog('info', ...args);\n}\n\nfunction warn(...args: Parameters<typeof console.warn>): void {\n  _maybeLog('warn', ...args);\n}\n\nfunction error(...args: Parameters<typeof console.error>): void {\n  _maybeLog('error', ...args);\n}\n\nfunction _debug(...args: Parameters<typeof console.debug>): void {\n  _maybeLog('debug', ...args);\n}\n\nfunction assert(...args: Parameters<typeof console.assert>): void {\n  _maybeLog('assert', ...args);\n}\n\nfunction trace(...args: Parameters<typeof console.trace>): void {\n  _maybeLog('trace', ...args);\n}\n\nfunction _maybeLog(level: ConsoleLevel, ...args: Parameters<(typeof console)[typeof level]>): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  if (isEnabled()) {\n    consoleSandbox(() => {\n      GLOBAL_OBJ.console[level](`${PREFIX}[${level}]:`, ...args);\n    });\n  }\n}\n\nfunction _getLoggerSettings(): { enabled: boolean } {\n  if (!DEBUG_BUILD) {\n    return { enabled: false };\n  }\n\n  return getGlobalSingleton('loggerSettings', () => ({ enabled: false }));\n}\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n * The logger is a singleton on the carrier, to ensure that a consistent logger is used throughout the SDK.\n *\n * @deprecated Use {@link debug} instead.\n */\nexport const logger = {\n  /** Enable logging. */\n  enable,\n  /** Disable logging. */\n  disable,\n  /** Check if logging is enabled. */\n  isEnabled,\n  /** Log a message. */\n  log,\n  /** Log level info */\n  info,\n  /** Log a warning. */\n  warn,\n  /** Log an error. */\n  error,\n  /** Log a debug message. */\n  debug: _debug,\n  /** Log an assertion. */\n  assert,\n  /** Log a trace. */\n  trace,\n  // eslint-disable-next-line deprecation/deprecation\n} satisfies Logger;\n\n/**\n * This is a logger singleton which either logs things or no-ops if logging is not enabled.\n */\nexport const debug = {\n  /** Enable logging. */\n  enable,\n  /** Disable logging. */\n  disable,\n  /** Check if logging is enabled. */\n  isEnabled,\n  /** Log a message. */\n  log,\n  /** Log a warning. */\n  warn,\n  /** Log an error. */\n  error,\n} satisfies SentryDebugLogger;\n"],"names":[],"mappings":"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"}