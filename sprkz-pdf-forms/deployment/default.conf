# Nginx server configuration for Sprkz PDF Forms
server {
    listen 8080;
    server_name localhost;
    root /usr/share/nginx/html;
    index index.html index.htm;

    # Security headers (additional to nginx.conf)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Enable gzip for this server
    gzip_static on;

    # Cache static assets aggressively
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Vary "Accept-Encoding";
        
        # Apply rate limiting to static files
        limit_req zone=static burst=20 nodelay;
        
        # CORS headers for fonts and other assets
        add_header Access-Control-Allow-Origin *;
        
        # Security headers for static files
        add_header X-Content-Type-Options nosniff;
        add_header X-Frame-Options DENY;
    }

    # Cache HTML files for short periods to allow for updates
    location ~* \.(html|htm)$ {
        expires 10m;
        add_header Cache-Control "public, no-cache";
        add_header Vary "Accept-Encoding";
    }

    # Handle PDF.js worker files with proper MIME type
    location ~* \.worker\.(js|mjs)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
        add_header Content-Type "application/javascript";
        add_header Cross-Origin-Embedder-Policy "require-corp";
        add_header Cross-Origin-Opener-Policy "same-origin";
    }

    # Handle PDF files with proper MIME type and CORS
    location ~* \.pdf$ {
        expires 1h;
        add_header Content-Type "application/pdf";
        add_header Access-Control-Allow-Origin *;
        add_header Access-Control-Allow-Methods "GET, OPTIONS";
        add_header Cross-Origin-Resource-Policy "cross-origin";
        
        # Handle preflight requests
        if ($request_method = 'OPTIONS') {
            add_header Access-Control-Allow-Origin *;
            add_header Access-Control-Allow-Methods "GET, OPTIONS";
            add_header Access-Control-Allow-Headers "Range, Content-Type";
            add_header Access-Control-Max-Age 1728000;
            add_header Content-Type "text/plain; charset=utf-8";
            add_header Content-Length 0;
            return 204;
        }
    }

    # API proxy (if backend API is needed)
    location /api/ {
        # Apply rate limiting to API calls
        limit_req zone=api burst=5 nodelay;
        
        # Proxy to backend API
        # proxy_pass http://backend:3001;
        # proxy_http_version 1.1;
        # proxy_set_header Upgrade $http_upgrade;
        # proxy_set_header Connection 'upgrade';
        # proxy_set_header Host $host;
        # proxy_set_header X-Real-IP $remote_addr;
        # proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        # proxy_set_header X-Forwarded-Proto $scheme;
        # proxy_cache_bypass $http_upgrade;
        
        # For now, return 404 since no backend is implemented
        return 404;
    }

    # Health check endpoint
    location /health {
        access_log off;
        add_header Content-Type text/plain;
        return 200 'healthy';
    }

    # Detailed health check for load balancers
    location /health/detailed {
        access_log off;
        add_header Content-Type application/json;
        return 200 '{"status":"healthy","timestamp":"$time_iso8601","version":"$app_version"}';
    }

    # Robots.txt
    location /robots.txt {
        access_log off;
        add_header Content-Type text/plain;
        return 200 "User-agent: *\nDisallow: /api/\nDisallow: /health\n";
    }

    # Handle React Router (SPA routing)
    location / {
        try_files $uri $uri/ /index.html;
        
        # Security headers for main application
        add_header X-Frame-Options DENY;
        add_header X-Content-Type-Options nosniff;
        add_header X-XSS-Protection "1; mode=block";
        
        # Cache control for main app
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Expires "0";
    }

    # Handle service worker
    location /sw.js {
        expires 0;
        add_header Cache-Control "no-cache, no-store, must-revalidate";
        add_header Pragma "no-cache";
        add_header Service-Worker-Allowed "/";
    }

    # Block access to sensitive files
    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }

    location ~ ~$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Block access to source maps in production
    location ~ \.map$ {
        deny all;
        access_log off;
        log_not_found off;
    }

    # Error pages
    error_page 404 /404.html;
    error_page 500 502 503 504 /50x.html;
    
    location = /404.html {
        root /usr/share/nginx/html;
        internal;
    }
    
    location = /50x.html {
        root /usr/share/nginx/html;
        internal;
    }

    # Security: Block common exploit attempts
    location ~ ^/(wp-|wordpress|admin|phpmyadmin) {
        deny all;
        access_log off;
        log_not_found off;
        return 444;
    }

    # Monitor nginx status (for internal monitoring)
    location /nginx_status {
        stub_status;
        allow 127.0.0.1;
        allow 172.16.0.0/12;  # Docker network
        allow 10.0.0.0/8;     # Internal network
        deny all;
        access_log off;
    }
}